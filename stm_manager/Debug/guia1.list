
guia1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a044  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b0  0800a248  0800a248  0001a248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3f8  0800b3f8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3f8  0800b3f8  0001b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b400  0800b400  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b400  0800b400  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b404  0800b404  0001b404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000080  0800b488  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  0800b488  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002263b  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047c2  00000000  00000000  000426e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00046eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  000482d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cac7  00000000  00000000  00049508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c428  00000000  00000000  00075fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001050d2  00000000  00000000  000923f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001974c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea4  00000000  00000000  0019751c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a22c 	.word	0x0800a22c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800a22c 	.word	0x0800a22c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800061c:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <MX_ADC1_Init+0xa0>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800064c:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800065a:	2201      	movs	r2, #1
 800065c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800066e:	f002 fbf9 	bl	8002e64 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000678:	f001 fa8c 	bl	8001b94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800068e:	f002 fe75 	bl	800337c <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000698:	f001 fa7c 	bl	8001b94 <Error_Handler>
  }

}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000027c 	.word	0x2000027c
 80006a8:	40012000 	.word	0x40012000

080006ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	; 0x30
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a25      	ldr	r2, [pc, #148]	; (8000760 <HAL_ADC_MspInit+0xb4>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d143      	bne.n	8000756 <HAL_ADC_MspInit+0xaa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	4a24      	ldr	r2, [pc, #144]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d8:	6453      	str	r3, [r2, #68]	; 0x44
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a1e      	ldr	r2, [pc, #120]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006fe:	2301      	movs	r3, #1
 8000700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000702:	2303      	movs	r3, #3
 8000704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4815      	ldr	r0, [pc, #84]	; (8000768 <HAL_ADC_MspInit+0xbc>)
 8000712:	f004 f877 	bl	8004804 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2012      	movs	r0, #18
 800071c:	f003 f963 	bl	80039e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000720:	2012      	movs	r0, #18
 8000722:	f003 f97c 	bl	8003a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */
	
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
		
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000756:	bf00      	nop
 8000758:	3730      	adds	r7, #48	; 0x30
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40012000 	.word	0x40012000
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000

0800076c <ADC_Config_Channel>:
}

/* USER CODE BEGIN 1 */

char ADC_Config_Channel(ADC_HandleTypeDef* hadc, uint8_t addr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
	ADC_ChannelConfTypeDef channel_config = {0};
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]

	/**** ADC1 CHANNELS ****/
	// IN0  - IN7  in pins PA0 - PA7
	// IN8  - IN9  in pins PB0 - PB1
	// IN10 - IN15 in pins PC0 - PC5
	pin = addr;
 8000786:	4a2d      	ldr	r2, [pc, #180]	; (800083c <ADC_Config_Channel+0xd0>)
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	7013      	strb	r3, [r2, #0]
	port = 2; // GPIO Port C
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <ADC_Config_Channel+0xd4>)
 800078e:	2202      	movs	r2, #2
 8000790:	701a      	strb	r2, [r3, #0]
	
	if(addr < 8) 				// Channels IN0 - IN7
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	2b07      	cmp	r3, #7
 8000796:	d803      	bhi.n	80007a0 <ADC_Config_Channel+0x34>
		port = 0;		 			// GPIO Port A
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <ADC_Config_Channel+0xd4>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e012      	b.n	80007c6 <ADC_Config_Channel+0x5a>
	else if(addr < 10)  // Channels IN8 - IN9
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b09      	cmp	r3, #9
 80007a4:	d809      	bhi.n	80007ba <ADC_Config_Channel+0x4e>
	{
		port = 1;					// GPIO Port B
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <ADC_Config_Channel+0xd4>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
		pin -= 8;					// Pins 0 - 1
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <ADC_Config_Channel+0xd0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3b08      	subs	r3, #8
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <ADC_Config_Channel+0xd0>)
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e005      	b.n	80007c6 <ADC_Config_Channel+0x5a>
	}
	else								// Channels IN10 - IN15
		pin -= 10;				// Pins 0 - 5
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <ADC_Config_Channel+0xd0>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	3b0a      	subs	r3, #10
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <ADC_Config_Channel+0xd0>)
 80007c4:	701a      	strb	r2, [r3, #0]
	
	pin_mode = GPIO_PIN_MODE(port, pin); // Save pin mode
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <ADC_Config_Channel+0xd4>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <ADC_Config_Channel+0xd8>)
 80007ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <ADC_Config_Channel+0xd0>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	fa22 f303 	lsr.w	r3, r2, r3
 80007de:	f003 0303 	and.w	r3, r3, #3
 80007e2:	4a19      	ldr	r2, [pc, #100]	; (8000848 <ADC_Config_Channel+0xdc>)
 80007e4:	6013      	str	r3, [r2, #0]
	if((pin_mode != GPIO_MODE_INPUT) && (pin_mode != GPIO_MODE_ANALOG)) // PinMode as output push-pull?
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <ADC_Config_Channel+0xdc>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d005      	beq.n	80007fa <ADC_Config_Channel+0x8e>
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <ADC_Config_Channel+0xdc>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	d001      	beq.n	80007fa <ADC_Config_Channel+0x8e>
		return (char)(-1);
 80007f6:	23ff      	movs	r3, #255	; 0xff
 80007f8:	e01b      	b.n	8000832 <ADC_Config_Channel+0xc6>
	
	GPIO_config_pins(port, (1<<pin), GPIO_MODE_ANALOG);
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <ADC_Config_Channel+0xd4>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <ADC_Config_Channel+0xd0>)
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	4611      	mov	r1, r2
 8000804:	2201      	movs	r2, #1
 8000806:	408a      	lsls	r2, r1
 8000808:	4611      	mov	r1, r2
 800080a:	2203      	movs	r2, #3
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fc5b 	bl	80010c8 <GPIO_config_pins>
	
	channel_config.Channel = ADC_Channels[addr];
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <ADC_Config_Channel+0xe0>)
 8000816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081a:	60bb      	str	r3, [r7, #8]
	channel_config.Rank = ADC_REGULAR_RANK_1;
 800081c:	2301      	movs	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
  channel_config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
	
	HAL_ADC_ConfigChannel(hadc, &channel_config);
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	4619      	mov	r1, r3
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f002 fda6 	bl	800337c <HAL_ADC_ConfigChannel>
	
	return 0;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200002c4 	.word	0x200002c4
 8000840:	200002cc 	.word	0x200002cc
 8000844:	0800ad9c 	.word	0x0800ad9c
 8000848:	20000350 	.word	0x20000350
 800084c:	0800ac4c 	.word	0x0800ac4c

08000850 <ADC_DeConfig_Channel>:

void ADC_DeConfig_Channel(ADC_HandleTypeDef* hadc, uint8_t addr)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
		GPIO_config_pins(port, (1<<pin), pin_mode);
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <ADC_DeConfig_Channel+0x30>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4a08      	ldr	r2, [pc, #32]	; (8000884 <ADC_DeConfig_Channel+0x34>)
 8000862:	7812      	ldrb	r2, [r2, #0]
 8000864:	4611      	mov	r1, r2
 8000866:	2201      	movs	r2, #1
 8000868:	408a      	lsls	r2, r1
 800086a:	4611      	mov	r1, r2
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <ADC_DeConfig_Channel+0x38>)
 800086e:	6812      	ldr	r2, [r2, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fc29 	bl	80010c8 <GPIO_config_pins>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200002cc 	.word	0x200002cc
 8000884:	200002c4 	.word	0x200002c4
 8000888:	20000350 	.word	0x20000350

0800088c <ADC_Polling_Conv>:

uint32_t ADC_Polling_Conv(ADC_HandleTypeDef* hadc)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	uint32_t dig_val = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
//	while(hadc->State == HAL_BUSY)
//		;
//	dig_val = HAL_ADC_GetValue(hadc);
//	HAL_ADC_Stop(hadc);
	
	return dig_val;
 8000898:	68fb      	ldr	r3, [r7, #12]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	static float y;
	
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (GPIO_PinState) 1);
	
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0); //#debug
 80008b0:	2101      	movs	r1, #1
 80008b2:	482a      	ldr	r0, [pc, #168]	; (800095c <HAL_ADC_ConvCpltCallback+0xb4>)
 80008b4:	f004 f983 	bl	8004bbe <HAL_GPIO_TogglePin>
	if(hadc->Instance == ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a28      	ldr	r2, [pc, #160]	; (8000960 <HAL_ADC_ConvCpltCallback+0xb8>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d147      	bne.n	8000952 <HAL_ADC_ConvCpltCallback+0xaa>
	{
		adcValue = HAL_ADC_GetValue(&hadc1);
 80008c2:	4828      	ldr	r0, [pc, #160]	; (8000964 <HAL_ADC_ConvCpltCallback+0xbc>)
 80008c4:	f002 fd38 	bl	8003338 <HAL_ADC_GetValue>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a27      	ldr	r2, [pc, #156]	; (8000968 <HAL_ADC_ConvCpltCallback+0xc0>)
 80008cc:	6013      	str	r3, [r2, #0]
		smps_left--;
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <HAL_ADC_ConvCpltCallback+0xc4>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	3b01      	subs	r3, #1
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b24      	ldr	r3, [pc, #144]	; (800096c <HAL_ADC_ConvCpltCallback+0xc4>)
 80008da:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (GPIO_PinState) 1);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4823      	ldr	r0, [pc, #140]	; (8000970 <HAL_ADC_ConvCpltCallback+0xc8>)
 80008e2:	f004 f953 	bl	8004b8c <HAL_GPIO_WritePin>
		// apply selected filter
		y = filter_calc(&f, adcValue);
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <HAL_ADC_ConvCpltCallback+0xc0>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4619      	mov	r1, r3
 80008ec:	4821      	ldr	r0, [pc, #132]	; (8000974 <HAL_ADC_ConvCpltCallback+0xcc>)
 80008ee:	f000 fb07 	bl	8000f00 <filter_calc>
 80008f2:	eef0 7a40 	vmov.f32	s15, s0
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <HAL_ADC_ConvCpltCallback+0xd0>)
 80008f8:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (GPIO_PinState) 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2101      	movs	r1, #1
 8000900:	481b      	ldr	r0, [pc, #108]	; (8000970 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000902:	f004 f943 	bl	8004b8c <HAL_GPIO_WritePin>

		if(y == -1) // is filter disabled?
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000908:	edd3 7a00 	vldr	s15, [r3]
 800090c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000910:	eef4 7a47 	vcmp.f32	s15, s14
 8000914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000918:	d105      	bne.n	8000926 <HAL_ADC_ConvCpltCallback+0x7e>
			// Add new value to buffer
			output(adcValue);
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <HAL_ADC_ConvCpltCallback+0xc0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f830 	bl	8000984 <output>
		}
		
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (GPIO_PinState) 0);
		//adcFlag = 1;
	}
}
 8000924:	e015      	b.n	8000952 <HAL_ADC_ConvCpltCallback+0xaa>
				if(y > 4095)  // larger than max digital DAC value?
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000928:	edd3 7a00 	vldr	s15, [r3]
 800092c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800097c <HAL_ADC_ConvCpltCallback+0xd4>
 8000930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000938:	dd02      	ble.n	8000940 <HAL_ADC_ConvCpltCallback+0x98>
					y = 4095;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_ADC_ConvCpltCallback+0xd0>)
 800093c:	4a10      	ldr	r2, [pc, #64]	; (8000980 <HAL_ADC_ConvCpltCallback+0xd8>)
 800093e:	601a      	str	r2, [r3, #0]
			output(y);
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000942:	edd3 7a00 	vldr	s15, [r3]
 8000946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800094a:	ee17 0a90 	vmov	r0, s15
 800094e:	f000 f819 	bl	8000984 <output>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40020000 	.word	0x40020000
 8000960:	40012000 	.word	0x40012000
 8000964:	2000027c 	.word	0x2000027c
 8000968:	200002c8 	.word	0x200002c8
 800096c:	20000278 	.word	0x20000278
 8000970:	40020400 	.word	0x40020400
 8000974:	200000b8 	.word	0x200000b8
 8000978:	200000a0 	.word	0x200000a0
 800097c:	457ff000 	.word	0x457ff000
 8000980:	457ff000 	.word	0x457ff000

08000984 <output>:

static void output(uint32_t value)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
//	char str[16];
	ADC_Values[ADC_Val_index & (ADC_VALUES_LEN - 1)] = value;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <output+0x6c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	f003 031f 	and.w	r3, r3, #31
 8000996:	4917      	ldr	r1, [pc, #92]	; (80009f4 <output+0x70>)
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	ADC_Val_index++;
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <output+0x6c>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	3301      	adds	r3, #1
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <output+0x6c>)
 80009aa:	701a      	strb	r2, [r3, #0]
	
//	sprintf(str, "n%d v%d\n\r", ADC_smp_num, value);
//	UART_puts(str);

	ADC_smp_num++;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <output+0x74>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <output+0x74>)
 80009b8:	801a      	strh	r2, [r3, #0]

	// Send to DAC
	// DAC ready to send?
	if(HAL_DAC_GetState(&hdac) != HAL_DAC_STATE_READY)
 80009ba:	4810      	ldr	r0, [pc, #64]	; (80009fc <output+0x78>)
 80009bc:	f003 fa80 	bl	8003ec0 <HAL_DAC_GetState>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d003      	beq.n	80009ce <output+0x4a>
		HAL_DAC_Stop(&hdac,DAC1_CHANNEL_1);
 80009c6:	2100      	movs	r1, #0
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <output+0x78>)
 80009ca:	f003 f8b6 	bl	8003b3a <HAL_DAC_Stop>
	// Start DAC and send value
	if(HAL_DAC_Start(&hdac,DAC1_CHANNEL_1) == HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	480a      	ldr	r0, [pc, #40]	; (80009fc <output+0x78>)
 80009d2:	f003 f860 	bl	8003a96 <HAL_DAC_Start>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d105      	bne.n	80009e8 <output+0x64>
		HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, value);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <output+0x78>)
 80009e4:	f003 f9da 	bl	8003d9c <HAL_DAC_SetValue>

}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000009c 	.word	0x2000009c
 80009f4:	200002d0 	.word	0x200002d0
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000354 	.word	0x20000354

08000a00 <print_adcValues>:

void print_adcValues(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af02      	add	r7, sp, #8
	char str[16];
	uint8_t arr_index = (ADC_Val_index - (ADC_smp_num - 1)), i;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <print_adcValues+0x6c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <print_adcValues+0x70>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	3301      	adds	r3, #1
 8000a1a:	75fb      	strb	r3, [r7, #23]
	
	for(i = 1; i < ADC_smp_num; i++)
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	75bb      	strb	r3, [r7, #22]
 8000a20:	e017      	b.n	8000a52 <print_adcValues+0x52>
	{
		snprintf(str, sizeof(str), "n%d v%ld\n\r", i, ADC_Values[arr_index & (ADC_VALUES_LEN - 1)]);
 8000a22:	7dba      	ldrb	r2, [r7, #22]
 8000a24:	7dfb      	ldrb	r3, [r7, #23]
 8000a26:	f003 031f 	and.w	r3, r3, #31
 8000a2a:	4912      	ldr	r1, [pc, #72]	; (8000a74 <print_adcValues+0x74>)
 8000a2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a30:	1d38      	adds	r0, r7, #4
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	4613      	mov	r3, r2
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <print_adcValues+0x78>)
 8000a38:	2110      	movs	r1, #16
 8000a3a:	f007 fc1f 	bl	800827c <sniprintf>
		UART_puts(str);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 f923 	bl	8002c8c <UART_puts>
		arr_index++;
 8000a46:	7dfb      	ldrb	r3, [r7, #23]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	75fb      	strb	r3, [r7, #23]
	for(i = 1; i < ADC_smp_num; i++)
 8000a4c:	7dbb      	ldrb	r3, [r7, #22]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	75bb      	strb	r3, [r7, #22]
 8000a52:	7dbb      	ldrb	r3, [r7, #22]
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <print_adcValues+0x70>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d3e0      	bcc.n	8000a22 <print_adcValues+0x22>
	}	
}	
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000009c 	.word	0x2000009c
 8000a70:	20000000 	.word	0x20000000
 8000a74:	200002d0 	.word	0x200002d0
 8000a78:	0800a248 	.word	0x0800a248

08000a7c <exec_cmd>:
		0
	},
};

char exec_cmd(const char *str)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	char err;
	
	err = parse_cmd(cmd_list, str);
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	4818      	ldr	r0, [pc, #96]	; (8000ae8 <exec_cmd+0x6c>)
 8000a88:	f001 f88a 	bl	8001ba0 <parse_cmd>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73fb      	strb	r3, [r7, #15]
	
	switch(err)
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	3bf9      	subs	r3, #249	; 0xf9
 8000a94:	2b05      	cmp	r3, #5
 8000a96:	d821      	bhi.n	8000adc <exec_cmd+0x60>
 8000a98:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <exec_cmd+0x24>)
 8000a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9e:	bf00      	nop
 8000aa0:	08000ad5 	.word	0x08000ad5
 8000aa4:	08000acd 	.word	0x08000acd
 8000aa8:	08000ab9 	.word	0x08000ab9
 8000aac:	08000add 	.word	0x08000add
 8000ab0:	08000add 	.word	0x08000add
 8000ab4:	08000add 	.word	0x08000add
	{
		case (char)(-ECMDNF):
			// No command found
			UART_puts("Command [");
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <exec_cmd+0x70>)
 8000aba:	f002 f8e7 	bl	8002c8c <UART_puts>
			UART_puts(Rx_Buffer);
 8000abe:	480c      	ldr	r0, [pc, #48]	; (8000af0 <exec_cmd+0x74>)
 8000ac0:	f002 f8e4 	bl	8002c8c <UART_puts>
			UART_puts("] not found.\n\r");
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <exec_cmd+0x78>)
 8000ac6:	f002 f8e1 	bl	8002c8c <UART_puts>
			break;
 8000aca:	e007      	b.n	8000adc <exec_cmd+0x60>
		
		case (char)(-EINVARG):
			// Invalid Arguments
			UART_puts("Invalid arguments.\n\r");
 8000acc:	480a      	ldr	r0, [pc, #40]	; (8000af8 <exec_cmd+0x7c>)
 8000ace:	f002 f8dd 	bl	8002c8c <UART_puts>
			break;
 8000ad2:	e003      	b.n	8000adc <exec_cmd+0x60>
			// Command list is empty
		//case (char)(-ENOLIST):
			// No memory available or bad allocation of memory
			break;
		case (char)(-EPERM):
			UART_puts("No permission.\n\r");
 8000ad4:	4809      	ldr	r0, [pc, #36]	; (8000afc <exec_cmd+0x80>)
 8000ad6:	f002 f8d9 	bl	8002c8c <UART_puts>
			break;
 8000ada:	bf00      	nop
	}
	
	return err;
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	0800ac8c 	.word	0x0800ac8c
 8000aec:	0800a604 	.word	0x0800a604
 8000af0:	200005e8 	.word	0x200005e8
 8000af4:	0800a610 	.word	0x0800a610
 8000af8:	0800a620 	.word	0x0800a620
 8000afc:	0800a638 	.word	0x0800a638

08000b00 <print_arg_help>:
@brief	 	 Print a list of the valid commands
******************************************************************************/
#define OPDONE 		2

static char print_arg_help(const Command_t *p, char arg[])
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0c4      	sub	sp, #272	; 0x110
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	6018      	str	r0, [r3, #0]
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	6019      	str	r1, [r3, #0]
	char str[256];

	if(strcmp(p->cmd,arg) == 0)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	463b      	mov	r3, r7
 8000b16:	6819      	ldr	r1, [r3, #0]
 8000b18:	4610      	mov	r0, r2
 8000b1a:	f7ff fb91 	bl	8000240 <strcmp>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d119      	bne.n	8000b58 <print_arg_help+0x58>
	{
		snprintf(str, sizeof(str), "%-6s %-28s\n\r%s\n\r", p->cmd, p->help, p->usage);
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6819      	ldr	r1, [r3, #0]
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	1d3a      	adds	r2, r7, #4
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	6892      	ldr	r2, [r2, #8]
 8000b36:	f107 0008 	add.w	r0, r7, #8
 8000b3a:	9201      	str	r2, [sp, #4]
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <print_arg_help+0x64>)
 8000b42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b46:	f007 fb99 	bl	800827c <sniprintf>
		UART_puts(str);
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 f89c 	bl	8002c8c <UART_puts>
		return OPDONE;
 8000b54:	2302      	movs	r3, #2
 8000b56:	e000      	b.n	8000b5a <print_arg_help+0x5a>
	}

	return ECMDNF;
 8000b58:	2305      	movs	r3, #5
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	0800a64c 	.word	0x0800a64c

08000b68 <print_full_help>:

static char print_full_help(const Command_t *p, char arg[])
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0a4      	sub	sp, #144	; 0x90
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
	char str[128];

//	snprintf(str, sizeof(str), "%-6s %-28s %s\n\r", p->cmd, p->help, p->usage);
	snprintf(str, sizeof(str), "%-6s %s\n\r", p->cmd, p->help);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f107 0008 	add.w	r0, r7, #8
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	4613      	mov	r3, r2
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <print_full_help+0x38>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	f007 fb79 	bl	800827c <sniprintf>
	UART_puts(str);
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f002 f87c 	bl	8002c8c <UART_puts>

	return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3788      	adds	r7, #136	; 0x88
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	0800a660 	.word	0x0800a660

08000ba4 <help_cb>:

char help_cb(uint8_t argc, char** argv)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b0a6      	sub	sp, #152	; 0x98
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
	const Command_t *p = cmd_list;
 8000bb0:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <help_cb+0xb4>)
 8000bb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	char str[128]; // Output message. Max message len is the same as buffer used in UART_puts
	char (*fun_ptr)(const Command_t *, char*) = &print_full_help;
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <help_cb+0xb8>)
 8000bb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	char retval = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	
	if(argc > 2) // number of arguments invalid?
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d901      	bls.n	8000bcc <help_cb+0x28>
		return (char)(-EINVARG);
 8000bc8:	23fa      	movs	r3, #250	; 0xfa
 8000bca:	e040      	b.n	8000c4e <help_cb+0xaa>
	
	if(argc == 2)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d103      	bne.n	8000bda <help_cb+0x36>
	{
		fun_ptr = &print_arg_help;
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <help_cb+0xbc>)
 8000bd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000bd8:	e01d      	b.n	8000c16 <help_cb+0x72>
	}
	else
	{
		UART_puts("List of utils:\n\r");
 8000bda:	4822      	ldr	r0, [pc, #136]	; (8000c64 <help_cb+0xc0>)
 8000bdc:	f002 f856 	bl	8002c8c <UART_puts>
		UART_puts("$      Insert last valid command\n\r");
 8000be0:	4821      	ldr	r0, [pc, #132]	; (8000c68 <help_cb+0xc4>)
 8000be2:	f002 f853 	bl	8002c8c <UART_puts>
		UART_puts("ESC    Clears input line\n\n\r");
 8000be6:	4821      	ldr	r0, [pc, #132]	; (8000c6c <help_cb+0xc8>)
 8000be8:	f002 f850 	bl	8002c8c <UART_puts>

		UART_puts("List of valid commands:\n\r");
 8000bec:	4820      	ldr	r0, [pc, #128]	; (8000c70 <help_cb+0xcc>)
 8000bee:	f002 f84d 	bl	8002c8c <UART_puts>
//		snprintf(str, sizeof(str), "%-6s|%-28s|%-s\n\n\r", "CMD", "HELP TEXT", "USAGE");
//		UART_puts(str);
	}

	while (p->cmd && (retval != OPDONE))
 8000bf2:	e010      	b.n	8000c16 <help_cb+0x72>
	{
		retval = fun_ptr(p, argv[1]);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	3304      	adds	r3, #4
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bfe:	4611      	mov	r1, r2
 8000c00:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000c04:	4798      	blx	r3
 8000c06:	4603      	mov	r3, r0
 8000c08:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		p++;
 8000c0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c10:	3310      	adds	r3, #16
 8000c12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	while (p->cmd && (retval != OPDONE))
 8000c16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <help_cb+0x84>
 8000c20:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d1e5      	bne.n	8000bf4 <help_cb+0x50>
	}

	if(retval == ECMDNF)
 8000c28:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000c2c:	2b05      	cmp	r3, #5
 8000c2e:	d10d      	bne.n	8000c4c <help_cb+0xa8>
	{
		snprintf(str, sizeof(str), "Command [%s] not found.\n\r", argv[1]);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	3304      	adds	r3, #4
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f107 000c 	add.w	r0, r7, #12
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <help_cb+0xd0>)
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	f007 fb1d 	bl	800827c <sniprintf>
		UART_puts(str);
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 f820 	bl	8002c8c <UART_puts>
	}

	return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3798      	adds	r7, #152	; 0x98
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	0800ac8c 	.word	0x0800ac8c
 8000c5c:	08000b69 	.word	0x08000b69
 8000c60:	08000b01 	.word	0x08000b01
 8000c64:	0800a66c 	.word	0x0800a66c
 8000c68:	0800a680 	.word	0x0800a680
 8000c6c:	0800a6a4 	.word	0x0800a6a4
 8000c70:	0800a6c0 	.word	0x0800a6c0
 8000c74:	0800a6dc 	.word	0x0800a6dc

08000c78 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_DAC_Init+0x64>)
 8000c88:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <MX_DAC_Init+0x68>)
 8000c8a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c8c:	4813      	ldr	r0, [pc, #76]	; (8000cdc <MX_DAC_Init+0x64>)
 8000c8e:	f002 fee0 	bl	8003a52 <HAL_DAC_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c98:	f000 ff7c 	bl	8001b94 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480c      	ldr	r0, [pc, #48]	; (8000cdc <MX_DAC_Init+0x64>)
 8000cac:	f003 f8b9 	bl	8003e22 <HAL_DAC_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000cb6:	f000 ff6d 	bl	8001b94 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000cba:	2324      	movs	r3, #36	; 0x24
 8000cbc:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2210      	movs	r2, #16
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_DAC_Init+0x64>)
 8000cc6:	f003 f8ac 	bl	8003e22 <HAL_DAC_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8000cd0:	f000 ff60 	bl	8001b94 <Error_Handler>
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000354 	.word	0x20000354
 8000ce0:	40007400 	.word	0x40007400

08000ce4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <HAL_DAC_MspInit+0xd8>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d155      	bne.n	8000db2 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000d06:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <HAL_DAC_MspInit+0xdc>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a2d      	ldr	r2, [pc, #180]	; (8000dc0 <HAL_DAC_MspInit+0xdc>)
 8000d0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <HAL_DAC_MspInit+0xdc>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <HAL_DAC_MspInit+0xdc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a27      	ldr	r2, [pc, #156]	; (8000dc0 <HAL_DAC_MspInit+0xdc>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <HAL_DAC_MspInit+0xdc>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d36:	2330      	movs	r3, #48	; 0x30
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	481e      	ldr	r0, [pc, #120]	; (8000dc4 <HAL_DAC_MspInit+0xe0>)
 8000d4a:	f003 fd5b 	bl	8004804 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <HAL_DAC_MspInit+0xe4>)
 8000d50:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <HAL_DAC_MspInit+0xe8>)
 8000d52:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_DAC_MspInit+0xe4>)
 8000d56:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000d5a:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_DAC_MspInit+0xe4>)
 8000d5e:	2240      	movs	r2, #64	; 0x40
 8000d60:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_DAC_MspInit+0xe4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_DAC_MspInit+0xe4>)
 8000d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6e:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_DAC_MspInit+0xe4>)
 8000d72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d76:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_DAC_MspInit+0xe4>)
 8000d7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d7e:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_DAC_MspInit+0xe4>)
 8000d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d86:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_DAC_MspInit+0xe4>)
 8000d8a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d8e:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <HAL_DAC_MspInit+0xe4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8000d96:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <HAL_DAC_MspInit+0xe4>)
 8000d98:	f003 f92a 	bl	8003ff0 <HAL_DMA_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8000da2:	f000 fef7 	bl	8001b94 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_DAC_MspInit+0xe4>)
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_DAC_MspInit+0xe4>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40007400 	.word	0x40007400
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	20000368 	.word	0x20000368
 8000dcc:	400260a0 	.word	0x400260a0

08000dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_DMA_Init+0x38>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <MX_DMA_Init+0x38>)
 8000ddc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_DMA_Init+0x38>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2011      	movs	r0, #17
 8000df4:	f002 fdf7 	bl	80039e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000df8:	2011      	movs	r0, #17
 8000dfa:	f002 fe10 	bl	8003a1e <HAL_NVIC_EnableIRQ>

}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800

08000e0c <filter_init>:
@param		 none
@brief	 	 Enables filter
@retval 	 Filter state
******************************************************************************/
char filter_init(filter_t *ft)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	if(!ft || ft->status)	// filter enabled?
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <filter_init+0x16>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7f1b      	ldrb	r3, [r3, #28]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <filter_init+0x1a>
		// Filter already initialized
		return (char)(-1);
 8000e22:	23ff      	movs	r3, #255	; 0xff
 8000e24:	e037      	b.n	8000e96 <filter_init+0x8a>
	
	ft->x_ant = (float*)malloc(ft->M + 1);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 f94b 	bl	80080c8 <malloc>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	609a      	str	r2, [r3, #8]
	if(!ft->x_ant)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <filter_init+0x3a>
		return (char)(-1);
 8000e42:	23ff      	movs	r3, #255	; 0xff
 8000e44:	e027      	b.n	8000e96 <filter_init+0x8a>

	ft->y_ant = (float*)malloc(ft->N + 1);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f007 f93b 	bl	80080c8 <malloc>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60da      	str	r2, [r3, #12]
	if(!ft->y_ant)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <filter_init+0x5a>
		return (char)(-1);
 8000e62:	23ff      	movs	r3, #255	; 0xff
 8000e64:	e017      	b.n	8000e96 <filter_init+0x8a>

	memset(ft->x_ant, 0, (ft->M + 1)*sizeof(ft->x_ant[0])); 	// clear the x_ant buff
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6898      	ldr	r0, [r3, #8]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	461a      	mov	r2, r3
 8000e74:	2100      	movs	r1, #0
 8000e76:	f007 f937 	bl	80080e8 <memset>
	memset(ft->y_ant, 0, (ft->N + 1)*sizeof(ft->y_ant[0]));	// clear the y_ant buff
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68d8      	ldr	r0, [r3, #12]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	3301      	adds	r3, #1
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	461a      	mov	r2, r3
 8000e88:	2100      	movs	r1, #0
 8000e8a:	f007 f92d 	bl	80080e8 <memset>
	ft->status = 1; // enabled
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	771a      	strb	r2, [r3, #28]
	// Exit success
	return 0; 
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <filter_kill>:
@brief	 	 Disables filter
@retval 	 Filter state
******************************************************************************/

char filter_kill(filter_t *ft)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
	if(!ft || ft->status == 0) // filter disabled?
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <filter_kill+0x16>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7f1b      	ldrb	r3, [r3, #28]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <filter_kill+0x1a>
		// Filter already disabled
		return (char)(-1);
 8000eb4:	23ff      	movs	r3, #255	; 0xff
 8000eb6:	e01f      	b.n	8000ef8 <filter_kill+0x5a>

	ft->status = 0; // disabled
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	771a      	strb	r2, [r3, #28]

	free(ft->x_ant);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f007 f908 	bl	80080d8 <free>
	ft->x_ant = NULL;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]

	free(ft->y_ant);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f007 f900 	bl	80080d8 <free>
	ft->y_ant = NULL;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]

	ft->M = 0;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
	ft->N = 0;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
	ft->x_coefs = NULL;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
	ft->y_coefs = NULL;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]

	// Exit success
	return 0;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <filter_calc>:
#define __CASE_A__

#ifdef __CASE_A__

float filter_calc(filter_t *ft, uint32_t x)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	if(!ft || ft->status == 0)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <filter_calc+0x18>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7f1b      	ldrb	r3, [r3, #28]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <filter_calc+0x1c>
		// Filter is disabled. Return error
		return -1;
 8000f18:	4b58      	ldr	r3, [pc, #352]	; (800107c <filter_calc+0x17c>)
 8000f1a:	e0a6      	b.n	800106a <filter_calc+0x16a>
	
	float y = 0;
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
	int i = ft->M;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	60bb      	str	r3, [r7, #8]

	while(i != 0)
 8000f28:	e027      	b.n	8000f7a <filter_calc+0x7a>
	{
		// Update x_ant values
		ft->x_ant[i] = ft->x_ant[i-1];
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	68b9      	ldr	r1, [r7, #8]
 8000f30:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000f34:	440b      	add	r3, r1
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	441a      	add	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6899      	ldr	r1, [r3, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	6812      	ldr	r2, [r2, #0]
 8000f46:	601a      	str	r2, [r3, #0]
		// Add to y only the x_ant values
		y += ft->x_coefs[i] * ft->x_ant[i];
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695a      	ldr	r2, [r3, #20]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	ed93 7a00 	vldr	s14, [r3]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	edd3 7a00 	vldr	s15, [r3]
 8000f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f68:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f70:	edc7 7a03 	vstr	s15, [r7, #12]
		i--;
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	60bb      	str	r3, [r7, #8]
	while(i != 0)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1d4      	bne.n	8000f2a <filter_calc+0x2a>
	}
	// Update last received X value
	ft->x_ant[0] = x;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	ee07 2a90 	vmov	s15, r2
 8000f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f8e:	edc3 7a00 	vstr	s15, [r3]
	// Add it to y	
	y += ft->x_coefs[i] * ft->x_ant[i];
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	695a      	ldr	r2, [r3, #20]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	ed93 7a00 	vldr	s14, [r3]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fba:	edc7 7a03 	vstr	s15, [r7, #12]
	
	i = ft->N;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	60bb      	str	r3, [r7, #8]
	while (i != 0)
 8000fc4:	e027      	b.n	8001016 <filter_calc+0x116>
	{
		// Update y_ant values
		ft->y_ant[i] = ft->y_ant[i-1];
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	68b9      	ldr	r1, [r7, #8]
 8000fcc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000fd0:	440b      	add	r3, r1
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	441a      	add	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68d9      	ldr	r1, [r3, #12]
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	601a      	str	r2, [r3, #0]
		// Add to y only the y_ant values
		y += ft->y_coefs[i] * ft->y_ant[i];
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	ed93 7a00 	vldr	s14, [r3]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	edd3 7a00 	vldr	s15, [r3]
 8001000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001004:	ed97 7a03 	vldr	s14, [r7, #12]
 8001008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100c:	edc7 7a03 	vstr	s15, [r7, #12]
		i--;
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	3b01      	subs	r3, #1
 8001014:	60bb      	str	r3, [r7, #8]
	while (i != 0)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1d4      	bne.n	8000fc6 <filter_calc+0xc6>
	}
	// Update last Y value = x
	ft->y_ant[0] = y;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	601a      	str	r2, [r3, #0]
	// Add it to y
	y += ft->y_coefs[i] * ft->y_ant[i];
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	ed93 7a00 	vldr	s14, [r3]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001044:	ed97 7a03 	vldr	s14, [r7, #12]
 8001048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104c:	edc7 7a03 	vstr	s15, [r7, #12]
	
	// add dc component
	y += ft->dc;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800105c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001064:	edc7 7a03 	vstr	s15, [r7, #12]

	// Return filtered (x) value
	return y;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	ee07 3a90 	vmov	s15, r3
}
 800106e:	eeb0 0a67 	vmov.f32	s0, s15
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	bf800000 	.word	0xbf800000

08001080 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_GPIO_Init+0x44>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <MX_GPIO_Init+0x44>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_GPIO_Init+0x44>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_GPIO_Init+0x44>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <MX_GPIO_Init+0x44>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_GPIO_Init+0x44>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <GPIO_config_pins>:

/* USER CODE BEGIN 2 */

void GPIO_config_pins(uint8_t port, uint32_t pin_setting, uint32_t GPIO_Mode)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	73fb      	strb	r3, [r7, #15]
	GPIO_InitTypeDef GPIO_Struct = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]
	GPIO_Struct.Pin = pin_setting;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	617b      	str	r3, [r7, #20]
	GPIO_Struct.Mode = GPIO_Mode;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	61bb      	str	r3, [r7, #24]
	GPIO_Struct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIO_Ports[port], &GPIO_Struct);
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <GPIO_config_pins+0x48>)
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	f107 0214 	add.w	r2, r7, #20
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f003 fb7f 	bl	8004804 <HAL_GPIO_Init>
}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	0800ad9c 	.word	0x0800ad9c

08001114 <GPIO_check_res_pins>:

char GPIO_check_res_pins(uint16_t port_addr, uint32_t *pin_setting)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	80fb      	strh	r3, [r7, #6]
	if(port_addr == 0)	//Port A
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d129      	bne.n	800117a <GPIO_check_res_pins+0x66>
	{
		if(IS_BIT_SET(*pin_setting, 13) || IS_BIT_SET(*pin_setting, 14))		//PA13, PA14 - DEBUG
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0b5b      	lsrs	r3, r3, #13
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d106      	bne.n	8001142 <GPIO_check_res_pins+0x2e>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0b9b      	lsrs	r3, r3, #14
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00d      	beq.n	800115e <GPIO_check_res_pins+0x4a>
		{
			CLEARBIT(*pin_setting, 13);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	601a      	str	r2, [r3, #0]
			CLEARBIT(*pin_setting, 14);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	601a      	str	r2, [r3, #0]
			return (char)(-1);
 800115a:	23ff      	movs	r3, #255	; 0xff
 800115c:	e02d      	b.n	80011ba <GPIO_check_res_pins+0xa6>
		}
		if(IS_BIT_SET(*pin_setting, 0)) // PA0 - ADC1 IN0
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d007      	beq.n	800117a <GPIO_check_res_pins+0x66>
		{
			CLEARBIT(*pin_setting, 0);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 0201 	bic.w	r2, r3, #1
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	601a      	str	r2, [r3, #0]
			return (char)(-1);
 8001176:	23ff      	movs	r3, #255	; 0xff
 8001178:	e01f      	b.n	80011ba <GPIO_check_res_pins+0xa6>
		}			
	}
	if(port_addr == 3) 	//Port D
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	2b03      	cmp	r3, #3
 800117e:	d11b      	bne.n	80011b8 <GPIO_check_res_pins+0xa4>
	{
		if(IS_BIT_SET(*pin_setting, 8) || IS_BIT_SET(*pin_setting, 9))	//PD8, PD9 - UART
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d106      	bne.n	800119c <GPIO_check_res_pins+0x88>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	0a5b      	lsrs	r3, r3, #9
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00d      	beq.n	80011b8 <GPIO_check_res_pins+0xa4>
		{
			CLEARBIT(*pin_setting, 8);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	601a      	str	r2, [r3, #0]
			CLEARBIT(*pin_setting, 9);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	601a      	str	r2, [r3, #0]
			return (char)(-1);
 80011b4:	23ff      	movs	r3, #255	; 0xff
 80011b6:	e000      	b.n	80011ba <GPIO_check_res_pins+0xa6>
		}
	}
	return 0;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <ver_cb>:
@usage		 VER

@brief	 	 Prints the version and colaborators info 
******************************************************************************/
char ver_cb(uint8_t argc, char** argv)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
	if(argc != 1) // number of arguments invalid?
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d001      	beq.n	80011de <ver_cb+0x16>
		return (char)(-EINVARG);
 80011da:	23fa      	movs	r3, #250	; 0xfa
 80011dc:	e006      	b.n	80011ec <ver_cb+0x24>
	
	// 1.0 Interfacing with STM
	// 1.1 Sampling using ADC
	// 1.2 Digital filters (IIR/FIR)
	UART_puts("Current version: 1.2\n\rUsing STM32F767ZI-NUCLEO.\n\n\r");
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <ver_cb+0x2c>)
 80011e0:	f001 fd54 	bl	8002c8c <UART_puts>
	UART_puts("Developers:\n\r- Diogo Fernandes\n\r- Tomas Abreu\n\r@LPI-II Universidade do Minho, April 2021\n\r");
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <ver_cb+0x30>)
 80011e6:	f001 fd51 	bl	8002c8c <UART_puts>
	return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0800a6f8 	.word	0x0800a6f8
 80011f8:	0800a72c 	.word	0x0800a72c

080011fc <mr_cb>:
@usage		 MR <addr16> <length8>

@brief	 	 Read <length> memory positions, starting on <addr>
******************************************************************************/
char mr_cb(uint8_t argc, char** argv)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
	uint32_t addr;
	uint16_t len;
	
	if(argc != 3) // number of arguments invalid?
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d001      	beq.n	8001212 <mr_cb+0x16>
		return (char)(-EINVARG);
 800120e:	23fa      	movs	r3, #250	; 0xfa
 8001210:	e026      	b.n	8001260 <mr_cb+0x64>
	
	addr = my_atoi(argv[1]);		// converts argument to int 
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	3304      	adds	r3, #4
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fd67 	bl	8002cec <my_atoi>
 800121e:	4603      	mov	r3, r0
 8001220:	60fb      	str	r3, [r7, #12]
	if(!IS_ADDR16(addr))
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001228:	d301      	bcc.n	800122e <mr_cb+0x32>
		return (char)(-EINVARG);
 800122a:	23fa      	movs	r3, #250	; 0xfa
 800122c:	e018      	b.n	8001260 <mr_cb+0x64>
	
	len = my_atoi(argv[2]);			// converts argument to int 
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	3308      	adds	r3, #8
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fd59 	bl	8002cec <my_atoi>
 800123a:	4603      	mov	r3, r0
 800123c:	817b      	strh	r3, [r7, #10]
	if((len == 0) || (!IS_ADDR8(len)))
 800123e:	897b      	ldrh	r3, [r7, #10]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <mr_cb+0x4e>
 8001244:	897b      	ldrh	r3, [r7, #10]
 8001246:	2bff      	cmp	r3, #255	; 0xff
 8001248:	d901      	bls.n	800124e <mr_cb+0x52>
		return (char)(-EINVARG);
 800124a:	23fa      	movs	r3, #250	; 0xfa
 800124c:	e008      	b.n	8001260 <mr_cb+0x64>
	
	return memory_read(addr, len);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	b29b      	uxth	r3, r3
 8001252:	897a      	ldrh	r2, [r7, #10]
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fadf 	bl	800181c <memory_read>
 800125e:	4603      	mov	r3, r0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <mw_cb>:
@usage		 MW <addr16> <length8> <byte8>

@brief	 	 Write <byte>, starting on memory address <addr> for <lenght> positions
******************************************************************************/
char mw_cb(uint8_t argc, char** argv)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
	uint32_t addr;
	uint16_t len;
	uint16_t byte;
	
	if(argc != 4) 	// number of arguments invalid?
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b04      	cmp	r3, #4
 8001278:	d001      	beq.n	800127e <mw_cb+0x16>
		return (char)(-EINVARG);
 800127a:	23fa      	movs	r3, #250	; 0xfa
 800127c:	e036      	b.n	80012ec <mw_cb+0x84>
	
	addr = my_atoi(argv[1]);	// converts argument to int 
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3304      	adds	r3, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f001 fd31 	bl	8002cec <my_atoi>
 800128a:	4603      	mov	r3, r0
 800128c:	60fb      	str	r3, [r7, #12]
	if(!IS_ADDR16(addr))
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d301      	bcc.n	800129a <mw_cb+0x32>
		return (char)(-EINVARG);
 8001296:	23fa      	movs	r3, #250	; 0xfa
 8001298:	e028      	b.n	80012ec <mw_cb+0x84>
	
	len = (char) my_atoi(argv[2]);	// converts argument to int 
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	3308      	adds	r3, #8
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fd23 	bl	8002cec <my_atoi>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	817b      	strh	r3, [r7, #10]
	if((len == 0) || (!IS_ADDR8(len)))
 80012ac:	897b      	ldrh	r3, [r7, #10]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <mw_cb+0x50>
 80012b2:	897b      	ldrh	r3, [r7, #10]
 80012b4:	2bff      	cmp	r3, #255	; 0xff
 80012b6:	d901      	bls.n	80012bc <mw_cb+0x54>
		return (char)(-EINVARG);
 80012b8:	23fa      	movs	r3, #250	; 0xfa
 80012ba:	e017      	b.n	80012ec <mw_cb+0x84>
		
	byte = (char) my_atoi(argv[3]);	// converts argument to int 
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	330c      	adds	r3, #12
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 fd12 	bl	8002cec <my_atoi>
 80012c8:	4603      	mov	r3, r0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	813b      	strh	r3, [r7, #8]
	if(!IS_ADDR8(byte))
 80012ce:	893b      	ldrh	r3, [r7, #8]
 80012d0:	2bff      	cmp	r3, #255	; 0xff
 80012d2:	d901      	bls.n	80012d8 <mw_cb+0x70>
		return (char)(-EINVARG);
 80012d4:	23fa      	movs	r3, #250	; 0xfa
 80012d6:	e009      	b.n	80012ec <mw_cb+0x84>

	return memory_write(addr, len, byte);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	897a      	ldrh	r2, [r7, #10]
 80012de:	b2d1      	uxtb	r1, r2
 80012e0:	893a      	ldrh	r2, [r7, #8]
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 faf3 	bl	80018d0 <memory_write>
 80012ea:	4603      	mov	r3, r0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <mi_cb>:
@usage		 MI <port_addr8> <pin_setting8>

@brief	 	 
******************************************************************************/
char mi_cb(uint8_t argc, char** argv)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	; 0x30
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
	uint16_t port_addr;
	uint32_t pin_setting;
	char str[32];	// Output message
	
	if(argc != 3) // number of arguments invalid?
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d001      	beq.n	800130a <mi_cb+0x16>
		return (char)(-EINVARG);
 8001306:	23fa      	movs	r3, #250	; 0xfa
 8001308:	e062      	b.n	80013d0 <mi_cb+0xdc>
	
	port_addr = my_atoi(argv[1]);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3304      	adds	r3, #4
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f001 fceb 	bl	8002cec <my_atoi>
 8001316:	4603      	mov	r3, r0
 8001318:	85bb      	strh	r3, [r7, #44]	; 0x2c
	if(!IS_PORT_ADDR(port_addr))
 800131a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800131c:	2b0a      	cmp	r3, #10
 800131e:	d901      	bls.n	8001324 <mi_cb+0x30>
		return (char)(-EINVARG);
 8001320:	23fa      	movs	r3, #250	; 0xfa
 8001322:	e055      	b.n	80013d0 <mi_cb+0xdc>
	
	pin_setting = my_atoi(argv[2]);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	3308      	adds	r3, #8
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f001 fcde 	bl	8002cec <my_atoi>
 8001330:	4603      	mov	r3, r0
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
	if(!IS_PIN_SETTING(pin_setting))
 8001334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <mi_cb+0x4e>
 800133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001340:	d301      	bcc.n	8001346 <mi_cb+0x52>
		return (char)(-EINVARG);
 8001342:	23fa      	movs	r3, #250	; 0xfa
 8001344:	e044      	b.n	80013d0 <mi_cb+0xdc>
	
	if(GPIO_check_res_pins(port_addr, &pin_setting))
 8001346:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800134a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fee0 	bl	8001114 <GPIO_check_res_pins>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <mi_cb+0x6c>
		UART_puts("Reserved pins cannot be configured.\n\r");
 800135a:	481f      	ldr	r0, [pc, #124]	; (80013d8 <mi_cb+0xe4>)
 800135c:	f001 fc96 	bl	8002c8c <UART_puts>
	
	GPIO_config_pins(port_addr, pin_setting, GPIO_MODE_INPUT);
 8001360:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001362:	b2db      	uxtb	r3, r3
 8001364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001366:	2200      	movs	r2, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fead 	bl	80010c8 <GPIO_config_pins>
	
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 800136e:	2300      	movs	r3, #0
 8001370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001374:	e027      	b.n	80013c6 <mi_cb+0xd2>
	{
		if(((pin_setting & 0x01) == 1) && (GPIO_PIN_MODE(port_addr, i) == GPIO_MODE_INPUT)) // checks if LSB is 1
 8001376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d01a      	beq.n	80013b6 <mi_cb+0xc2>
 8001380:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001382:	4a16      	ldr	r2, [pc, #88]	; (80013dc <mi_cb+0xe8>)
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10c      	bne.n	80013b6 <mi_cb+0xc2>
		{
			sprintf(str, "Pin %2d configured as input.\n\r", i);
 800139c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	490e      	ldr	r1, [pc, #56]	; (80013e0 <mi_cb+0xec>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f006 ff9c 	bl	80082e4 <siprintf>
			UART_puts(str);
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4618      	mov	r0, r3
 80013b2:	f001 fc6b 	bl	8002c8c <UART_puts>
		}
		pin_setting >>= 1;
 80013b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 80013bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013c0:	3301      	adds	r3, #1
 80013c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	d9d3      	bls.n	8001376 <mi_cb+0x82>
	}
	return 0;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	0800a788 	.word	0x0800a788
 80013dc:	0800ad9c 	.word	0x0800ad9c
 80013e0:	0800a7b0 	.word	0x0800a7b0

080013e4 <mo_cb>:
@usage		 MO <port_addr8> <pin_setting8>

@brief	 	 
******************************************************************************/
char mo_cb(uint8_t argc, char** argv)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
	uint16_t port_addr;
	uint32_t pin_setting;
	char str[32];	// Output message
	
	if(argc != 3) // number of arguments invalid?
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d001      	beq.n	80013fa <mo_cb+0x16>
		return (char)(-EINVARG);
 80013f6:	23fa      	movs	r3, #250	; 0xfa
 80013f8:	e062      	b.n	80014c0 <mo_cb+0xdc>
	
	port_addr = my_atoi(argv[1]);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	3304      	adds	r3, #4
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f001 fc73 	bl	8002cec <my_atoi>
 8001406:	4603      	mov	r3, r0
 8001408:	85bb      	strh	r3, [r7, #44]	; 0x2c
	if(!IS_PORT_ADDR(port_addr))
 800140a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800140c:	2b0a      	cmp	r3, #10
 800140e:	d901      	bls.n	8001414 <mo_cb+0x30>
		return (char)(-EINVARG);
 8001410:	23fa      	movs	r3, #250	; 0xfa
 8001412:	e055      	b.n	80014c0 <mo_cb+0xdc>
	
	pin_setting = my_atoi(argv[2]);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	3308      	adds	r3, #8
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f001 fc66 	bl	8002cec <my_atoi>
 8001420:	4603      	mov	r3, r0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
	if(!IS_PIN_SETTING(pin_setting))
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <mo_cb+0x4e>
 800142a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001430:	d301      	bcc.n	8001436 <mo_cb+0x52>
		return (char)(-EINVARG);
 8001432:	23fa      	movs	r3, #250	; 0xfa
 8001434:	e044      	b.n	80014c0 <mo_cb+0xdc>
		
	if(GPIO_check_res_pins(port_addr, &pin_setting))
 8001436:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800143a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe68 	bl	8001114 <GPIO_check_res_pins>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <mo_cb+0x6c>
		UART_puts("Reserved pins cannot be configured.\n\r");
 800144a:	481f      	ldr	r0, [pc, #124]	; (80014c8 <mo_cb+0xe4>)
 800144c:	f001 fc1e 	bl	8002c8c <UART_puts>
	
	GPIO_config_pins(port_addr, pin_setting, GPIO_MODE_OUTPUT_PP);
 8001450:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001452:	b2db      	uxtb	r3, r3
 8001454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001456:	2201      	movs	r2, #1
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fe35 	bl	80010c8 <GPIO_config_pins>
	
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 800145e:	2300      	movs	r3, #0
 8001460:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001464:	e027      	b.n	80014b6 <mo_cb+0xd2>
	{
		if(((pin_setting & 0x01) == 1) && (GPIO_PIN_MODE(port_addr, i) == GPIO_MODE_OUTPUT_PP)) // checks if LSB is 1
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01a      	beq.n	80014a6 <mo_cb+0xc2>
 8001470:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <mo_cb+0xe8>)
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d10c      	bne.n	80014a6 <mo_cb+0xc2>
		{
			sprintf(str, "Pin %2d configured as output.\n\r", i);		
 800148c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	490e      	ldr	r1, [pc, #56]	; (80014d0 <mo_cb+0xec>)
 8001496:	4618      	mov	r0, r3
 8001498:	f006 ff24 	bl	80082e4 <siprintf>
			UART_puts(str);
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 fbf3 	bl	8002c8c <UART_puts>
		}
		pin_setting >>= 1;
 80014a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 80014ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014b0:	3301      	adds	r3, #1
 80014b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80014b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	d9d3      	bls.n	8001466 <mo_cb+0x82>
	}
	return 0;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3730      	adds	r7, #48	; 0x30
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	0800a788 	.word	0x0800a788
 80014cc:	0800ad9c 	.word	0x0800ad9c
 80014d0:	0800a7d0 	.word	0x0800a7d0

080014d4 <rd_cb>:
@usage		 RD <port_addr8> <pin_setting8>

@brief	 	 
******************************************************************************/
char rd_cb(uint8_t argc, char** argv)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b090      	sub	sp, #64	; 0x40
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
	uint16_t port_addr;
	uint32_t pin_setting;
	char str[42];	// Output message
	
	if(argc != 3) // number of arguments invalid?
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d001      	beq.n	80014ea <rd_cb+0x16>
		return (char)(-EINVARG);
 80014e6:	23fa      	movs	r3, #250	; 0xfa
 80014e8:	e07c      	b.n	80015e4 <rd_cb+0x110>
	
	port_addr = my_atoi(argv[1]);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	3304      	adds	r3, #4
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 fbfb 	bl	8002cec <my_atoi>
 80014f6:	4603      	mov	r3, r0
 80014f8:	873b      	strh	r3, [r7, #56]	; 0x38
	if(!IS_PORT_ADDR(port_addr))
 80014fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80014fc:	2b0a      	cmp	r3, #10
 80014fe:	d901      	bls.n	8001504 <rd_cb+0x30>
		return (char)(-EINVARG);
 8001500:	23fa      	movs	r3, #250	; 0xfa
 8001502:	e06f      	b.n	80015e4 <rd_cb+0x110>
	
	pin_setting = my_atoi(argv[2]);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	3308      	adds	r3, #8
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fbee 	bl	8002cec <my_atoi>
 8001510:	4603      	mov	r3, r0
 8001512:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(!IS_PIN_SETTING(pin_setting))
 8001514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <rd_cb+0x4e>
 800151a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001520:	d301      	bcc.n	8001526 <rd_cb+0x52>
		return (char)(-EINVARG);
 8001522:	23fa      	movs	r3, #250	; 0xfa
 8001524:	e05e      	b.n	80015e4 <rd_cb+0x110>
	
	sprintf(str, "GPIO Port %c\n\r", (char)(port_addr + 'A'));
 8001526:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001528:	b2db      	uxtb	r3, r3
 800152a:	3341      	adds	r3, #65	; 0x41
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	492d      	ldr	r1, [pc, #180]	; (80015ec <rd_cb+0x118>)
 8001536:	4618      	mov	r0, r3
 8001538:	f006 fed4 	bl	80082e4 <siprintf>
	UART_puts(str);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4618      	mov	r0, r3
 8001542:	f001 fba3 	bl	8002c8c <UART_puts>
	
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 8001546:	2300      	movs	r3, #0
 8001548:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800154c:	e045      	b.n	80015da <rd_cb+0x106>
	{
		if((pin_setting & 0x01) == 1) // checks if LSB is 1
 800154e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d035      	beq.n	80015c4 <rd_cb+0xf0>
		{
			if(GPIO_PIN_MODE(port_addr, i) == GPIO_MODE_INPUT) // PinMode as input?
 8001558:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800155a:	4a25      	ldr	r2, [pc, #148]	; (80015f0 <rd_cb+0x11c>)
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d119      	bne.n	80015a8 <rd_cb+0xd4>
			{
				uint8_t val;
				val = HAL_GPIO_ReadPin(GPIO_Ports[port_addr], GPIO_Pins[i]);
 8001574:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001576:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <rd_cb+0x11c>)
 8001578:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800157c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001580:	491c      	ldr	r1, [pc, #112]	; (80015f4 <rd_cb+0x120>)
 8001582:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001586:	4619      	mov	r1, r3
 8001588:	4610      	mov	r0, r2
 800158a:	f003 fae7 	bl	8004b5c <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				sprintf(str, "Pin %2d - '%d'\n\r", i, val);
 8001594:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001598:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800159c:	f107 000c 	add.w	r0, r7, #12
 80015a0:	4915      	ldr	r1, [pc, #84]	; (80015f8 <rd_cb+0x124>)
 80015a2:	f006 fe9f 	bl	80082e4 <siprintf>
 80015a6:	e007      	b.n	80015b8 <rd_cb+0xe4>
			}
			else
				sprintf(str, "Pin %2d not configured as input mode.\n\r", i);	// not able to read pin value
 80015a8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	4912      	ldr	r1, [pc, #72]	; (80015fc <rd_cb+0x128>)
 80015b2:	4618      	mov	r0, r3
 80015b4:	f006 fe96 	bl	80082e4 <siprintf>
			
			UART_puts(str);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 fb65 	bl	8002c8c <UART_puts>
 80015c2:	e002      	b.n	80015ca <rd_cb+0xf6>
		}
		else
			UART_puts("0\n\r");
 80015c4:	480e      	ldr	r0, [pc, #56]	; (8001600 <rd_cb+0x12c>)
 80015c6:	f001 fb61 	bl	8002c8c <UART_puts>
		
		pin_setting >>= 1;
 80015ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 80015d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015d4:	3301      	adds	r3, #1
 80015d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80015da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	d9b5      	bls.n	800154e <rd_cb+0x7a>
	}
	return 0;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3740      	adds	r7, #64	; 0x40
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	0800a7f0 	.word	0x0800a7f0
 80015f0:	0800ad9c 	.word	0x0800ad9c
 80015f4:	0800adc8 	.word	0x0800adc8
 80015f8:	0800a800 	.word	0x0800a800
 80015fc:	0800a814 	.word	0x0800a814
 8001600:	0800a83c 	.word	0x0800a83c

08001604 <wd_cb>:
@usage		 WD <port_addr8> <pin_setting8> <pin_values8>

@brief	 	 
******************************************************************************/
char wd_cb(uint8_t argc, char** argv)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b090      	sub	sp, #64	; 0x40
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
	uint16_t port_addr;
	uint32_t pin_setting;
	uint16_t pin_values;
	char str[42];	// Output message
	
	if(argc != 4) // number of arguments invalid?
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2b04      	cmp	r3, #4
 8001614:	d001      	beq.n	800161a <wd_cb+0x16>
		return (char)(-EINVARG);
 8001616:	23fa      	movs	r3, #250	; 0xfa
 8001618:	e08c      	b.n	8001734 <wd_cb+0x130>
	
	port_addr = my_atoi(argv[1]);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	3304      	adds	r3, #4
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f001 fb63 	bl	8002cec <my_atoi>
 8001626:	4603      	mov	r3, r0
 8001628:	86fb      	strh	r3, [r7, #54]	; 0x36
	if(!IS_PORT_ADDR(port_addr))
 800162a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800162c:	2b0a      	cmp	r3, #10
 800162e:	d901      	bls.n	8001634 <wd_cb+0x30>
		return (char)(-EINVARG);
 8001630:	23fa      	movs	r3, #250	; 0xfa
 8001632:	e07f      	b.n	8001734 <wd_cb+0x130>
	
	pin_setting = my_atoi(argv[2]);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3308      	adds	r3, #8
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fb56 	bl	8002cec <my_atoi>
 8001640:	4603      	mov	r3, r0
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(!IS_PIN_SETTING(pin_setting))
 8001644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <wd_cb+0x4e>
 800164a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001650:	d301      	bcc.n	8001656 <wd_cb+0x52>
		return (char)(-EINVARG);
 8001652:	23fa      	movs	r3, #250	; 0xfa
 8001654:	e06e      	b.n	8001734 <wd_cb+0x130>
	
	pin_values = my_atoi(argv[3]);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	330c      	adds	r3, #12
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f001 fb45 	bl	8002cec <my_atoi>
 8001662:	4603      	mov	r3, r0
 8001664:	877b      	strh	r3, [r7, #58]	; 0x3a
	if(!IS_ADDR8(pin_values))
 8001666:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001668:	2bff      	cmp	r3, #255	; 0xff
 800166a:	d901      	bls.n	8001670 <wd_cb+0x6c>
		return (char)(-EINVARG);
 800166c:	23fa      	movs	r3, #250	; 0xfa
 800166e:	e061      	b.n	8001734 <wd_cb+0x130>

	sprintf(str, "GPIO Port %c\n\r", (char)(port_addr + 'A'));
 8001670:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001672:	b2db      	uxtb	r3, r3
 8001674:	3341      	adds	r3, #65	; 0x41
 8001676:	b2db      	uxtb	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	492f      	ldr	r1, [pc, #188]	; (800173c <wd_cb+0x138>)
 8001680:	4618      	mov	r0, r3
 8001682:	f006 fe2f 	bl	80082e4 <siprintf>
	UART_puts(str);
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	4618      	mov	r0, r3
 800168c:	f001 fafe 	bl	8002c8c <UART_puts>
	
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001696:	e048      	b.n	800172a <wd_cb+0x126>
	{
		if((pin_setting & 0x01) == 1) // checks if LSB is 1
 8001698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d038      	beq.n	8001714 <wd_cb+0x110>
		{
			if(GPIO_PIN_MODE(port_addr, i) == GPIO_MODE_OUTPUT_PP) // PinMode as output push-pull?
 80016a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016a4:	4a26      	ldr	r2, [pc, #152]	; (8001740 <wd_cb+0x13c>)
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	fa22 f303 	lsr.w	r3, r2, r3
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d11d      	bne.n	80016fa <wd_cb+0xf6>
			{
				uint8_t pin_val = (pin_values & 0x01);
 80016be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				HAL_GPIO_WritePin(GPIO_Ports[port_addr], GPIO_Pins[i], (GPIO_PinState)pin_val);
 80016ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016cc:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <wd_cb+0x13c>)
 80016ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80016d6:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <wd_cb+0x140>)
 80016d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016dc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80016e0:	4619      	mov	r1, r3
 80016e2:	f003 fa53 	bl	8004b8c <HAL_GPIO_WritePin>
				sprintf(str, "Pin %2d - '%d'\n\r", i, pin_val);
 80016e6:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80016ea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80016ee:	f107 0008 	add.w	r0, r7, #8
 80016f2:	4915      	ldr	r1, [pc, #84]	; (8001748 <wd_cb+0x144>)
 80016f4:	f006 fdf6 	bl	80082e4 <siprintf>
 80016f8:	e007      	b.n	800170a <wd_cb+0x106>
			}
			else
				sprintf(str, "Pin %2d not configured as output mode.\n\r", i);	// not able to read pin value
 80016fa:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4912      	ldr	r1, [pc, #72]	; (800174c <wd_cb+0x148>)
 8001704:	4618      	mov	r0, r3
 8001706:	f006 fded 	bl	80082e4 <siprintf>
			
			UART_puts(str);
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4618      	mov	r0, r3
 8001710:	f001 fabc 	bl	8002c8c <UART_puts>
		}
		pin_setting >>= 1;
 8001714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	63fb      	str	r3, [r7, #60]	; 0x3c
		pin_values >>= 1;
 800171a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800171c:	085b      	lsrs	r3, r3, #1
 800171e:	877b      	strh	r3, [r7, #58]	; 0x3a
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 8001720:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001724:	3301      	adds	r3, #1
 8001726:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800172a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800172e:	2b0f      	cmp	r3, #15
 8001730:	d9b2      	bls.n	8001698 <wd_cb+0x94>
	}
	
	return 0;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3740      	adds	r7, #64	; 0x40
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	0800a7f0 	.word	0x0800a7f0
 8001740:	0800ad9c 	.word	0x0800ad9c
 8001744:	0800adc8 	.word	0x0800adc8
 8001748:	0800a800 	.word	0x0800a800
 800174c:	0800a840 	.word	0x0800a840

08001750 <ra_cb>:
@usage		 RA <addr2>

@brief	 	 
******************************************************************************/
char ra_cb(uint8_t argc, char** argv)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b090      	sub	sp, #64	; 0x40
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
	uint8_t addr;
	uint32_t adcValue;
	uint32_t volt;
	char str[40];	// Output message
	
	if(argc != 2) // number of arguments invalid?
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d001      	beq.n	8001766 <ra_cb+0x16>
		return (char)(-EINVARG);
 8001762:	23fa      	movs	r3, #250	; 0xfa
 8001764:	e046      	b.n	80017f4 <ra_cb+0xa4>
	
	addr = my_atoi(argv[1]);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3304      	adds	r3, #4
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f001 fabd 	bl	8002cec <my_atoi>
 8001772:	4603      	mov	r3, r0
 8001774:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(!IS_ADDR4(addr))
 8001778:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d901      	bls.n	8001784 <ra_cb+0x34>
		return (char)(-EINVARG);
 8001780:	23fa      	movs	r3, #250	; 0xfa
 8001782:	e037      	b.n	80017f4 <ra_cb+0xa4>

	if(ADC_Config_Channel(&hadc1, addr)) // PinMode as output push-pull?
 8001784:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001788:	4619      	mov	r1, r3
 800178a:	4821      	ldr	r0, [pc, #132]	; (8001810 <ra_cb+0xc0>)
 800178c:	f7fe ffee 	bl	800076c <ADC_Config_Channel>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d004      	beq.n	80017a0 <ra_cb+0x50>
	{
		UART_puts("Pin not configured as input mode.\n\r");	// not able to read pin value
 8001796:	481f      	ldr	r0, [pc, #124]	; (8001814 <ra_cb+0xc4>)
 8001798:	f001 fa78 	bl	8002c8c <UART_puts>
		return (char)(-EPERM);
 800179c:	23f9      	movs	r3, #249	; 0xf9
 800179e:	e029      	b.n	80017f4 <ra_cb+0xa4>
	}
	
	adcValue = ADC_Polling_Conv(&hadc1);
 80017a0:	481b      	ldr	r0, [pc, #108]	; (8001810 <ra_cb+0xc0>)
 80017a2:	f7ff f873 	bl	800088c <ADC_Polling_Conv>
 80017a6:	63b8      	str	r0, [r7, #56]	; 0x38
	volt = ((double)adcValue * 3300 / 4095);
 80017a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80017b2:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001800 <ra_cb+0xb0>
 80017b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017ba:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8001808 <ra_cb+0xb8>
 80017be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80017c6:	ee17 3a90 	vmov	r3, s15
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(str, "ADC Channel %2d value: %ld mV.\n\r", addr, volt);
 80017cc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80017d0:	f107 000c 	add.w	r0, r7, #12
 80017d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d6:	4910      	ldr	r1, [pc, #64]	; (8001818 <ra_cb+0xc8>)
 80017d8:	f006 fd84 	bl	80082e4 <siprintf>
	UART_puts(str);
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	4618      	mov	r0, r3
 80017e2:	f001 fa53 	bl	8002c8c <UART_puts>
	
	ADC_DeConfig_Channel(&hadc1, addr); // Restores initial pin mode
 80017e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017ea:	4619      	mov	r1, r3
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <ra_cb+0xc0>)
 80017ee:	f7ff f82f 	bl	8000850 <ADC_DeConfig_Channel>
	
	return 0;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3740      	adds	r7, #64	; 0x40
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	f3af 8000 	nop.w
 8001800:	00000000 	.word	0x00000000
 8001804:	40a9c800 	.word	0x40a9c800
 8001808:	00000000 	.word	0x00000000
 800180c:	40affe00 	.word	0x40affe00
 8001810:	2000027c 	.word	0x2000027c
 8001814:	0800a86c 	.word	0x0800a86c
 8001818:	0800a890 	.word	0x0800a890

0800181c <memory_read>:
@param  	 Number of addresses to be read

@brief	 	 Read <length> memory positions, starting on <addr>
******************************************************************************/
static char memory_read(uint16_t addr, uint8_t len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b092      	sub	sp, #72	; 0x48
 8001820:	af02      	add	r7, sp, #8
 8001822:	4603      	mov	r3, r0
 8001824:	460a      	mov	r2, r1
 8001826:	80fb      	strh	r3, [r7, #6]
 8001828:	4613      	mov	r3, r2
 800182a:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t* memory_ptr = (SRAM_BASE + addr); // Start reading memory from SRAM_BASE. addr is used as offset
 800182c:	88fa      	ldrh	r2, [r7, #6]
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <memory_read+0xa4>)
 8001830:	4413      	add	r3, r2
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
	char str[42];	// Output message
	
	if((memory_ptr + (len - 1)) > SRAM_TOP) // Check if memory_ptr won't go over memory top
 8001834:	797b      	ldrb	r3, [r7, #5]
 8001836:	3b01      	subs	r3, #1
 8001838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800183a:	4413      	add	r3, r2
 800183c:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <memory_read+0xa8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <memory_read+0x2a>
		return (char)(-EINVARG);
 8001842:	23fa      	movs	r3, #250	; 0xfa
 8001844:	e037      	b.n	80018b6 <memory_read+0x9a>

	for (i = 0; i < len; i++, addr++, memory_ptr++)
 8001846:	2300      	movs	r3, #0
 8001848:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800184c:	e02d      	b.n	80018aa <memory_read+0x8e>
	{
		if(!IS_PRINTABLE(*memory_ptr)) // checks if (*memory_ptr) is a printable character
 800184e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b1f      	cmp	r3, #31
 8001854:	d903      	bls.n	800185e <memory_read+0x42>
 8001856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b7e      	cmp	r3, #126	; 0x7e
 800185c:	d908      	bls.n	8001870 <memory_read+0x54>
			sprintf(str, "Memory [0x%04X]:     (0x%02X)\n\r", addr, (*memory_ptr));
 800185e:	88fa      	ldrh	r2, [r7, #6]
 8001860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	f107 000c 	add.w	r0, r7, #12
 8001868:	4917      	ldr	r1, [pc, #92]	; (80018c8 <memory_read+0xac>)
 800186a:	f006 fd3b 	bl	80082e4 <siprintf>
 800186e:	e00c      	b.n	800188a <memory_read+0x6e>
		else // Character is printable
			sprintf(str, "Memory [0x%04X]: '%c' (0x%02X)\n\r", addr, (*memory_ptr), (*memory_ptr));
 8001870:	88fa      	ldrh	r2, [r7, #6]
 8001872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	4619      	mov	r1, r3
 8001878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	f107 000c 	add.w	r0, r7, #12
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	460b      	mov	r3, r1
 8001884:	4911      	ldr	r1, [pc, #68]	; (80018cc <memory_read+0xb0>)
 8001886:	f006 fd2d 	bl	80082e4 <siprintf>
		
		UART_puts(str); // Print string
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4618      	mov	r0, r3
 8001890:	f001 f9fc 	bl	8002c8c <UART_puts>
	for (i = 0; i < len; i++, addr++, memory_ptr++)
 8001894:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001898:	3301      	adds	r3, #1
 800189a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	3301      	adds	r3, #1
 80018a2:	80fb      	strh	r3, [r7, #6]
 80018a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018a6:	3301      	adds	r3, #1
 80018a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80018aa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80018ae:	797b      	ldrb	r3, [r7, #5]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3cc      	bcc.n	800184e <memory_read+0x32>
	}
	
	return 0;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3740      	adds	r7, #64	; 0x40
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20060000 	.word	0x20060000
 80018c4:	2006ffff 	.word	0x2006ffff
 80018c8:	0800a8b4 	.word	0x0800a8b4
 80018cc:	0800a8d4 	.word	0x0800a8d4

080018d0 <memory_write>:
@param  	 Byte to be written 

@brief	 	 Write <byte>, starting on memory address <addr> for <lenght> positions
******************************************************************************/
static char memory_write(uint16_t addr, uint8_t len, char byte)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b090      	sub	sp, #64	; 0x40
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	80fb      	strh	r3, [r7, #6]
 80018da:	460b      	mov	r3, r1
 80018dc:	717b      	strb	r3, [r7, #5]
 80018de:	4613      	mov	r3, r2
 80018e0:	713b      	strb	r3, [r7, #4]
	uint8_t i;
	uint8_t* memory_ptr = (SRAM_BASE + addr); // Start reading memory from SRAM_BASE. addr is used as offset
 80018e2:	88fa      	ldrh	r2, [r7, #6]
 80018e4:	4b26      	ldr	r3, [pc, #152]	; (8001980 <memory_write+0xb0>)
 80018e6:	4413      	add	r3, r2
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
	char str[42];	// Output message
	
	if((memory_ptr + (len - 1)) > SRAM_TOP) // Check if memory_ptr won't go over memory top
 80018ea:	797b      	ldrb	r3, [r7, #5]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018f0:	4413      	add	r3, r2
 80018f2:	4a24      	ldr	r2, [pc, #144]	; (8001984 <memory_write+0xb4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <memory_write+0x2c>
		return (char)(-EINVARG);
 80018f8:	23fa      	movs	r3, #250	; 0xfa
 80018fa:	e03d      	b.n	8001978 <memory_write+0xa8>

	if(!IS_PRINTABLE(byte)) // checks if (byte) is a printable character
 80018fc:	793b      	ldrb	r3, [r7, #4]
 80018fe:	2b1f      	cmp	r3, #31
 8001900:	d902      	bls.n	8001908 <memory_write+0x38>
 8001902:	793b      	ldrb	r3, [r7, #4]
 8001904:	2b7e      	cmp	r3, #126	; 0x7e
 8001906:	d907      	bls.n	8001918 <memory_write+0x48>
		sprintf(str, "Byte 0x%02X:\n\r", byte);
 8001908:	793a      	ldrb	r2, [r7, #4]
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	491e      	ldr	r1, [pc, #120]	; (8001988 <memory_write+0xb8>)
 8001910:	4618      	mov	r0, r3
 8001912:	f006 fce7 	bl	80082e4 <siprintf>
 8001916:	e006      	b.n	8001926 <memory_write+0x56>
	else // Character is printable
		sprintf(str, "Byte '%c' [0x%02X]:\n\r", byte, byte);
 8001918:	793a      	ldrb	r2, [r7, #4]
 800191a:	793b      	ldrb	r3, [r7, #4]
 800191c:	f107 000c 	add.w	r0, r7, #12
 8001920:	491a      	ldr	r1, [pc, #104]	; (800198c <memory_write+0xbc>)
 8001922:	f006 fcdf 	bl	80082e4 <siprintf>
	
	UART_puts(str);
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	4618      	mov	r0, r3
 800192c:	f001 f9ae 	bl	8002c8c <UART_puts>
	for (i = 0; i < len; i++, addr++, memory_ptr++)
 8001930:	2300      	movs	r3, #0
 8001932:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001936:	e019      	b.n	800196c <memory_write+0x9c>
	{
		(*memory_ptr) = byte;	// write memory pointed by memory_ptr
 8001938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800193a:	793a      	ldrb	r2, [r7, #4]
 800193c:	701a      	strb	r2, [r3, #0]
		sprintf(str, "\tMemory [0x%04X] successfuly written.\n\r", addr); // format the string we want to send
 800193e:	88fa      	ldrh	r2, [r7, #6]
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	4912      	ldr	r1, [pc, #72]	; (8001990 <memory_write+0xc0>)
 8001946:	4618      	mov	r0, r3
 8001948:	f006 fccc 	bl	80082e4 <siprintf>
		UART_puts(str); // Print string
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	4618      	mov	r0, r3
 8001952:	f001 f99b 	bl	8002c8c <UART_puts>
	for (i = 0; i < len; i++, addr++, memory_ptr++)
 8001956:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800195a:	3301      	adds	r3, #1
 800195c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	3301      	adds	r3, #1
 8001964:	80fb      	strh	r3, [r7, #6]
 8001966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001968:	3301      	adds	r3, #1
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
 800196c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001970:	797b      	ldrb	r3, [r7, #5]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3e0      	bcc.n	8001938 <memory_write+0x68>
	}
	
	return 0;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3740      	adds	r7, #64	; 0x40
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20060000 	.word	0x20060000
 8001984:	2006ffff 	.word	0x2006ffff
 8001988:	0800a8f8 	.word	0x0800a8f8
 800198c:	0800a908 	.word	0x0800a908
 8001990:	0800a920 	.word	0x0800a920

08001994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800199a:	f001 fa06 	bl	8002daa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199e:	f000 f869 	bl	8001a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a2:	f7ff fb6d 	bl	8001080 <MX_GPIO_Init>
  MX_DMA_Init();
 80019a6:	f7ff fa13 	bl	8000dd0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80019aa:	f000 ffb5 	bl	8002918 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80019ae:	f7fe fe2b 	bl	8000608 <MX_ADC1_Init>
  MX_DAC_Init();
 80019b2:	f7ff f961 	bl	8000c78 <MX_DAC_Init>
  MX_TIM2_Init();
 80019b6:	f000 fe87 	bl	80026c8 <MX_TIM2_Init>
  MX_TIM6_Init();
 80019ba:	f000 fed3 	bl	8002764 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // print startup message
  ver_cb(1, NULL);
 80019be:	2100      	movs	r1, #0
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff fc01 	bl	80011c8 <ver_cb>
  UART_puts("\n\rType '?' for list of available commands\n\r");
 80019c6:	4821      	ldr	r0, [pc, #132]	; (8001a4c <main+0xb8>)
 80019c8:	f001 f960 	bl	8002c8c <UART_puts>
  UART_puts("Type '? <cmd>' for more info on a given command\n\r");
 80019cc:	4820      	ldr	r0, [pc, #128]	; (8001a50 <main+0xbc>)
 80019ce:	f001 f95d 	bl	8002c8c <UART_puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	{
		exec_cmd("MO 1 1");
 80019d2:	4820      	ldr	r0, [pc, #128]	; (8001a54 <main+0xc0>)
 80019d4:	f7ff f852 	bl	8000a7c <exec_cmd>
		exec_cmd("WG sin 32");
 80019d8:	481f      	ldr	r0, [pc, #124]	; (8001a58 <main+0xc4>)
 80019da:	f7ff f84f 	bl	8000a7c <exec_cmd>
		exec_cmd("SP ms 1");
 80019de:	481f      	ldr	r0, [pc, #124]	; (8001a5c <main+0xc8>)
 80019e0:	f7ff f84c 	bl	8000a7c <exec_cmd>
		exec_cmd("S");
 80019e4:	481e      	ldr	r0, [pc, #120]	; (8001a60 <main+0xcc>)
 80019e6:	f7ff f849 	bl	8000a7c <exec_cmd>
	}

	UART_putchar('>'); // print prompt
 80019ea:	203e      	movs	r0, #62	; 0x3e
 80019ec:	f001 f934 	bl	8002c58 <UART_putchar>
	Rx_UART_init(); // set USART3 interrupt
 80019f0:	f001 f90e 	bl	8002c10 <Rx_UART_init>

	while (1)
  {
		if(Rx_flag)
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <main+0xd0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00d      	beq.n	8001a1a <main+0x86>
		{
			c = UART_Receive(); // Returns received char
 80019fe:	f001 f807 	bl	8002a10 <UART_Receive>
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
			if(c != (char)(-1))
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	2bff      	cmp	r3, #255	; 0xff
 8001a0a:	d003      	beq.n	8001a14 <main+0x80>
				// Its not a special character
				UART_putchar(c); // Received char is echoed
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 f922 	bl	8002c58 <UART_putchar>

			Rx_flag = 0;
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <main+0xd0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
		}
		
		if(cmd_received)
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <main+0xd4>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0e7      	beq.n	80019f4 <main+0x60>
		{
			if(exec_cmd(Rx_Buffer) == 0)// Is there an error?
 8001a24:	4811      	ldr	r0, [pc, #68]	; (8001a6c <main+0xd8>)
 8001a26:	f7ff f829 	bl	8000a7c <exec_cmd>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d103      	bne.n	8001a38 <main+0xa4>
				// No error. Command is valid
				strcpy(last_valid_cmd, Rx_Buffer); // Save this as last valid command
 8001a30:	490e      	ldr	r1, [pc, #56]	; (8001a6c <main+0xd8>)
 8001a32:	480f      	ldr	r0, [pc, #60]	; (8001a70 <main+0xdc>)
 8001a34:	f006 fc76 	bl	8008324 <strcpy>
			
			UART_putchar('>');// print prompt
 8001a38:	203e      	movs	r0, #62	; 0x3e
 8001a3a:	f001 f90d 	bl	8002c58 <UART_putchar>
			cmd_received = 0;
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <main+0xd4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
			Rx_UART_init(); // ready to begin reception
 8001a44:	f001 f8e4 	bl	8002c10 <Rx_UART_init>
		if(Rx_flag)
 8001a48:	e7d4      	b.n	80019f4 <main+0x60>
 8001a4a:	bf00      	nop
 8001a4c:	0800a948 	.word	0x0800a948
 8001a50:	0800a974 	.word	0x0800a974
 8001a54:	0800a9a8 	.word	0x0800a9a8
 8001a58:	0800a9b0 	.word	0x0800a9b0
 8001a5c:	0800a9bc 	.word	0x0800a9bc
 8001a60:	0800a9c4 	.word	0x0800a9c4
 8001a64:	2000026d 	.word	0x2000026d
 8001a68:	2000026e 	.word	0x2000026e
 8001a6c:	200005e8 	.word	0x200005e8
 8001a70:	200000a4 	.word	0x200000a4

08001a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b0b8      	sub	sp, #224	; 0xe0
 8001a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a7e:	2234      	movs	r2, #52	; 0x34
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f006 fb30 	bl	80080e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a88:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	2290      	movs	r2, #144	; 0x90
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f006 fb21 	bl	80080e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b39      	ldr	r3, [pc, #228]	; (8001b8c <SystemClock_Config+0x118>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a38      	ldr	r2, [pc, #224]	; (8001b8c <SystemClock_Config+0x118>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <SystemClock_Config+0x118>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001abe:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <SystemClock_Config+0x11c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a33      	ldr	r2, [pc, #204]	; (8001b90 <SystemClock_Config+0x11c>)
 8001ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <SystemClock_Config+0x11c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001adc:	2301      	movs	r3, #1
 8001ade:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae2:	2310      	movs	r3, #16
 8001ae4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001af4:	2308      	movs	r3, #8
 8001af6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001afa:	23d8      	movs	r3, #216	; 0xd8
 8001afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b06:	2302      	movs	r3, #2
 8001b08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 f8bf 	bl	8004c94 <HAL_RCC_OscConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001b1c:	f000 f83a 	bl	8001b94 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b20:	f003 f868 	bl	8004bf4 <HAL_PWREx_EnableOverDrive>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001b2a:	f000 f833 	bl	8001b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b2e:	230f      	movs	r3, #15
 8001b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b34:	2302      	movs	r3, #2
 8001b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001b50:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b54:	2107      	movs	r1, #7
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fb4a 	bl	80051f0 <HAL_RCC_ClockConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001b62:	f000 f817 	bl	8001b94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b6a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b70:	f107 0308 	add.w	r3, r7, #8
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fd3b 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001b80:	f000 f808 	bl	8001b94 <Error_Handler>
  }
}
 8001b84:	bf00      	nop
 8001b86:	37e0      	adds	r7, #224	; 0xe0
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40007000 	.word	0x40007000

08001b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b98:	b672      	cpsid	i
}
 8001b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <Error_Handler+0x8>
	...

08001ba0 <parse_cmd>:

/*
	Analyses the command sent in str_in and execute its callback
*/
char parse_cmd(const Command_t cmd_list[], const char *str_in)
{		
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
	char **argv = NULL; // List of arguments
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
	char *arg; // aux variable. Holds latest found argument
	char *s; // copy of received command. Necessary to use strtok
	
	uint8_t len;
	uint8_t argc = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	75fb      	strb	r3, [r7, #23]
	char retval = (char)(-ECMDNF);
 8001bb2:	23fb      	movs	r3, #251	; 0xfb
 8001bb4:	75bb      	strb	r3, [r7, #22]
	
	if ((str_in == NULL) || (strlen(str_in) == 0)) // empty command
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <parse_cmd+0x24>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <parse_cmd+0x28>
		return (char)(-ENOCMD);
 8001bc4:	23fe      	movs	r3, #254	; 0xfe
 8001bc6:	e06f      	b.n	8001ca8 <parse_cmd+0x108>
	//if (cmd_list == NULL) // no list
		//return (-ENOLIST);   

	len = strlen(str_in) + 1;
 8001bc8:	6838      	ldr	r0, [r7, #0]
 8001bca:	f7fe fb43 	bl	8000254 <strlen>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
	s = malloc(len);                 // just in case str_in is const
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f006 fa75 	bl	80080c8 <malloc>
 8001bde:	4603      	mov	r3, r0
 8001be0:	60bb      	str	r3, [r7, #8]
	
	if(s == NULL)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <parse_cmd+0x4c>
		return (char)(-ENOMEM);
 8001be8:	23fc      	movs	r3, #252	; 0xfc
 8001bea:	e05d      	b.n	8001ca8 <parse_cmd+0x108>
	
	strcpy(s, str_in);
 8001bec:	6839      	ldr	r1, [r7, #0]
 8001bee:	68b8      	ldr	r0, [r7, #8]
 8001bf0:	f006 fb98 	bl	8008324 <strcpy>
	arg = strtok(s, DELIMETER);
 8001bf4:	492e      	ldr	r1, [pc, #184]	; (8001cb0 <parse_cmd+0x110>)
 8001bf6:	68b8      	ldr	r0, [r7, #8]
 8001bf8:	f006 fb9c 	bl	8008334 <strtok>
 8001bfc:	61b8      	str	r0, [r7, #24]
	while (arg)
 8001bfe:	e025      	b.n	8001c4c <parse_cmd+0xac>
	{
		argc++;
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	3301      	adds	r3, #1
 8001c04:	75fb      	strb	r3, [r7, #23]
		len = sizeof (argv);
 8001c06:	2304      	movs	r3, #4
 8001c08:	73fb      	strb	r3, [r7, #15]
		if(argc == 1)
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <parse_cmd+0x7e>
				argv = malloc(len);
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f006 fa58 	bl	80080c8 <malloc>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	e008      	b.n	8001c30 <parse_cmd+0x90>
		else
				argv = realloc(argv, argc * len);
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	69f8      	ldr	r0, [r7, #28]
 8001c2a:	f006 fb0f 	bl	800824c <realloc>
 8001c2e:	61f8      	str	r0, [r7, #28]

		argv[argc-1] = arg;
 8001c30:	7dfa      	ldrb	r2, [r7, #23]
 8001c32:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	601a      	str	r2, [r3, #0]
		arg = strtok(NULL, DELIMETER);
 8001c42:	491b      	ldr	r1, [pc, #108]	; (8001cb0 <parse_cmd+0x110>)
 8001c44:	2000      	movs	r0, #0
 8001c46:	f006 fb75 	bl	8008334 <strtok>
 8001c4a:	61b8      	str	r0, [r7, #24]
	while (arg)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1d6      	bne.n	8001c00 <parse_cmd+0x60>
	}

	if (argc)
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01d      	beq.n	8001c94 <parse_cmd+0xf4>
	{
		const Command_t *p;

		for(p = cmd_list; p->cmd; p++)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	e016      	b.n	8001c8c <parse_cmd+0xec>
		{
			if(strcmp(p->cmd, argv[0]) == 0)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4610      	mov	r0, r2
 8001c6a:	f7fe fae9 	bl	8000240 <strcmp>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d108      	bne.n	8001c86 <parse_cmd+0xe6>
			{
				retval = (p->fn(argc, argv)); // Execute func
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	7dfa      	ldrb	r2, [r7, #23]
 8001c7a:	69f9      	ldr	r1, [r7, #28]
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4798      	blx	r3
 8001c80:	4603      	mov	r3, r0
 8001c82:	75bb      	strb	r3, [r7, #22]
				break;
 8001c84:	e006      	b.n	8001c94 <parse_cmd+0xf4>
		for(p = cmd_list; p->cmd; p++)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	3310      	adds	r3, #16
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e4      	bne.n	8001c5e <parse_cmd+0xbe>
			}
		}
	}

	// command not found
	if(argv)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <parse_cmd+0x100>
		free(argv);
 8001c9a:	69f8      	ldr	r0, [r7, #28]
 8001c9c:	f006 fa1c 	bl	80080d8 <free>

	free(s);
 8001ca0:	68b8      	ldr	r0, [r7, #8]
 8001ca2:	f006 fa19 	bl	80080d8 <free>

	return retval;
 8001ca6:	7dbb      	ldrb	r3, [r7, #22]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	0800a9c8 	.word	0x0800a9c8

08001cb4 <sp_cb>:
	// (Period-1) = 1800
	{60000, 1800}
};

char sp_cb(uint8_t argc, char** argv)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b092      	sub	sp, #72	; 0x48
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
	uint32_t units;
	uint8_t i;
	uint8_t timeunits_arr_len;
	uint8_t retval = (char)(-EINVARG);
 8001cc0:	23fa      	movs	r3, #250	; 0xfa
 8001cc2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	char str[40];
	
	if(argc != 3) // number of arguments invalid?
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d001      	beq.n	8001cd0 <sp_cb+0x1c>
		return (char)(-EINVARG);
 8001ccc:	23fa      	movs	r3, #250	; 0xfa
 8001cce:	e05f      	b.n	8001d90 <sp_cb+0xdc>
	
	units = my_atoi(argv[2]);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	3308      	adds	r3, #8
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f001 f808 	bl	8002cec <my_atoi>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38
	if((units == 0) || (!IS_ADDR16(units)))
 8001ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <sp_cb+0x3a>
 8001ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cec:	d301      	bcc.n	8001cf2 <sp_cb+0x3e>
		return (char)(-EINVARG);
 8001cee:	23fa      	movs	r3, #250	; 0xfa
 8001cf0:	e04e      	b.n	8001d90 <sp_cb+0xdc>
	
	// get number of valid <timeunits>
	timeunits_arr_len = (sizeof(timeunits_arr) / sizeof(timeunits_arr[0]));
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	// Check if <timeunit> is valid
	for(i = 0; i < timeunits_arr_len; i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001cfe:	e03f      	b.n	8001d80 <sp_cb+0xcc>
	{
		if(strcmp(argv[1], timeunits_arr[i]) == 0)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	3304      	adds	r3, #4
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d0a:	4923      	ldr	r1, [pc, #140]	; (8001d98 <sp_cb+0xe4>)
 8001d0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f7fe fa94 	bl	8000240 <strcmp>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d12b      	bne.n	8001d76 <sp_cb+0xc2>
		{
			SP_cb_done = 1; // Mark that Sampling Period has been defined
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <sp_cb+0xe8>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
			// Update Timer reload values
			TIMER_6_Update(timer_reloads[i][0], (timer_reloads[i][1] * (uint16_t)(units)));
 8001d24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d28:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <sp_cb+0xec>)
 8001d2a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d34:	4a1a      	ldr	r2, [pc, #104]	; (8001da0 <sp_cb+0xec>)
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	885b      	ldrh	r3, [r3, #2]
 8001d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	f000 fdcb 	bl	80028e0 <TIMER_6_Update>
			snprintf(str, sizeof(str), "Sampling period defined as %ld %s\n\r", units, timeunits_arr[i]);
 8001d4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <sp_cb+0xe4>)
 8001d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d54:	f107 000c 	add.w	r0, r7, #12
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5c:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <sp_cb+0xf0>)
 8001d5e:	2128      	movs	r1, #40	; 0x28
 8001d60:	f006 fa8c 	bl	800827c <sniprintf>
			UART_puts(str);
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 ff8f 	bl	8002c8c <UART_puts>
			// Exit success
			retval = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			break;
 8001d74:	e00a      	b.n	8001d8c <sp_cb+0xd8>
	for(i = 0; i < timeunits_arr_len; i++)
 8001d76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d80:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001d84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d3b9      	bcc.n	8001d00 <sp_cb+0x4c>
		}
	}
	
	// If <timeunit> was not found, retval equals (-EINVARG)
	return retval;
 8001d8c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3740      	adds	r7, #64	; 0x40
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	200000b5 	.word	0x200000b5
 8001da0:	0800af58 	.word	0x0800af58
 8001da4:	0800a9dc 	.word	0x0800a9dc

08001da8 <ac_cb>:

@brief	 	 Sets ADC channel to be used for sampling
******************************************************************************/

char ac_cb(uint8_t argc, char** argv)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b092      	sub	sp, #72	; 0x48
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
	uint8_t addr;
	char str[62];
	
	if(argc != 2) // number of arguments invalid?
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d001      	beq.n	8001dbe <ac_cb+0x16>
		return (char)(-EINVARG);
 8001dba:	23fa      	movs	r3, #250	; 0xfa
 8001dbc:	e02a      	b.n	8001e14 <ac_cb+0x6c>
	
	addr = my_atoi(argv[1]);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 ff91 	bl	8002cec <my_atoi>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(!IS_ADDR4(addr))
 8001dd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d901      	bls.n	8001ddc <ac_cb+0x34>
		return (char)(-EINVARG);
 8001dd8:	23fa      	movs	r3, #250	; 0xfa
 8001dda:	e01b      	b.n	8001e14 <ac_cb+0x6c>

	if(ADC_Config_Channel(&hadc1, addr)) // Config selected channel
 8001ddc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001de0:	4619      	mov	r1, r3
 8001de2:	480e      	ldr	r0, [pc, #56]	; (8001e1c <ac_cb+0x74>)
 8001de4:	f7fe fcc2 	bl	800076c <ADC_Config_Channel>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <ac_cb+0x50>
	{
		// Config function has returned an error code
		UART_puts("Pin not configured as input mode.\n\r");	// not able to read pin value
 8001dee:	480c      	ldr	r0, [pc, #48]	; (8001e20 <ac_cb+0x78>)
 8001df0:	f000 ff4c 	bl	8002c8c <UART_puts>
		return (char)(-EPERM);
 8001df4:	23f9      	movs	r3, #249	; 0xf9
 8001df6:	e00d      	b.n	8001e14 <ac_cb+0x6c>
	}
	
	snprintf(str, sizeof(str), "ADC Channel %d selected for sampling.\n\r", addr);
 8001df8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001dfc:	f107 0008 	add.w	r0, r7, #8
 8001e00:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <ac_cb+0x7c>)
 8001e02:	213e      	movs	r1, #62	; 0x3e
 8001e04:	f006 fa3a 	bl	800827c <sniprintf>
	UART_puts(str);
 8001e08:	f107 0308 	add.w	r3, r7, #8
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 ff3d 	bl	8002c8c <UART_puts>
	
	return 0;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3748      	adds	r7, #72	; 0x48
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	2000027c 	.word	0x2000027c
 8001e20:	0800aa00 	.word	0x0800aa00
 8001e24:	0800aa24 	.word	0x0800aa24

08001e28 <fn_cb>:

@brief	 	 Enable digital filter
******************************************************************************/

char fn_cb(uint8_t argc, char** argv)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
	if(argc != 2) // number of arguments invalid?
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d001      	beq.n	8001e3e <fn_cb+0x16>
		return (char)(-EINVARG);
 8001e3a:	23fa      	movs	r3, #250	; 0xfa
 8001e3c:	e075      	b.n	8001f2a <fn_cb+0x102>
	
	if(f.status == 1)
 8001e3e:	4b3d      	ldr	r3, [pc, #244]	; (8001f34 <fn_cb+0x10c>)
 8001e40:	7f1b      	ldrb	r3, [r3, #28]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d104      	bne.n	8001e50 <fn_cb+0x28>
	{
		UART_puts("Filter already enabled.\n\r");
 8001e46:	483c      	ldr	r0, [pc, #240]	; (8001f38 <fn_cb+0x110>)
 8001e48:	f000 ff20 	bl	8002c8c <UART_puts>
		return 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e06c      	b.n	8001f2a <fn_cb+0x102>
	}

	// select filter
	if(strcmp(argv[1], "LP") == 0)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	3304      	adds	r3, #4
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4939      	ldr	r1, [pc, #228]	; (8001f3c <fn_cb+0x114>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe f9f1 	bl	8000240 <strcmp>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d112      	bne.n	8001e8a <fn_cb+0x62>
	{
		// set Low Pass filter
		f.M = FIR_LP_M_;
 8001e64:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <fn_cb+0x10c>)
 8001e66:	222a      	movs	r2, #42	; 0x2a
 8001e68:	601a      	str	r2, [r3, #0]
		f.N = 0;
 8001e6a:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <fn_cb+0x10c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
		f.dc = 0;
 8001e70:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <fn_cb+0x10c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
		f.x_coefs = FIR_LP_x_coefs;
 8001e76:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <fn_cb+0x10c>)
 8001e78:	4a31      	ldr	r2, [pc, #196]	; (8001f40 <fn_cb+0x118>)
 8001e7a:	615a      	str	r2, [r3, #20]
		f.y_coefs = FIR_y_coefs;
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <fn_cb+0x10c>)
 8001e7e:	4a31      	ldr	r2, [pc, #196]	; (8001f44 <fn_cb+0x11c>)
 8001e80:	611a      	str	r2, [r3, #16]
		UART_puts("Selected Low-Pass Filter.\n\r");
 8001e82:	4831      	ldr	r0, [pc, #196]	; (8001f48 <fn_cb+0x120>)
 8001e84:	f000 ff02 	bl	8002c8c <UART_puts>
 8001e88:	e040      	b.n	8001f0c <fn_cb+0xe4>
	}
	else if(strcmp(argv[1], "HP") == 0)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	492e      	ldr	r1, [pc, #184]	; (8001f4c <fn_cb+0x124>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe f9d4 	bl	8000240 <strcmp>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d113      	bne.n	8001ec6 <fn_cb+0x9e>
	{
		// set High Pass filter
		f.M = FIR_HP_M_;
 8001e9e:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <fn_cb+0x10c>)
 8001ea0:	221c      	movs	r2, #28
 8001ea2:	601a      	str	r2, [r3, #0]
		f.N = 0;
 8001ea4:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <fn_cb+0x10c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	605a      	str	r2, [r3, #4]
		f.dc = 4095/2;
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <fn_cb+0x10c>)
 8001eac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001eb0:	619a      	str	r2, [r3, #24]
		f.x_coefs = FIR_HP_x_coefs;
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <fn_cb+0x10c>)
 8001eb4:	4a26      	ldr	r2, [pc, #152]	; (8001f50 <fn_cb+0x128>)
 8001eb6:	615a      	str	r2, [r3, #20]
		f.y_coefs = FIR_y_coefs;
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <fn_cb+0x10c>)
 8001eba:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <fn_cb+0x11c>)
 8001ebc:	611a      	str	r2, [r3, #16]
		UART_puts("Selected High-Pass Filter.\n\r");
 8001ebe:	4825      	ldr	r0, [pc, #148]	; (8001f54 <fn_cb+0x12c>)
 8001ec0:	f000 fee4 	bl	8002c8c <UART_puts>
 8001ec4:	e022      	b.n	8001f0c <fn_cb+0xe4>
	}
	else if(strcmp(argv[1], "BP") == 0)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4922      	ldr	r1, [pc, #136]	; (8001f58 <fn_cb+0x130>)
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe f9b6 	bl	8000240 <strcmp>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d113      	bne.n	8001f02 <fn_cb+0xda>
	{
		// set Band Pass filter
		f.M = FIR_BP_M_;
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <fn_cb+0x10c>)
 8001edc:	2212      	movs	r2, #18
 8001ede:	601a      	str	r2, [r3, #0]
		f.N = 0;
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <fn_cb+0x10c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	605a      	str	r2, [r3, #4]
		f.dc = 4095/2;
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <fn_cb+0x10c>)
 8001ee8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001eec:	619a      	str	r2, [r3, #24]
		f.x_coefs = FIR_BP_x_coefs;
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <fn_cb+0x10c>)
 8001ef0:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <fn_cb+0x134>)
 8001ef2:	615a      	str	r2, [r3, #20]
		f.y_coefs = FIR_y_coefs;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <fn_cb+0x10c>)
 8001ef6:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <fn_cb+0x11c>)
 8001ef8:	611a      	str	r2, [r3, #16]
		UART_puts("Selected Band-Pass Filter.\n\r");
 8001efa:	4819      	ldr	r0, [pc, #100]	; (8001f60 <fn_cb+0x138>)
 8001efc:	f000 fec6 	bl	8002c8c <UART_puts>
 8001f00:	e004      	b.n	8001f0c <fn_cb+0xe4>
	}
	else
	{
		UART_puts("Filter not recognized.\n\r");
 8001f02:	4818      	ldr	r0, [pc, #96]	; (8001f64 <fn_cb+0x13c>)
 8001f04:	f000 fec2 	bl	8002c8c <UART_puts>
		return 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e00e      	b.n	8001f2a <fn_cb+0x102>
	}

	// init filter
	if(filter_init(&f) == (char)(-1)) // Filter has already been initialized?
 8001f0c:	4809      	ldr	r0, [pc, #36]	; (8001f34 <fn_cb+0x10c>)
 8001f0e:	f7fe ff7d 	bl	8000e0c <filter_init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2bff      	cmp	r3, #255	; 0xff
 8001f16:	d104      	bne.n	8001f22 <fn_cb+0xfa>
	{
		UART_puts("Error initializing filter.\n\r");
 8001f18:	4813      	ldr	r0, [pc, #76]	; (8001f68 <fn_cb+0x140>)
 8001f1a:	f000 feb7 	bl	8002c8c <UART_puts>
		return 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e003      	b.n	8001f2a <fn_cb+0x102>
	}
	
	// Filter enabled
	UART_puts("Filter ON.\n\r");
 8001f22:	4812      	ldr	r0, [pc, #72]	; (8001f6c <fn_cb+0x144>)
 8001f24:	f000 feb2 	bl	8002c8c <UART_puts>
	return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200000b8 	.word	0x200000b8
 8001f38:	0800aa4c 	.word	0x0800aa4c
 8001f3c:	0800aa68 	.word	0x0800aa68
 8001f40:	0800adec 	.word	0x0800adec
 8001f44:	0800ade8 	.word	0x0800ade8
 8001f48:	0800aa6c 	.word	0x0800aa6c
 8001f4c:	0800aa88 	.word	0x0800aa88
 8001f50:	0800ae98 	.word	0x0800ae98
 8001f54:	0800aa8c 	.word	0x0800aa8c
 8001f58:	0800aaac 	.word	0x0800aaac
 8001f5c:	0800af0c 	.word	0x0800af0c
 8001f60:	0800aab0 	.word	0x0800aab0
 8001f64:	0800aad0 	.word	0x0800aad0
 8001f68:	0800aaec 	.word	0x0800aaec
 8001f6c:	0800ab0c 	.word	0x0800ab0c

08001f70 <ff_cb>:

@brief	 	 Disable digital filter
******************************************************************************/

char ff_cb(uint8_t argc, char** argv)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
	if(argc != 1) // number of arguments invalid?
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d001      	beq.n	8001f86 <ff_cb+0x16>
		return (char)(-EINVARG);
 8001f82:	23fa      	movs	r3, #250	; 0xfa
 8001f84:	e00e      	b.n	8001fa4 <ff_cb+0x34>
		
	if(filter_kill(&f) == (char)(-1)) // Filter has already been disabled?
 8001f86:	4809      	ldr	r0, [pc, #36]	; (8001fac <ff_cb+0x3c>)
 8001f88:	f7fe ff89 	bl	8000e9e <filter_kill>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2bff      	cmp	r3, #255	; 0xff
 8001f90:	d104      	bne.n	8001f9c <ff_cb+0x2c>
	{
		UART_puts("Filter already disabled.\n\r");
 8001f92:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <ff_cb+0x40>)
 8001f94:	f000 fe7a 	bl	8002c8c <UART_puts>
		return 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e003      	b.n	8001fa4 <ff_cb+0x34>
	}
	
	// Filter disabled
	UART_puts("Filter OFF.\n\r");
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <ff_cb+0x44>)
 8001f9e:	f000 fe75 	bl	8002c8c <UART_puts>
	return 0;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200000b8 	.word	0x200000b8
 8001fb0:	0800ab1c 	.word	0x0800ab1c
 8001fb4:	0800ab38 	.word	0x0800ab38

08001fb8 <start_sampling>:
@brief	 	 Begin sampling. Number of samples to be taken is optional. It can 
					 be defined by <dig>
******************************************************************************/

static void start_sampling(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	// Reset sample number
	ADC_smp_num = 1;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <start_sampling+0x1c>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	801a      	strh	r2, [r3, #0]
	// Enable ADC conversions
	HAL_ADC_Start_IT(&hadc1);
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <start_sampling+0x20>)
 8001fc4:	f000 ff92 	bl	8002eec <HAL_ADC_Start_IT>
	// Start generating ADC conversions
	HAL_TIM_Base_Start_IT(&htim6);
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <start_sampling+0x24>)
 8001fca:	f004 f801 	bl	8005fd0 <HAL_TIM_Base_Start_IT>
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	2000027c 	.word	0x2000027c
 8001fdc:	200003c8 	.word	0x200003c8

08001fe0 <stop_sampling>:

static void stop_sampling(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	// Disable ADC conversions
	HAL_ADC_Stop_IT(&hadc1);
 8001fe4:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <stop_sampling+0x14>)
 8001fe6:	f001 f859 	bl	800309c <HAL_ADC_Stop_IT>
	// Stop generating ADC conversions
	HAL_TIM_Base_Stop_IT(&htim6);
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <stop_sampling+0x18>)
 8001fec:	f004 f868 	bl	80060c0 <HAL_TIM_Base_Stop_IT>
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	2000027c 	.word	0x2000027c
 8001ff8:	200003c8 	.word	0x200003c8

08001ffc <s_cb>:

char s_cb(uint8_t argc, char** argv)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
	char str[32];
	
	if(argc > 2) // number of arguments invalid?
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <s_cb+0x16>
		return (char)(-EINVARG);
 800200e:	23fa      	movs	r3, #250	; 0xfa
 8002010:	e053      	b.n	80020ba <s_cb+0xbe>
	
	if(Sampling_flag == 1) // sampling in progress?
 8002012:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <s_cb+0xc8>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d104      	bne.n	8002024 <s_cb+0x28>
	{
		UART_puts("Sampling already in progress.\n\r");
 800201a:	482b      	ldr	r0, [pc, #172]	; (80020c8 <s_cb+0xcc>)
 800201c:	f000 fe36 	bl	8002c8c <UART_puts>
		return 0;
 8002020:	2300      	movs	r3, #0
 8002022:	e04a      	b.n	80020ba <s_cb+0xbe>
	}
	
	if(SP_cb_done == 0) // sampling period defined?
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <s_cb+0xd0>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d104      	bne.n	8002036 <s_cb+0x3a>
	{
		UART_puts("Sampling period not defined.\n\r");
 800202c:	4828      	ldr	r0, [pc, #160]	; (80020d0 <s_cb+0xd4>)
 800202e:	f000 fe2d 	bl	8002c8c <UART_puts>
		return (char) (-EPERM);
 8002032:	23f9      	movs	r3, #249	; 0xf9
 8002034:	e041      	b.n	80020ba <s_cb+0xbe>
	}
	
	if(argc == 1)
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d109      	bne.n	8002050 <s_cb+0x54>
	{
		// Begin infinite sampling
		UART_puts("Starting sampling...\n\r");
 800203c:	4825      	ldr	r0, [pc, #148]	; (80020d4 <s_cb+0xd8>)
 800203e:	f000 fe25 	bl	8002c8c <UART_puts>

		// Start taking samples
		start_sampling();
 8002042:	f7ff ffb9 	bl	8001fb8 <start_sampling>
		// Mark that sampling is in progress
		Sampling_flag = 1;
 8002046:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <s_cb+0xc8>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
		return 0;
 800204c:	2300      	movs	r3, #0
 800204e:	e034      	b.n	80020ba <s_cb+0xbe>
	}
	
	// Else, argument 1 defines number of samples to be taken
	smps_left = my_atoi(argv[1]);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	3304      	adds	r3, #4
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fe48 	bl	8002cec <my_atoi>
 800205c:	4603      	mov	r3, r0
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <s_cb+0xdc>)
 8002062:	701a      	strb	r2, [r3, #0]
	if(!IS_DIG(smps_left))
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <s_cb+0xdc>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d004      	beq.n	8002078 <s_cb+0x7c>
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <s_cb+0xdc>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b09      	cmp	r3, #9
 8002076:	d901      	bls.n	800207c <s_cb+0x80>
		return (char)(-EINVARG);
 8002078:	23fa      	movs	r3, #250	; 0xfa
 800207a:	e01e      	b.n	80020ba <s_cb+0xbe>
	
	// Begin sampling K values
	sprintf(str, "Sampling %d values...\n\r", smps_left);
 800207c:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <s_cb+0xdc>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	f107 0308 	add.w	r3, r7, #8
 8002088:	4914      	ldr	r1, [pc, #80]	; (80020dc <s_cb+0xe0>)
 800208a:	4618      	mov	r0, r3
 800208c:	f006 f92a 	bl	80082e4 <siprintf>
	UART_puts(str);
 8002090:	f107 0308 	add.w	r3, r7, #8
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fdf9 	bl	8002c8c <UART_puts>
	
	start_sampling(); // Start taking samples
 800209a:	f7ff ff8d 	bl	8001fb8 <start_sampling>
	while (smps_left) // Taking samples
 800209e:	bf00      	nop
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <s_cb+0xdc>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1fa      	bne.n	80020a0 <s_cb+0xa4>
		;
	stop_sampling(); 	// Stop taking samples
 80020aa:	f7ff ff99 	bl	8001fe0 <stop_sampling>
	
	UART_puts("Sampled values:\n\r");
 80020ae:	480c      	ldr	r0, [pc, #48]	; (80020e0 <s_cb+0xe4>)
 80020b0:	f000 fdec 	bl	8002c8c <UART_puts>
	print_adcValues();
 80020b4:	f7fe fca4 	bl	8000a00 <print_adcValues>
	
	return 0;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3728      	adds	r7, #40	; 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200000b4 	.word	0x200000b4
 80020c8:	0800ab48 	.word	0x0800ab48
 80020cc:	200000b5 	.word	0x200000b5
 80020d0:	0800ab68 	.word	0x0800ab68
 80020d4:	0800ab88 	.word	0x0800ab88
 80020d8:	20000278 	.word	0x20000278
 80020dc:	0800aba0 	.word	0x0800aba0
 80020e0:	0800abb8 	.word	0x0800abb8

080020e4 <st_cb>:

@brief	 	 Stops sampling
******************************************************************************/

char st_cb(uint8_t argc, char** argv)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
	if(argc != 1) // number of arguments invalid?
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d001      	beq.n	80020fa <st_cb+0x16>
		return (char)(-EINVARG);
 80020f6:	23fa      	movs	r3, #250	; 0xfa
 80020f8:	e011      	b.n	800211e <st_cb+0x3a>
	
	if(Sampling_flag == 0)// There was no sampling in progress to be terminated
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <st_cb+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d104      	bne.n	800210c <st_cb+0x28>
	{
		UART_puts("No sampling in progress.\n\r");
 8002102:	480a      	ldr	r0, [pc, #40]	; (800212c <st_cb+0x48>)
 8002104:	f000 fdc2 	bl	8002c8c <UART_puts>
		return 0;
 8002108:	2300      	movs	r3, #0
 800210a:	e008      	b.n	800211e <st_cb+0x3a>
	}	
	// Stop taking samples
	stop_sampling();
 800210c:	f7ff ff68 	bl	8001fe0 <stop_sampling>
	Sampling_flag = 0;
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <st_cb+0x44>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
	
	UART_puts("Sampling stopped.\n\r");
 8002116:	4806      	ldr	r0, [pc, #24]	; (8002130 <st_cb+0x4c>)
 8002118:	f000 fdb8 	bl	8002c8c <UART_puts>
//	UART_puts("Sampled values:\n\r");
	return 0;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200000b4 	.word	0x200000b4
 800212c:	0800abcc 	.word	0x0800abcc
 8002130:	0800abe8 	.word	0x0800abe8

08002134 <wg_cb>:
	{"stw", wavegen_stw},
	{0,0}
};

char wg_cb(uint8_t argc, char** argv)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b092      	sub	sp, #72	; 0x48
 8002138:	af02      	add	r7, sp, #8
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
	uint32_t freq;
	uint8_t retval = (char)(-EINVARG);
 8002140:	23fa      	movs	r3, #250	; 0xfa
 8002142:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	const Signal_t *signal_ptr = signal_list;
 8002146:	4b33      	ldr	r3, [pc, #204]	; (8002214 <wg_cb+0xe0>)
 8002148:	63bb      	str	r3, [r7, #56]	; 0x38
	char str[40];
	
	if(argc > 3) // number of arguments invalid?
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d901      	bls.n	8002154 <wg_cb+0x20>
		return (char)(-EINVARG);
 8002150:	23fa      	movs	r3, #250	; 0xfa
 8002152:	e05b      	b.n	800220c <wg_cb+0xd8>
	
	if(argc == 2)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d114      	bne.n	8002184 <wg_cb+0x50>
	{
		// With 2 arguments, the only valid command is "WG OFF"
		if(strcmp(argv[1], "OFF") == 0)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	3304      	adds	r3, #4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	492d      	ldr	r1, [pc, #180]	; (8002218 <wg_cb+0xe4>)
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f86c 	bl	8000240 <strcmp>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d107      	bne.n	800217e <wg_cb+0x4a>
		{
			// Stop signal output
			wavegen_stop();
 800216e:	f000 f87b 	bl	8002268 <wavegen_stop>
			UART_puts("Wave Generator OFF.\n\r");
 8002172:	482a      	ldr	r0, [pc, #168]	; (800221c <wg_cb+0xe8>)
 8002174:	f000 fd8a 	bl	8002c8c <UART_puts>
			retval = 0; // Exit success
 8002178:	2300      	movs	r3, #0
 800217a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		// Else, invalid argument
		return retval;
 800217e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002182:	e043      	b.n	800220c <wg_cb+0xd8>
	}
	
	freq = my_atoi(argv[2]);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	3308      	adds	r3, #8
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fdae 	bl	8002cec <my_atoi>
 8002190:	4603      	mov	r3, r0
 8002192:	637b      	str	r3, [r7, #52]	; 0x34
	if((freq == 0) || (freq > 100))
 8002194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <wg_cb+0x6c>
 800219a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219c:	2b64      	cmp	r3, #100	; 0x64
 800219e:	d92f      	bls.n	8002200 <wg_cb+0xcc>
		return (char)(-EINVARG);
 80021a0:	23fa      	movs	r3, #250	; 0xfa
 80021a2:	e033      	b.n	800220c <wg_cb+0xd8>
	
	// check if given <signal> is valid
	while(signal_ptr->name)
	{
		if(strcmp(argv[1], signal_ptr->name) == 0)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	3304      	adds	r3, #4
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4619      	mov	r1, r3
 80021b0:	4610      	mov	r0, r2
 80021b2:	f7fe f845 	bl	8000240 <strcmp>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d11e      	bne.n	80021fa <wg_cb+0xc6>
		{
			wavegen_init(); // Init WaveGen peripherals
 80021bc:	f000 f832 	bl	8002224 <wavegen_init>
			signal_ptr->fn();// Generate signal
 80021c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4798      	blx	r3
			wavegen_freq_update(freq); // Update signal frequency
 80021c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021c8:	f000 f85a 	bl	8002280 <wavegen_freq_update>
			wavegen_start(); // Start signal output
 80021cc:	f000 f838 	bl	8002240 <wavegen_start>
			snprintf(str, sizeof(str), "Generating %s wave at %ld Hz.\n\r", argv[1], freq);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	3304      	adds	r3, #4
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	f107 000c 	add.w	r0, r7, #12
 80021da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <wg_cb+0xec>)
 80021e2:	2128      	movs	r1, #40	; 0x28
 80021e4:	f006 f84a 	bl	800827c <sniprintf>
			UART_puts(str);
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fd4d 	bl	8002c8c <UART_puts>
			retval = 0;	// Exit success
 80021f2:	2300      	movs	r3, #0
 80021f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 80021f8:	e006      	b.n	8002208 <wg_cb+0xd4>
		}
		signal_ptr++;
 80021fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fc:	3308      	adds	r3, #8
 80021fe:	63bb      	str	r3, [r7, #56]	; 0x38
	while(signal_ptr->name)
 8002200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1cd      	bne.n	80021a4 <wg_cb+0x70>
	}

	// If <signal> was not found, retval equals (-EINVARG)
	return retval;
 8002208:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800220c:	4618      	mov	r0, r3
 800220e:	3740      	adds	r7, #64	; 0x40
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	0800af64 	.word	0x0800af64
 8002218:	0800ac0c 	.word	0x0800ac0c
 800221c:	0800ac10 	.word	0x0800ac10
 8002220:	0800ac28 	.word	0x0800ac28

08002224 <wavegen_init>:
/**
  * @brief  Inits Timer and DAC Peripherals
  * @param	none
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef wavegen_init(void){
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0

	MX_DAC_Init();
 8002228:	f7fe fd26 	bl	8000c78 <MX_DAC_Init>
	MX_TIM2_Init();
 800222c:	f000 fa4c 	bl	80026c8 <MX_TIM2_Init>
	HAL_TIM_Base_Start(&htim2);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <wavegen_init+0x18>)
 8002232:	f003 fe5d 	bl	8005ef0 <HAL_TIM_Base_Start>

	return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000414 	.word	0x20000414

08002240 <wavegen_start>:
  * @brief  Starts DAC CHANNEL 2 with DMA
  * The DAC update is triggered by Timer 2 overflow
  * @param	none
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef wavegen_start(void){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af02      	add	r7, sp, #8

	return HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, signal_buff, 100, DAC_ALIGN_12B_R);
 8002246:	2300      	movs	r3, #0
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2364      	movs	r3, #100	; 0x64
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <wavegen_start+0x20>)
 800224e:	2110      	movs	r1, #16
 8002250:	4804      	ldr	r0, [pc, #16]	; (8002264 <wavegen_start+0x24>)
 8002252:	f001 fc8f 	bl	8003b74 <HAL_DAC_Start_DMA>
 8002256:	4603      	mov	r3, r0

}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200000d8 	.word	0x200000d8
 8002264:	20000354 	.word	0x20000354

08002268 <wavegen_stop>:
  * @brief  Stops DAC CHANNEL 2
  * Timer 2 is still running...
  * @param	none
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef wavegen_stop(void){
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0

	return HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
 800226c:	2110      	movs	r1, #16
 800226e:	4803      	ldr	r0, [pc, #12]	; (800227c <wavegen_stop+0x14>)
 8002270:	f001 fd4c 	bl	8003d0c <HAL_DAC_Stop_DMA>
 8002274:	4603      	mov	r3, r0

}
 8002276:	4618      	mov	r0, r3
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000354 	.word	0x20000354

08002280 <wavegen_freq_update>:
  * Timer 2 period, used to update one sample of the DAC output
  * Don't forget that we have n = 100 samples
  * @param	frequency in MHz (suggested values are between 1 and 100 MHz)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef wavegen_freq_update(uint32_t freq){
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

	TIMER_2_Update(1080000/freq);
 8002288:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <wavegen_freq_update+0x20>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fad5 	bl	8002840 <TIMER_2_Update>

	return HAL_OK;
 8002296:	2300      	movs	r3, #0

}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	00107ac0 	.word	0x00107ac0
 80022a4:	00000000 	.word	0x00000000

080022a8 <wavegen_sin>:
  * @brief  Calculates and generates the sample values for a sin wave
  * with A between 0 and VRef 0000 - FFF (0V to 3.3V)
  * @param	none
  * @retval none
  */
void wavegen_sin(void){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0

	for (int i = 0; i < 100; i++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	e026      	b.n	8002302 <wavegen_sin+0x5a>
		signal_buff[i] = ((sin(i*2*PI/100) + 1) * ((0xFFF)/2));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	ee07 3a90 	vmov	s15, r3
 80022bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80022c0:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8002318 <wavegen_sin+0x70>
 80022c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022c8:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8002320 <wavegen_sin+0x78>
 80022cc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80022d0:	eeb0 0b46 	vmov.f64	d0, d6
 80022d4:	f007 f9cc 	bl	8009670 <sin>
 80022d8:	eeb0 7b40 	vmov.f64	d7, d0
 80022dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80022e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022e4:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002328 <wavegen_sin+0x80>
 80022e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022f0:	ee17 1a90 	vmov	r1, s15
 80022f4:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <wavegen_sin+0x88>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 100; i++)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3301      	adds	r3, #1
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b63      	cmp	r3, #99	; 0x63
 8002306:	ddd5      	ble.n	80022b4 <wavegen_sin+0xc>
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	f3af 8000 	nop.w
 8002318:	4d12d84a 	.word	0x4d12d84a
 800231c:	400921fb 	.word	0x400921fb
 8002320:	00000000 	.word	0x00000000
 8002324:	40590000 	.word	0x40590000
 8002328:	00000000 	.word	0x00000000
 800232c:	409ffc00 	.word	0x409ffc00
 8002330:	200000d8 	.word	0x200000d8

08002334 <wavegen_tri>:
  * @brief  Calculates and generates the sample values for a triangle wave
  * with A between 0 and VRef 0000 - FFF (0V to 3.3V)
  * @param	none
  * @retval none
  */
void wavegen_tri(void){
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0

	for (int i = 0; i < 50; i++)
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	e00d      	b.n	800235c <wavegen_tri+0x28>
		signal_buff[i] = i * ((0xFFF)/50);
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	00da      	lsls	r2, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	4619      	mov	r1, r3
 800234e:	4a13      	ldr	r2, [pc, #76]	; (800239c <wavegen_tri+0x68>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 50; i++)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3301      	adds	r3, #1
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b31      	cmp	r3, #49	; 0x31
 8002360:	ddee      	ble.n	8002340 <wavegen_tri+0xc>

	for (int i = 50; i > 0; i--)
 8002362:	2332      	movs	r3, #50	; 0x32
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	e00f      	b.n	8002388 <wavegen_tri+0x54>
		signal_buff[100 - i] = i * ((0xFFF)/50);
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	00da      	lsls	r2, r3, #3
 8002372:	441a      	add	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800237a:	4611      	mov	r1, r2
 800237c:	4a07      	ldr	r2, [pc, #28]	; (800239c <wavegen_tri+0x68>)
 800237e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 50; i > 0; i--)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	3b01      	subs	r3, #1
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	dcec      	bgt.n	8002368 <wavegen_tri+0x34>
}
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	200000d8 	.word	0x200000d8

080023a0 <wavegen_sqr>:
  * @brief  Calculates and generates the sample values for a square wave
  * with A between 0 and VRef 0000 - FFF (0V to 3.3V)
  * @param	none
  * @retval none
  */
void wavegen_sqr(void){
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0

	for (int i = 0; i < 50; i++){
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	e00e      	b.n	80023ca <wavegen_sqr+0x2a>
		signal_buff[i] = (0xFFF);
 80023ac:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <wavegen_sqr+0x40>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f640 71ff 	movw	r1, #4095	; 0xfff
 80023b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		signal_buff[i + 50] = 0;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3332      	adds	r3, #50	; 0x32
 80023bc:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <wavegen_sqr+0x40>)
 80023be:	2100      	movs	r1, #0
 80023c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 50; i++){
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3301      	adds	r3, #1
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b31      	cmp	r3, #49	; 0x31
 80023ce:	dded      	ble.n	80023ac <wavegen_sqr+0xc>
	}
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	200000d8 	.word	0x200000d8

080023e4 <wavegen_stw>:
  * @brief  Calculates and generates the sample values for a saw tooth wave
  * with A between 0 and VRef 0000 - FFF (0V to 3.3V)
  * @param	none
  * @retval none
  */
void wavegen_stw(void){
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0

	for (int i = 0; i < 100; i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	e00c      	b.n	800240a <wavegen_stw+0x26>
		signal_buff[i] = i * ((0xFFF)/100);
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4619      	mov	r1, r3
 80023fc:	4a08      	ldr	r2, [pc, #32]	; (8002420 <wavegen_stw+0x3c>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 100; i++)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3301      	adds	r3, #1
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b63      	cmp	r3, #99	; 0x63
 800240e:	ddef      	ble.n	80023f0 <wavegen_stw+0xc>
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	200000d8 	.word	0x200000d8

08002424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_MspInit+0x44>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <HAL_MspInit+0x44>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_MspInit+0x44>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_MspInit+0x44>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a08      	ldr	r2, [pc, #32]	; (8002468 <HAL_MspInit+0x44>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_MspInit+0x44>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800

0800246c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002470:	e7fe      	b.n	8002470 <NMI_Handler+0x4>

08002472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002476:	e7fe      	b.n	8002476 <HardFault_Handler+0x4>

08002478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800247c:	e7fe      	b.n	800247c <MemManage_Handler+0x4>

0800247e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002482:	e7fe      	b.n	8002482 <BusFault_Handler+0x4>

08002484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <UsageFault_Handler+0x4>

0800248a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b8:	f000 fcb4 	bl	8002e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}

080024c0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <DMA1_Stream6_IRQHandler+0x10>)
 80024c6:	f001 ff33 	bl	8004330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000368 	.word	0x20000368

080024d4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <ADC_IRQHandler+0x10>)
 80024da:	f000 fe1d 	bl	8003118 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000027c 	.word	0x2000027c

080024e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <TIM2_IRQHandler+0x10>)
 80024ee:	f003 fe16 	bl	800611e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000414 	.word	0x20000414

080024fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <USART3_IRQHandler+0x10>)
 8002502:	f004 fb17 	bl	8006b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000460 	.word	0x20000460

08002510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
	return 1;
 8002514:	2301      	movs	r3, #1
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <_kill>:

int _kill(int pid, int sig)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800252a:	f005 fda3 	bl	8008074 <__errno>
 800252e:	4603      	mov	r3, r0
 8002530:	2216      	movs	r2, #22
 8002532:	601a      	str	r2, [r3, #0]
	return -1;
 8002534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <_exit>:

void _exit (int status)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002548:	f04f 31ff 	mov.w	r1, #4294967295
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ffe7 	bl	8002520 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002552:	e7fe      	b.n	8002552 <_exit+0x12>

08002554 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	e00a      	b.n	800257c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002566:	f3af 8000 	nop.w
 800256a:	4601      	mov	r1, r0
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	60ba      	str	r2, [r7, #8]
 8002572:	b2ca      	uxtb	r2, r1
 8002574:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3301      	adds	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	dbf0      	blt.n	8002566 <_read+0x12>
	}

return len;
 8002584:	687b      	ldr	r3, [r7, #4]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e009      	b.n	80025b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	60ba      	str	r2, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dbf1      	blt.n	80025a0 <_write+0x12>
	}
	return len;
 80025bc:	687b      	ldr	r3, [r7, #4]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_close>:

int _close(int file)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
	return -1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ee:	605a      	str	r2, [r3, #4]
	return 0;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <_isatty>:

int _isatty(int file)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	return 1;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
	return 0;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002638:	4a14      	ldr	r2, [pc, #80]	; (800268c <_sbrk+0x5c>)
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <_sbrk+0x60>)
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <_sbrk+0x64>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <_sbrk+0x64>)
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <_sbrk+0x68>)
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <_sbrk+0x64>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	429a      	cmp	r2, r3
 800265e:	d207      	bcs.n	8002670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002660:	f005 fd08 	bl	8008074 <__errno>
 8002664:	4603      	mov	r3, r0
 8002666:	220c      	movs	r2, #12
 8002668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	e009      	b.n	8002684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <_sbrk+0x64>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <_sbrk+0x64>)
 8002680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002682:	68fb      	ldr	r3, [r7, #12]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20080000 	.word	0x20080000
 8002690:	00000400 	.word	0x00000400
 8002694:	20000268 	.word	0x20000268
 8002698:	20000610 	.word	0x20000610

0800269c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <SystemInit+0x28>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <SystemInit+0x28>)
 80026a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <SystemInit+0x28>)
 80026b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026b6:	609a      	str	r2, [r3, #8]
#endif
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ce:	f107 0310 	add.w	r3, r7, #16
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80026e6:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <MX_TIM2_Init+0x98>)
 80026e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <MX_TIM2_Init+0x98>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <MX_TIM2_Init+0x98>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000-1;
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <MX_TIM2_Init+0x98>)
 80026fc:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002700:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <MX_TIM2_Init+0x98>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002708:	4b15      	ldr	r3, [pc, #84]	; (8002760 <MX_TIM2_Init+0x98>)
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800270e:	4814      	ldr	r0, [pc, #80]	; (8002760 <MX_TIM2_Init+0x98>)
 8002710:	f003 fb96 	bl	8005e40 <HAL_TIM_Base_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800271a:	f7ff fa3b 	bl	8001b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002722:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	4619      	mov	r1, r3
 800272a:	480d      	ldr	r0, [pc, #52]	; (8002760 <MX_TIM2_Init+0x98>)
 800272c:	f003 fe16 	bl	800635c <HAL_TIM_ConfigClockSource>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002736:	f7ff fa2d 	bl	8001b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800273a:	2320      	movs	r3, #32
 800273c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	4619      	mov	r1, r3
 8002746:	4806      	ldr	r0, [pc, #24]	; (8002760 <MX_TIM2_Init+0x98>)
 8002748:	f004 f83e 	bl	80067c8 <HAL_TIMEx_MasterConfigSynchronization>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002752:	f7ff fa1f 	bl	8001b94 <Error_Handler>
  }

}
 8002756:	bf00      	nop
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000414 	.word	0x20000414

08002764 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <MX_TIM6_Init+0x64>)
 8002776:	4a15      	ldr	r2, [pc, #84]	; (80027cc <MX_TIM6_Init+0x68>)
 8002778:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <MX_TIM6_Init+0x64>)
 800277c:	2200      	movs	r2, #0
 800277e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <MX_TIM6_Init+0x64>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <MX_TIM6_Init+0x64>)
 8002788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800278c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <MX_TIM6_Init+0x64>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002794:	480c      	ldr	r0, [pc, #48]	; (80027c8 <MX_TIM6_Init+0x64>)
 8002796:	f003 fb53 	bl	8005e40 <HAL_TIM_Base_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80027a0:	f7ff f9f8 	bl	8001b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027a4:	2320      	movs	r3, #32
 80027a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	4619      	mov	r1, r3
 80027b0:	4805      	ldr	r0, [pc, #20]	; (80027c8 <MX_TIM6_Init+0x64>)
 80027b2:	f004 f809 	bl	80067c8 <HAL_TIMEx_MasterConfigSynchronization>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80027bc:	f7ff f9ea 	bl	8001b94 <Error_Handler>
  }

}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200003c8 	.word	0x200003c8
 80027cc:	40001000 	.word	0x40001000

080027d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e0:	d114      	bne.n	800280c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_TIM_Base_MspInit+0x68>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a14      	ldr	r2, [pc, #80]	; (8002838 <HAL_TIM_Base_MspInit+0x68>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_TIM_Base_MspInit+0x68>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	201c      	movs	r0, #28
 8002800:	f001 f8f1 	bl	80039e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002804:	201c      	movs	r0, #28
 8002806:	f001 f90a 	bl	8003a1e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800280a:	e010      	b.n	800282e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_TIM_Base_MspInit+0x6c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10b      	bne.n	800282e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_TIM_Base_MspInit+0x68>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a07      	ldr	r2, [pc, #28]	; (8002838 <HAL_TIM_Base_MspInit+0x68>)
 800281c:	f043 0310 	orr.w	r3, r3, #16
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_TIM_Base_MspInit+0x68>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	40001000 	.word	0x40001000

08002840 <TIMER_2_Update>:
//    	// toggle LED for heart beat
//    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
//    }
//}

void TIMER_2_Update(uint32_t reload){
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002848:	f107 0318 	add.w	r3, r7, #24
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002856:	f107 030c 	add.w	r3, r7, #12
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]

	  htim2.Instance = TIM2;
 8002862:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <TIMER_2_Update+0x9c>)
 8002864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002868:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 1 - 1;
 800286a:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <TIMER_2_Update+0x9c>)
 800286c:	2200      	movs	r2, #0
 800286e:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <TIMER_2_Update+0x9c>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = reload;
 8002876:	4a19      	ldr	r2, [pc, #100]	; (80028dc <TIMER_2_Update+0x9c>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	60d3      	str	r3, [r2, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <TIMER_2_Update+0x9c>)
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <TIMER_2_Update+0x9c>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002888:	4814      	ldr	r0, [pc, #80]	; (80028dc <TIMER_2_Update+0x9c>)
 800288a:	f003 fad9 	bl	8005e40 <HAL_TIM_Base_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <TIMER_2_Update+0x58>
	  {
	    Error_Handler();
 8002894:	f7ff f97e 	bl	8001b94 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800289c:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800289e:	f107 0318 	add.w	r3, r7, #24
 80028a2:	4619      	mov	r1, r3
 80028a4:	480d      	ldr	r0, [pc, #52]	; (80028dc <TIMER_2_Update+0x9c>)
 80028a6:	f003 fd59 	bl	800635c <HAL_TIM_ConfigClockSource>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <TIMER_2_Update+0x74>
	  {
	    Error_Handler();
 80028b0:	f7ff f970 	bl	8001b94 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028b4:	2320      	movs	r3, #32
 80028b6:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	4619      	mov	r1, r3
 80028c2:	4806      	ldr	r0, [pc, #24]	; (80028dc <TIMER_2_Update+0x9c>)
 80028c4:	f003 ff80 	bl	80067c8 <HAL_TIMEx_MasterConfigSynchronization>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <TIMER_2_Update+0x92>
	  {
	    Error_Handler();
 80028ce:	f7ff f961 	bl	8001b94 <Error_Handler>
	  }
}
 80028d2:	bf00      	nop
 80028d4:	3728      	adds	r7, #40	; 0x28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000414 	.word	0x20000414

080028e0 <TIMER_6_Update>:

void TIMER_6_Update(uint32_t prescaler, uint32_t period)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  htim6.Init.Prescaler = prescaler - 1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <TIMER_6_Update+0x34>)
 80028f0:	6053      	str	r3, [r2, #4]
  htim6.Init.Period = period - 1;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	3b01      	subs	r3, #1
 80028f6:	4a07      	ldr	r2, [pc, #28]	; (8002914 <TIMER_6_Update+0x34>)
 80028f8:	60d3      	str	r3, [r2, #12]
	
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028fa:	4806      	ldr	r0, [pc, #24]	; (8002914 <TIMER_6_Update+0x34>)
 80028fc:	f003 faa0 	bl	8005e40 <HAL_TIM_Base_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <TIMER_6_Update+0x2a>
  {
    Error_Handler();
 8002906:	f7ff f945 	bl	8001b94 <Error_Handler>
  }
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200003c8 	.word	0x200003c8

08002918 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <MX_USART3_UART_Init+0x58>)
 800291e:	4a15      	ldr	r2, [pc, #84]	; (8002974 <MX_USART3_UART_Init+0x5c>)
 8002920:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002922:	4b13      	ldr	r3, [pc, #76]	; (8002970 <MX_USART3_UART_Init+0x58>)
 8002924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002928:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <MX_USART3_UART_Init+0x58>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <MX_USART3_UART_Init+0x58>)
 8002932:	2200      	movs	r2, #0
 8002934:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <MX_USART3_UART_Init+0x58>)
 8002938:	2200      	movs	r2, #0
 800293a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <MX_USART3_UART_Init+0x58>)
 800293e:	220c      	movs	r2, #12
 8002940:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <MX_USART3_UART_Init+0x58>)
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002948:	4b09      	ldr	r3, [pc, #36]	; (8002970 <MX_USART3_UART_Init+0x58>)
 800294a:	2200      	movs	r2, #0
 800294c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <MX_USART3_UART_Init+0x58>)
 8002950:	2200      	movs	r2, #0
 8002952:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <MX_USART3_UART_Init+0x58>)
 8002956:	2200      	movs	r2, #0
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800295a:	4805      	ldr	r0, [pc, #20]	; (8002970 <MX_USART3_UART_Init+0x58>)
 800295c:	f003 ffe0 	bl	8006920 <HAL_UART_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002966:	f7ff f915 	bl	8001b94 <Error_Handler>
  }

}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000460 	.word	0x20000460
 8002974:	40004800 	.word	0x40004800

08002978 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <HAL_UART_MspInit+0x8c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d130      	bne.n	80029fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_UART_MspInit+0x90>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <HAL_UART_MspInit+0x90>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a4:	6413      	str	r3, [r2, #64]	; 0x40
 80029a6:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <HAL_UART_MspInit+0x90>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_UART_MspInit+0x90>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <HAL_UART_MspInit+0x90>)
 80029b8:	f043 0308 	orr.w	r3, r3, #8
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_UART_MspInit+0x90>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d8:	2303      	movs	r3, #3
 80029da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029dc:	2307      	movs	r3, #7
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4619      	mov	r1, r3
 80029e6:	4809      	ldr	r0, [pc, #36]	; (8002a0c <HAL_UART_MspInit+0x94>)
 80029e8:	f001 ff0c 	bl	8004804 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2100      	movs	r1, #0
 80029f0:	2027      	movs	r0, #39	; 0x27
 80029f2:	f000 fff8 	bl	80039e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029f6:	2027      	movs	r0, #39	; 0x27
 80029f8:	f001 f811 	bl	8003a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	; 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40004800 	.word	0x40004800
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020c00 	.word	0x40020c00

08002a10 <UART_Receive>:

/******************************************************************************
@brief	 	 Receives a char by UART serial port
******************************************************************************/
char UART_Receive(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	if(Rx_index == (RX_BUFF_LEN - 1)) // Is the buffer full?
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <UART_Receive+0x40>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b0f      	cmp	r3, #15
 8002a1c:	d102      	bne.n	8002a24 <UART_Receive+0x14>
		// Treat as 'CR'
		c = ENTER_KEY;
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <UART_Receive+0x44>)
 8002a20:	220d      	movs	r2, #13
 8002a22:	701a      	strb	r2, [r3, #0]
	
	if(c != ENTER_KEY) // Is this the end of reception?
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <UART_Receive+0x44>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b0d      	cmp	r3, #13
 8002a2c:	d001      	beq.n	8002a32 <UART_Receive+0x22>
		Rx_UART_init(); // prepare for next character
 8002a2e:	f000 f8ef 	bl	8002c10 <Rx_UART_init>
	
	if(process_as_control() == 0) // Is the received char a control char?
 8002a32:	f000 f811 	bl	8002a58 <process_as_control>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <UART_Receive+0x30>
		return (char)(-1);
 8002a3c:	23ff      	movs	r3, #255	; 0xff
 8002a3e:	e004      	b.n	8002a4a <UART_Receive+0x3a>
	
	// Its not a special character
	process_as_data();
 8002a40:	f000 f87a 	bl	8002b38 <process_as_data>
	return c;
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <UART_Receive+0x44>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	b2db      	uxtb	r3, r3
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	2000026c 	.word	0x2000026c
 8002a54:	200005e4 	.word	0x200005e4

08002a58 <process_as_control>:
	
	{0,0}
};

static char process_as_control(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
	const Special_Key_t *s_key_ptr = s_key_list;
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <process_as_control+0x3c>)
 8002a60:	607b      	str	r3, [r7, #4]
	
	while(s_key_ptr->code)
 8002a62:	e00e      	b.n	8002a82 <process_as_control+0x2a>
	{
		if(c == (s_key_ptr->code))// Is this a control char?
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <process_as_control+0x40>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d104      	bne.n	8002a7c <process_as_control+0x24>
		{
			// Execute this control char callback
			s_key_ptr->fn();	
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4798      	blx	r3
			return 0; // processed as control
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e007      	b.n	8002a8c <process_as_control+0x34>
		}
		s_key_ptr++;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3308      	adds	r3, #8
 8002a80:	607b      	str	r3, [r7, #4]
	while(s_key_ptr->code)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1ec      	bne.n	8002a64 <process_as_control+0xc>
	}

	// Its not a control char. Needs to be processed as data
	return (char)(-1);
 8002a8a:	23ff      	movs	r3, #255	; 0xff
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	0800afa4 	.word	0x0800afa4
 8002a98:	200005e4 	.word	0x200005e4

08002a9c <enter_key_cb>:

static void enter_key_cb(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	UART_puts("\n\r");
 8002aa0:	4808      	ldr	r0, [pc, #32]	; (8002ac4 <enter_key_cb+0x28>)
 8002aa2:	f000 f8f3 	bl	8002c8c <UART_puts>
	Rx_Buffer[Rx_index] = 0;	// mark end of string
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <enter_key_cb+0x2c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b07      	ldr	r3, [pc, #28]	; (8002acc <enter_key_cb+0x30>)
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	5499      	strb	r1, [r3, r2]
	Rx_index = 0;
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <enter_key_cb+0x2c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
	cmd_received = 1;					// informs main a command was received
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <enter_key_cb+0x34>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	0800ac48 	.word	0x0800ac48
 8002ac8:	2000026c 	.word	0x2000026c
 8002acc:	200005e8 	.word	0x200005e8
 8002ad0:	2000026e 	.word	0x2000026e

08002ad4 <bcksp_key_cb>:

static void bcksp_key_cb(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
	if(Rx_index > 0) // Is there characters left to delete?
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <bcksp_key_cb+0x34>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <bcksp_key_cb+0x1e>
		Rx_index--;
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <bcksp_key_cb+0x34>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <bcksp_key_cb+0x34>)
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e002      	b.n	8002af8 <bcksp_key_cb+0x24>
		// c is equal to BCKSP_KEY
	else
		// Nothing to delete
		c = 0; // Print nothing
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <bcksp_key_cb+0x38>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
	UART_putchar(c);
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <bcksp_key_cb+0x38>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f8aa 	bl	8002c58 <UART_putchar>
}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	2000026c 	.word	0x2000026c
 8002b0c:	200005e4 	.word	0x200005e4

08002b10 <esc_key_cb>:

static void esc_key_cb(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
	clear_last_cmd();
 8002b14:	f000 f82e 	bl	8002b74 <clear_last_cmd>
}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <dollar_key_cb>:

static void dollar_key_cb(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	clear_last_cmd();
 8002b20:	f000 f828 	bl	8002b74 <clear_last_cmd>
	UART_puts(last_valid_cmd); // print last valid command
 8002b24:	4803      	ldr	r0, [pc, #12]	; (8002b34 <dollar_key_cb+0x18>)
 8002b26:	f000 f8b1 	bl	8002c8c <UART_puts>
	insert_cmd(last_valid_cmd); // fill Rx_Buffer with last valid command
 8002b2a:	4802      	ldr	r0, [pc, #8]	; (8002b34 <dollar_key_cb+0x18>)
 8002b2c:	f000 f846 	bl	8002bbc <insert_cmd>
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	200000a4 	.word	0x200000a4

08002b38 <process_as_data>:

@brief	 	 process the char received as a data character
******************************************************************************/

static void process_as_data(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
	// add received char to Rx_Buffer
	Rx_Buffer[Rx_index] = c;
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <process_as_data+0x30>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <process_as_data+0x34>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b2d9      	uxtb	r1, r3
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <process_as_data+0x38>)
 8002b4c:	5499      	strb	r1, [r3, r2]
	Rx_index++;
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <process_as_data+0x30>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <process_as_data+0x30>)
 8002b5a:	701a      	strb	r2, [r3, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	2000026c 	.word	0x2000026c
 8002b6c:	200005e4 	.word	0x200005e4
 8002b70:	200005e8 	.word	0x200005e8

08002b74 <clear_last_cmd>:

/******************************************************************************
@brief	 	 send backspaces via terminal to clear the command line
******************************************************************************/
static void clear_last_cmd(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
	if(Rx_index == 0) // empty buffer
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <clear_last_cmd+0x40>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d015      	beq.n	8002bae <clear_last_cmd+0x3a>
		return;
	
	// fill Rx_Buffer with 'BCKSP_KEY'
	memset(Rx_Buffer, BCKSP_KEY, Rx_index);
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <clear_last_cmd+0x40>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	217f      	movs	r1, #127	; 0x7f
 8002b8c:	480a      	ldr	r0, [pc, #40]	; (8002bb8 <clear_last_cmd+0x44>)
 8002b8e:	f005 faab 	bl	80080e8 <memset>
	Rx_Buffer[Rx_index] = 0; 	// mark end of string
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <clear_last_cmd+0x40>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <clear_last_cmd+0x44>)
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	5499      	strb	r1, [r3, r2]
	Rx_index = 0;
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <clear_last_cmd+0x40>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
	
	UART_puts(Rx_Buffer); // print it -> this will clear the command line 
 8002ba6:	4804      	ldr	r0, [pc, #16]	; (8002bb8 <clear_last_cmd+0x44>)
 8002ba8:	f000 f870 	bl	8002c8c <UART_puts>
 8002bac:	e000      	b.n	8002bb0 <clear_last_cmd+0x3c>
		return;
 8002bae:	bf00      	nop
}
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000026c 	.word	0x2000026c
 8002bb8:	200005e8 	.word	0x200005e8

08002bbc <insert_cmd>:
@brief	 	 Assigns 'Rx_Buffer' with string 'str', making 'Rx_index' point to
							the end of 'Rx_Buffer'
@param  	 String to be inserted in 'Rx_Buffer'
******************************************************************************/
static void insert_cmd(const char* str)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	if((str == NULL) || (str[0] == 0))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d017      	beq.n	8002bfa <insert_cmd+0x3e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d013      	beq.n	8002bfa <insert_cmd+0x3e>
		return;
	
	int len = strlen(str);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fd fb3e 	bl	8000254 <strlen>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	60fb      	str	r3, [r7, #12]
	if(len > RX_BUFF_LEN)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	dc0d      	bgt.n	8002bfe <insert_cmd+0x42>
		return;
	
	strcpy(Rx_Buffer, str);
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4808      	ldr	r0, [pc, #32]	; (8002c08 <insert_cmd+0x4c>)
 8002be6:	f005 fb9d 	bl	8008324 <strcpy>
	Rx_index = strlen(str);	// 'Rx_index' point to the last 'Rx_Buffer' position
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fd fb32 	bl	8000254 <strlen>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <insert_cmd+0x50>)
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	e002      	b.n	8002c00 <insert_cmd+0x44>
		return;
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <insert_cmd+0x44>
		return;
 8002bfe:	bf00      	nop
}
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200005e8 	.word	0x200005e8
 8002c0c:	2000026c 	.word	0x2000026c

08002c10 <Rx_UART_init>:

// set the interrupt for UART3 Rx
void Rx_UART_init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&c, 1);
 8002c14:	2201      	movs	r2, #1
 8002c16:	4903      	ldr	r1, [pc, #12]	; (8002c24 <Rx_UART_init+0x14>)
 8002c18:	4803      	ldr	r0, [pc, #12]	; (8002c28 <Rx_UART_init+0x18>)
 8002c1a:	f003 ff3d 	bl	8006a98 <HAL_UART_Receive_IT>
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200005e4 	.word	0x200005e4
 8002c28:	20000460 	.word	0x20000460

08002c2c <HAL_UART_RxCpltCallback>:

//implementation of UART ISR
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) //current UART?
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <HAL_UART_RxCpltCallback+0x24>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d102      	bne.n	8002c44 <HAL_UART_RxCpltCallback+0x18>
		Rx_flag = 1;
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_UART_RxCpltCallback+0x28>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40004800 	.word	0x40004800
 8002c54:	2000026d 	.word	0x2000026d

08002c58 <UART_putchar>:
@brief	 	 Sends a char by UART - Polling (Waits for UART_Tx to transmitt 
							queued data
@param  	 Char to be transmitted
******************************************************************************/
void UART_putchar(char ch)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
	while(huart3.gState == HAL_UART_STATE_BUSY_TX) // Waits for UART_Tx to transmitt queued data
 8002c62:	bf00      	nop
 8002c64:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <UART_putchar+0x2c>)
 8002c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c68:	2b21      	cmp	r3, #33	; 0x21
 8002c6a:	d0fb      	beq.n	8002c64 <UART_putchar+0xc>
		;
	
	c = ch; // 'ch' cannot be used to transmitt since its local to this function. Content may be lost
 8002c6c:	4a06      	ldr	r2, [pc, #24]	; (8002c88 <UART_putchar+0x30>)
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)&c, 1);
 8002c72:	2201      	movs	r2, #1
 8002c74:	4904      	ldr	r1, [pc, #16]	; (8002c88 <UART_putchar+0x30>)
 8002c76:	4803      	ldr	r0, [pc, #12]	; (8002c84 <UART_putchar+0x2c>)
 8002c78:	f003 fea0 	bl	80069bc <HAL_UART_Transmit_IT>
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20000460 	.word	0x20000460
 8002c88:	200005e4 	.word	0x200005e4

08002c8c <UART_puts>:
@brief	 	 Sends a string by UART - Polling (Waits for UART_Tx to transmitt 
							queued data
@param  	 String to be transmitted
******************************************************************************/
void UART_puts(const char *s)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	if((s == NULL) || (s[0] == 0))	// string empty?
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01d      	beq.n	8002cd6 <UART_puts+0x4a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d019      	beq.n	8002cd6 <UART_puts+0x4a>
		return;
	
	int len = strlen(s);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd fad6 	bl	8000254 <strlen>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	60fb      	str	r3, [r7, #12]
	if(len > TX_BUFF_LEN)		// string size bigger than the max size of Tx_Buffer?
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb2:	dc12      	bgt.n	8002cda <UART_puts+0x4e>
		return;

	while(huart3.gState == HAL_UART_STATE_BUSY_TX) // Waits for UART_Tx to transmitt queued data
 8002cb4:	bf00      	nop
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <UART_puts+0x58>)
 8002cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cba:	2b21      	cmp	r3, #33	; 0x21
 8002cbc:	d0fb      	beq.n	8002cb6 <UART_puts+0x2a>
		;
	
	strcpy(Tx_Buffer, s);	// send string 'str' to 'TX_Buffer'
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4809      	ldr	r0, [pc, #36]	; (8002ce8 <UART_puts+0x5c>)
 8002cc2:	f005 fb2f 	bl	8008324 <strcpy>
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)Tx_Buffer, len);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4906      	ldr	r1, [pc, #24]	; (8002ce8 <UART_puts+0x5c>)
 8002cce:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <UART_puts+0x58>)
 8002cd0:	f003 fe74 	bl	80069bc <HAL_UART_Transmit_IT>
 8002cd4:	e002      	b.n	8002cdc <UART_puts+0x50>
		return;
 8002cd6:	bf00      	nop
 8002cd8:	e000      	b.n	8002cdc <UART_puts+0x50>
		return;
 8002cda:	bf00      	nop
}
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000460 	.word	0x20000460
 8002ce8:	200004e4 	.word	0x200004e4

08002cec <my_atoi>:
@param  String 'str' to be converted

@retval Int value of string converted
******************************************************************************/
int my_atoi(const char *str)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]

	while(str[i]) // end of array
 8002cf8:	e01d      	b.n	8002d36 <my_atoi+0x4a>
	{
		if(((str[i] < 0x30) || (str[i] > 0x41)) && ((str[i] < 0x41) || (str[i] > 0x46))) // 0x30 ('0'); 0x41 ('9'); 0x41 ('A'); 0x46 ('F');
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	4413      	add	r3, r2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b2f      	cmp	r3, #47	; 0x2f
 8002d04:	d905      	bls.n	8002d12 <my_atoi+0x26>
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b41      	cmp	r3, #65	; 0x41
 8002d10:	d90e      	bls.n	8002d30 <my_atoi+0x44>
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d905      	bls.n	8002d2a <my_atoi+0x3e>
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b46      	cmp	r3, #70	; 0x46
 8002d28:	d902      	bls.n	8002d30 <my_atoi+0x44>
			return -1;		// invalid
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2e:	e00f      	b.n	8002d50 <my_atoi+0x64>
		i++;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	3301      	adds	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
	while(str[i]) // end of array
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1db      	bne.n	8002cfa <my_atoi+0xe>
	}
	return (int)strtol(str, NULL, 16); // convert string str (representing a hexadecimal value) into an integer number - 16 (hexadecimal)
 8002d42:	2210      	movs	r2, #16
 8002d44:	2100      	movs	r1, #0
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f005 fbd4 	bl	80084f4 <strtol>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	bf00      	nop
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d5c:	480d      	ldr	r0, [pc, #52]	; (8002d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d5e:	490e      	ldr	r1, [pc, #56]	; (8002d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d60:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d64:	e002      	b.n	8002d6c <LoopCopyDataInit>

08002d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d6a:	3304      	adds	r3, #4

08002d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d70:	d3f9      	bcc.n	8002d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d72:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d74:	4c0b      	ldr	r4, [pc, #44]	; (8002da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d78:	e001      	b.n	8002d7e <LoopFillZerobss>

08002d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d7c:	3204      	adds	r2, #4

08002d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d80:	d3fb      	bcc.n	8002d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d82:	f7ff fc8b 	bl	800269c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d86:	f005 f97b 	bl	8008080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d8a:	f7fe fe03 	bl	8001994 <main>
  bx  lr    
 8002d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d90:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d98:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002d9c:	0800b408 	.word	0x0800b408
  ldr r2, =_sbss
 8002da0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002da4:	2000060c 	.word	0x2000060c

08002da8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002da8:	e7fe      	b.n	8002da8 <CAN1_RX0_IRQHandler>

08002daa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dae:	2003      	movs	r0, #3
 8002db0:	f000 fe0e 	bl	80039d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f000 f805 	bl	8002dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dba:	f7ff fb33 	bl	8002424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dcc:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_InitTick+0x54>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <HAL_InitTick+0x58>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fe29 	bl	8003a3a <HAL_SYSTICK_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00e      	b.n	8002e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b0f      	cmp	r3, #15
 8002df6:	d80a      	bhi.n	8002e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	f000 fdf1 	bl	80039e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e04:	4a06      	ldr	r2, [pc, #24]	; (8002e20 <HAL_InitTick+0x5c>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e000      	b.n	8002e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000010 	.word	0x20000010
 8002e1c:	20000018 	.word	0x20000018
 8002e20:	20000014 	.word	0x20000014

08002e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_IncTick+0x20>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_IncTick+0x24>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_IncTick+0x24>)
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000018 	.word	0x20000018
 8002e48:	200005f8 	.word	0x200005f8

08002e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_GetTick+0x14>)
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	200005f8 	.word	0x200005f8

08002e64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e031      	b.n	8002ede <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fd fc12 	bl	80006ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d116      	bne.n	8002ed0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <HAL_ADC_Init+0x84>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	f043 0202 	orr.w	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fbb8 	bl	8003628 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f023 0303 	bic.w	r3, r3, #3
 8002ec6:	f043 0201 	orr.w	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
 8002ece:	e001      	b.n	8002ed4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	ffffeefd 	.word	0xffffeefd

08002eec <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_Start_IT+0x1a>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e0b5      	b.n	8003072 <HAL_ADC_Start_IT+0x186>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d018      	beq.n	8002f4e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002f2c:	4b54      	ldr	r3, [pc, #336]	; (8003080 <HAL_ADC_Start_IT+0x194>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a54      	ldr	r2, [pc, #336]	; (8003084 <HAL_ADC_Start_IT+0x198>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	0c9a      	lsrs	r2, r3, #18
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002f40:	e002      	b.n	8002f48 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f9      	bne.n	8002f42 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d17d      	bne.n	8003058 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f60:	4b49      	ldr	r3, [pc, #292]	; (8003088 <HAL_ADC_Start_IT+0x19c>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f96:	d106      	bne.n	8002fa6 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	f023 0206 	bic.w	r2, r3, #6
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	645a      	str	r2, [r3, #68]	; 0x44
 8002fa4:	e002      	b.n	8002fac <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fbc:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b30      	ldr	r3, [pc, #192]	; (800308c <HAL_ADC_Start_IT+0x1a0>)
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <HAL_ADC_Start_IT+0x1a4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10f      	bne.n	8002ffa <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d143      	bne.n	8003070 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	e03a      	b.n	8003070 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a25      	ldr	r2, [pc, #148]	; (8003094 <HAL_ADC_Start_IT+0x1a8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d10e      	bne.n	8003022 <HAL_ADC_Start_IT+0x136>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003020:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_ADC_Start_IT+0x1a4>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	d120      	bne.n	8003070 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a19      	ldr	r2, [pc, #100]	; (8003098 <HAL_ADC_Start_IT+0x1ac>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d11b      	bne.n	8003070 <HAL_ADC_Start_IT+0x184>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d114      	bne.n	8003070 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	e00b      	b.n	8003070 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	f043 0210 	orr.w	r2, r3, #16
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	f043 0201 	orr.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000010 	.word	0x20000010
 8003084:	431bde83 	.word	0x431bde83
 8003088:	fffff8fe 	.word	0xfffff8fe
 800308c:	04000020 	.word	0x04000020
 8003090:	40012300 	.word	0x40012300
 8003094:	40012000 	.word	0x40012000
 8003098:	40012200 	.word	0x40012200

0800309c <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_Stop_IT+0x16>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e027      	b.n	8003102 <HAL_ADC_Stop_IT+0x66>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10f      	bne.n	80030f8 <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_ADC_Stop_IT+0x74>)
 80030e4:	400b      	ands	r3, r1
 80030e6:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_ADC_Stop_IT+0x78>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	fbffffdf 	.word	0xfbffffdf
 8003114:	ffffeefe 	.word	0xffffeefe

08003118 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d049      	beq.n	80031e2 <HAL_ADC_IRQHandler+0xca>
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d046      	beq.n	80031e2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d12b      	bne.n	80031d2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800317e:	2b00      	cmp	r3, #0
 8003180:	d127      	bne.n	80031d2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800319a:	2b00      	cmp	r3, #0
 800319c:	d119      	bne.n	80031d2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0220 	bic.w	r2, r2, #32
 80031ac:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fd fb68 	bl	80008a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0212 	mvn.w	r2, #18
 80031e0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d057      	beq.n	80032a8 <HAL_ADC_IRQHandler+0x190>
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d054      	beq.n	80032a8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d105      	bne.n	8003216 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d139      	bne.n	8003298 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800322e:	2b00      	cmp	r3, #0
 8003230:	d006      	beq.n	8003240 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800323c:	2b00      	cmp	r3, #0
 800323e:	d12b      	bne.n	8003298 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800324a:	2b00      	cmp	r3, #0
 800324c:	d124      	bne.n	8003298 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11d      	bne.n	8003298 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003260:	2b00      	cmp	r3, #0
 8003262:	d119      	bne.n	8003298 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003272:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	f043 0201 	orr.w	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fabf 	bl	800381c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f06f 020c 	mvn.w	r2, #12
 80032a6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d017      	beq.n	80032ee <HAL_ADC_IRQHandler+0x1d6>
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d014      	beq.n	80032ee <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d10d      	bne.n	80032ee <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f837 	bl	8003352 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0201 	mvn.w	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032fc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d015      	beq.n	8003330 <HAL_ADC_IRQHandler+0x218>
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f043 0202 	orr.w	r2, r3, #2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f06f 0220 	mvn.w	r2, #32
 800331e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f820 	bl	8003366 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f06f 0220 	mvn.w	r2, #32
 800332e:	601a      	str	r2, [r3, #0]
  }
}
 8003330:	bf00      	nop
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x1c>
 8003394:	2302      	movs	r3, #2
 8003396:	e136      	b.n	8003606 <HAL_ADC_ConfigChannel+0x28a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b09      	cmp	r3, #9
 80033a6:	d93a      	bls.n	800341e <HAL_ADC_ConfigChannel+0xa2>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033b0:	d035      	beq.n	800341e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68d9      	ldr	r1, [r3, #12]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	3b1e      	subs	r3, #30
 80033c8:	2207      	movs	r2, #7
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43da      	mvns	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	400a      	ands	r2, r1
 80033d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a8d      	ldr	r2, [pc, #564]	; (8003614 <HAL_ADC_ConfigChannel+0x298>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10a      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68d9      	ldr	r1, [r3, #12]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	061a      	lsls	r2, r3, #24
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033f6:	e035      	b.n	8003464 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68d9      	ldr	r1, [r3, #12]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	4618      	mov	r0, r3
 800340a:	4603      	mov	r3, r0
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4403      	add	r3, r0
 8003410:	3b1e      	subs	r3, #30
 8003412:	409a      	lsls	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800341c:	e022      	b.n	8003464 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6919      	ldr	r1, [r3, #16]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	2207      	movs	r2, #7
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43da      	mvns	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	400a      	ands	r2, r1
 8003440:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6919      	ldr	r1, [r3, #16]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	4618      	mov	r0, r3
 8003454:	4603      	mov	r3, r0
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4403      	add	r3, r0
 800345a:	409a      	lsls	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b06      	cmp	r3, #6
 800346a:	d824      	bhi.n	80034b6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	3b05      	subs	r3, #5
 800347e:	221f      	movs	r2, #31
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43da      	mvns	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	400a      	ands	r2, r1
 800348c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	4618      	mov	r0, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	3b05      	subs	r3, #5
 80034a8:	fa00 f203 	lsl.w	r2, r0, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	635a      	str	r2, [r3, #52]	; 0x34
 80034b4:	e04c      	b.n	8003550 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b0c      	cmp	r3, #12
 80034bc:	d824      	bhi.n	8003508 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	3b23      	subs	r3, #35	; 0x23
 80034d0:	221f      	movs	r2, #31
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43da      	mvns	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	400a      	ands	r2, r1
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	4618      	mov	r0, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	3b23      	subs	r3, #35	; 0x23
 80034fa:	fa00 f203 	lsl.w	r2, r0, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
 8003506:	e023      	b.n	8003550 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	3b41      	subs	r3, #65	; 0x41
 800351a:	221f      	movs	r2, #31
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43da      	mvns	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	400a      	ands	r2, r1
 8003528:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	4618      	mov	r0, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	3b41      	subs	r3, #65	; 0x41
 8003544:	fa00 f203 	lsl.w	r2, r0, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a30      	ldr	r2, [pc, #192]	; (8003618 <HAL_ADC_ConfigChannel+0x29c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10a      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x1f4>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003562:	d105      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003564:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_ADC_ConfigChannel+0x2a0>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4a2c      	ldr	r2, [pc, #176]	; (800361c <HAL_ADC_ConfigChannel+0x2a0>)
 800356a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800356e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a28      	ldr	r2, [pc, #160]	; (8003618 <HAL_ADC_ConfigChannel+0x29c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10f      	bne.n	800359a <HAL_ADC_ConfigChannel+0x21e>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b12      	cmp	r3, #18
 8003580:	d10b      	bne.n	800359a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003582:	4b26      	ldr	r3, [pc, #152]	; (800361c <HAL_ADC_ConfigChannel+0x2a0>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4a25      	ldr	r2, [pc, #148]	; (800361c <HAL_ADC_ConfigChannel+0x2a0>)
 8003588:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800358c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800358e:	4b23      	ldr	r3, [pc, #140]	; (800361c <HAL_ADC_ConfigChannel+0x2a0>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4a22      	ldr	r2, [pc, #136]	; (800361c <HAL_ADC_ConfigChannel+0x2a0>)
 8003594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003598:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1e      	ldr	r2, [pc, #120]	; (8003618 <HAL_ADC_ConfigChannel+0x29c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d12b      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x280>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_ADC_ConfigChannel+0x298>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d003      	beq.n	80035b6 <HAL_ADC_ConfigChannel+0x23a>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b11      	cmp	r3, #17
 80035b4:	d122      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_ADC_ConfigChannel+0x2a0>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4a18      	ldr	r2, [pc, #96]	; (800361c <HAL_ADC_ConfigChannel+0x2a0>)
 80035bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80035c0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <HAL_ADC_ConfigChannel+0x2a0>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a15      	ldr	r2, [pc, #84]	; (800361c <HAL_ADC_ConfigChannel+0x2a0>)
 80035c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035cc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a10      	ldr	r2, [pc, #64]	; (8003614 <HAL_ADC_ConfigChannel+0x298>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d111      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80035d8:	4b11      	ldr	r3, [pc, #68]	; (8003620 <HAL_ADC_ConfigChannel+0x2a4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a11      	ldr	r2, [pc, #68]	; (8003624 <HAL_ADC_ConfigChannel+0x2a8>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0c9a      	lsrs	r2, r3, #18
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035ee:	e002      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f9      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	10000012 	.word	0x10000012
 8003618:	40012000 	.word	0x40012000
 800361c:	40012300 	.word	0x40012300
 8003620:	20000010 	.word	0x20000010
 8003624:	431bde83 	.word	0x431bde83

08003628 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003630:	4b78      	ldr	r3, [pc, #480]	; (8003814 <ADC_Init+0x1ec>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4a77      	ldr	r2, [pc, #476]	; (8003814 <ADC_Init+0x1ec>)
 8003636:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800363a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800363c:	4b75      	ldr	r3, [pc, #468]	; (8003814 <ADC_Init+0x1ec>)
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4973      	ldr	r1, [pc, #460]	; (8003814 <ADC_Init+0x1ec>)
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003658:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	021a      	lsls	r2, r3, #8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800367c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800369e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6899      	ldr	r1, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	4a58      	ldr	r2, [pc, #352]	; (8003818 <ADC_Init+0x1f0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d022      	beq.n	8003702 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6899      	ldr	r1, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6899      	ldr	r1, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	e00f      	b.n	8003722 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003710:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003720:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0202 	bic.w	r2, r2, #2
 8003730:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6899      	ldr	r1, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	005a      	lsls	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01b      	beq.n	8003788 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800375e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800376e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	3b01      	subs	r3, #1
 800377c:	035a      	lsls	r2, r3, #13
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	e007      	b.n	8003798 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003796:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	051a      	lsls	r2, r3, #20
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6899      	ldr	r1, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037da:	025a      	lsls	r2, r3, #9
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6899      	ldr	r1, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	029a      	lsls	r2, r3, #10
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	609a      	str	r2, [r3, #8]
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40012300 	.word	0x40012300
 8003818:	0f000001 	.word	0x0f000001

0800381c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <__NVIC_SetPriorityGrouping+0x40>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800384c:	4013      	ands	r3, r2
 800384e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <__NVIC_SetPriorityGrouping+0x44>)
 800385a:	4313      	orrs	r3, r2
 800385c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800385e:	4a04      	ldr	r2, [pc, #16]	; (8003870 <__NVIC_SetPriorityGrouping+0x40>)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	60d3      	str	r3, [r2, #12]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	e000ed00 	.word	0xe000ed00
 8003874:	05fa0000 	.word	0x05fa0000

08003878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <__NVIC_GetPriorityGrouping+0x18>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	0a1b      	lsrs	r3, r3, #8
 8003882:	f003 0307 	and.w	r3, r3, #7
}
 8003886:	4618      	mov	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	db0b      	blt.n	80038be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	f003 021f 	and.w	r2, r3, #31
 80038ac:	4907      	ldr	r1, [pc, #28]	; (80038cc <__NVIC_EnableIRQ+0x38>)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	2001      	movs	r0, #1
 80038b6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	e000e100 	.word	0xe000e100

080038d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	db0a      	blt.n	80038fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	490c      	ldr	r1, [pc, #48]	; (800391c <__NVIC_SetPriority+0x4c>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	0112      	lsls	r2, r2, #4
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	440b      	add	r3, r1
 80038f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f8:	e00a      	b.n	8003910 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	4908      	ldr	r1, [pc, #32]	; (8003920 <__NVIC_SetPriority+0x50>)
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	3b04      	subs	r3, #4
 8003908:	0112      	lsls	r2, r2, #4
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	440b      	add	r3, r1
 800390e:	761a      	strb	r2, [r3, #24]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000e100 	.word	0xe000e100
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003924:	b480      	push	{r7}
 8003926:	b089      	sub	sp, #36	; 0x24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f1c3 0307 	rsb	r3, r3, #7
 800393e:	2b04      	cmp	r3, #4
 8003940:	bf28      	it	cs
 8003942:	2304      	movcs	r3, #4
 8003944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3304      	adds	r3, #4
 800394a:	2b06      	cmp	r3, #6
 800394c:	d902      	bls.n	8003954 <NVIC_EncodePriority+0x30>
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3b03      	subs	r3, #3
 8003952:	e000      	b.n	8003956 <NVIC_EncodePriority+0x32>
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003958:	f04f 32ff 	mov.w	r2, #4294967295
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43da      	mvns	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	401a      	ands	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800396c:	f04f 31ff 	mov.w	r1, #4294967295
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fa01 f303 	lsl.w	r3, r1, r3
 8003976:	43d9      	mvns	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	4313      	orrs	r3, r2
         );
}
 800397e:	4618      	mov	r0, r3
 8003980:	3724      	adds	r7, #36	; 0x24
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800399c:	d301      	bcc.n	80039a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399e:	2301      	movs	r3, #1
 80039a0:	e00f      	b.n	80039c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a2:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <SysTick_Config+0x40>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039aa:	210f      	movs	r1, #15
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	f7ff ff8e 	bl	80038d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <SysTick_Config+0x40>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ba:	4b04      	ldr	r3, [pc, #16]	; (80039cc <SysTick_Config+0x40>)
 80039bc:	2207      	movs	r2, #7
 80039be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	e000e010 	.word	0xe000e010

080039d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff29 	bl	8003830 <__NVIC_SetPriorityGrouping>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b086      	sub	sp, #24
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f8:	f7ff ff3e 	bl	8003878 <__NVIC_GetPriorityGrouping>
 80039fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	6978      	ldr	r0, [r7, #20]
 8003a04:	f7ff ff8e 	bl	8003924 <NVIC_EncodePriority>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff5d 	bl	80038d0 <__NVIC_SetPriority>
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	4603      	mov	r3, r0
 8003a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff31 	bl	8003894 <__NVIC_EnableIRQ>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ffa2 	bl	800398c <SysTick_Config>
 8003a48:	4603      	mov	r3, r0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e014      	b.n	8003a8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	791b      	ldrb	r3, [r3, #4]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7fd f935 	bl	8000ce4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	795b      	ldrb	r3, [r3, #5]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_DAC_Start+0x16>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e040      	b.n	8003b2e <HAL_DAC_Start+0x98>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6819      	ldr	r1, [r3, #0]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10f      	bne.n	8003af6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003ae0:	2b3c      	cmp	r3, #60	; 0x3c
 8003ae2:	d11d      	bne.n	8003b20 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	605a      	str	r2, [r3, #4]
 8003af4:	e014      	b.n	8003b20 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	213c      	movs	r1, #60	; 0x3c
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d107      	bne.n	8003b20 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0202 	orr.w	r2, r2, #2
 8003b1e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6819      	ldr	r1, [r3, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2201      	movs	r2, #1
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43da      	mvns	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	795b      	ldrb	r3, [r3, #5]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_DAC_Start_DMA+0x1e>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e0ab      	b.n	8003cea <HAL_DAC_Start_DMA+0x176>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d12f      	bne.n	8003c04 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	4a52      	ldr	r2, [pc, #328]	; (8003cf4 <HAL_DAC_Start_DMA+0x180>)
 8003baa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	4a51      	ldr	r2, [pc, #324]	; (8003cf8 <HAL_DAC_Start_DMA+0x184>)
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a50      	ldr	r2, [pc, #320]	; (8003cfc <HAL_DAC_Start_DMA+0x188>)
 8003bba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bca:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d013      	beq.n	8003bfa <HAL_DAC_Start_DMA+0x86>
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d845      	bhi.n	8003c64 <HAL_DAC_Start_DMA+0xf0>
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_DAC_Start_DMA+0x72>
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d005      	beq.n	8003bf0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003be4:	e03e      	b.n	8003c64 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3308      	adds	r3, #8
 8003bec:	613b      	str	r3, [r7, #16]
        break;
 8003bee:	e03c      	b.n	8003c6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	613b      	str	r3, [r7, #16]
        break;
 8003bf8:	e037      	b.n	8003c6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3310      	adds	r3, #16
 8003c00:	613b      	str	r3, [r7, #16]
        break;
 8003c02:	e032      	b.n	8003c6a <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a3d      	ldr	r2, [pc, #244]	; (8003d00 <HAL_DAC_Start_DMA+0x18c>)
 8003c0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4a3c      	ldr	r2, [pc, #240]	; (8003d04 <HAL_DAC_Start_DMA+0x190>)
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4a3b      	ldr	r2, [pc, #236]	; (8003d08 <HAL_DAC_Start_DMA+0x194>)
 8003c1a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c2a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d013      	beq.n	8003c5a <HAL_DAC_Start_DMA+0xe6>
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d817      	bhi.n	8003c68 <HAL_DAC_Start_DMA+0xf4>
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_DAC_Start_DMA+0xd2>
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d005      	beq.n	8003c50 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003c44:	e010      	b.n	8003c68 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	613b      	str	r3, [r7, #16]
        break;
 8003c4e:	e00c      	b.n	8003c6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3318      	adds	r3, #24
 8003c56:	613b      	str	r3, [r7, #16]
        break;
 8003c58:	e007      	b.n	8003c6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	331c      	adds	r3, #28
 8003c60:	613b      	str	r3, [r7, #16]
        break;
 8003c62:	e002      	b.n	8003c6a <HAL_DAC_Start_DMA+0xf6>
        break;
 8003c64:	bf00      	nop
 8003c66:	e000      	b.n	8003c6a <HAL_DAC_Start_DMA+0xf6>
        break;
 8003c68:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d111      	bne.n	8003c94 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6898      	ldr	r0, [r3, #8]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	f000 fa5f 	bl	800414c <HAL_DMA_Start_IT>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	75fb      	strb	r3, [r7, #23]
 8003c92:	e010      	b.n	8003cb6 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003ca2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68d8      	ldr	r0, [r3, #12]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	f000 fa4d 	bl	800414c <HAL_DMA_Start_IT>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10c      	bne.n	8003cdc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6819      	ldr	r1, [r3, #0]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2201      	movs	r2, #1
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e005      	b.n	8003ce8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f043 0204 	orr.w	r2, r3, #4
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	08003edb 	.word	0x08003edb
 8003cf8:	08003efd 	.word	0x08003efd
 8003cfc:	08003f19 	.word	0x08003f19
 8003d00:	08003f83 	.word	0x08003f83
 8003d04:	08003fa5 	.word	0x08003fa5
 8003d08:	08003fc1 	.word	0x08003fc1

08003d0c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6819      	ldr	r1, [r3, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	400a      	ands	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2201      	movs	r2, #1
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43da      	mvns	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10d      	bne.n	8003d72 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fa56 	bl	800420c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	e00c      	b.n	8003d8c <HAL_DAC_Stop_DMA+0x80>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fa48 	bl	800420c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003d8a:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e004      	b.n	8003dd0 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3314      	adds	r3, #20
 8003dce:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b087      	sub	sp, #28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	795b      	ldrb	r3, [r3, #5]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_DAC_ConfigChannel+0x18>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e03c      	b.n	8003eb4 <HAL_DAC_ConfigChannel+0x92>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2202      	movs	r2, #2
 8003e44:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4013      	ands	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6819      	ldr	r1, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	22c0      	movs	r2, #192	; 0xc0
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43da      	mvns	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	791b      	ldrb	r3, [r3, #4]
 8003ecc:	b2db      	uxtb	r3, r3
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f7ff ff7c 	bl	8003de6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	711a      	strb	r2, [r3, #4]
}
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff ff75 	bl	8003dfa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f043 0204 	orr.w	r2, r3, #4
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff ff6b 	bl	8003e0e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	711a      	strb	r2, [r3, #4]
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff ffd8 	bl	8003f46 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	711a      	strb	r2, [r3, #4]
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff ffd1 	bl	8003f5a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f043 0204 	orr.w	r2, r3, #4
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff ffc7 	bl	8003f6e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	711a      	strb	r2, [r3, #4]
}
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ffc:	f7fe ff26 	bl	8002e4c <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e099      	b.n	8004140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800402c:	e00f      	b.n	800404e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800402e:	f7fe ff0d 	bl	8002e4c <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b05      	cmp	r3, #5
 800403a:	d908      	bls.n	800404e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2203      	movs	r2, #3
 8004046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e078      	b.n	8004140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e8      	bne.n	800402e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4b38      	ldr	r3, [pc, #224]	; (8004148 <HAL_DMA_Init+0x158>)
 8004068:	4013      	ands	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800407a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d107      	bne.n	80040b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	4313      	orrs	r3, r2
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f023 0307 	bic.w	r3, r3, #7
 80040ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d117      	bne.n	8004112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00e      	beq.n	8004112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fb09 	bl	800470c <DMA_CheckFifoParam>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2240      	movs	r2, #64	; 0x40
 8004104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800410e:	2301      	movs	r3, #1
 8004110:	e016      	b.n	8004140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fac0 	bl	80046a0 <DMA_CalcBaseAndBitshift>
 8004120:	4603      	mov	r3, r0
 8004122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004128:	223f      	movs	r2, #63	; 0x3f
 800412a:	409a      	lsls	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	e010803f 	.word	0xe010803f

0800414c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_DMA_Start_IT+0x26>
 800416e:	2302      	movs	r3, #2
 8004170:	e048      	b.n	8004204 <HAL_DMA_Start_IT+0xb8>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b01      	cmp	r3, #1
 8004184:	d137      	bne.n	80041f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fa52 	bl	8004644 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	223f      	movs	r2, #63	; 0x3f
 80041a6:	409a      	lsls	r2, r3
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0216 	orr.w	r2, r2, #22
 80041ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0208 	orr.w	r2, r2, #8
 80041e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e005      	b.n	8004202 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
 8004200:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004202:	7dfb      	ldrb	r3, [r7, #23]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004218:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800421a:	f7fe fe17 	bl	8002e4c <HAL_GetTick>
 800421e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d008      	beq.n	800423e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e052      	b.n	80042e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0216 	bic.w	r2, r2, #22
 800424c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800425c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <HAL_DMA_Abort+0x62>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0208 	bic.w	r2, r2, #8
 800427c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800428e:	e013      	b.n	80042b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004290:	f7fe fddc 	bl	8002e4c <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b05      	cmp	r3, #5
 800429c:	d90c      	bls.n	80042b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2203      	movs	r2, #3
 80042a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e015      	b.n	80042e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e4      	bne.n	8004290 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ca:	223f      	movs	r2, #63	; 0x3f
 80042cc:	409a      	lsls	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d004      	beq.n	800430a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2280      	movs	r2, #128	; 0x80
 8004304:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e00c      	b.n	8004324 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2205      	movs	r2, #5
 800430e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800433c:	4b92      	ldr	r3, [pc, #584]	; (8004588 <HAL_DMA_IRQHandler+0x258>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a92      	ldr	r2, [pc, #584]	; (800458c <HAL_DMA_IRQHandler+0x25c>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	0a9b      	lsrs	r3, r3, #10
 8004348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435a:	2208      	movs	r2, #8
 800435c:	409a      	lsls	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4013      	ands	r3, r2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d01a      	beq.n	800439c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0204 	bic.w	r2, r2, #4
 8004382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004388:	2208      	movs	r2, #8
 800438a:	409a      	lsls	r2, r3
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f043 0201 	orr.w	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a0:	2201      	movs	r2, #1
 80043a2:	409a      	lsls	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d012      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043be:	2201      	movs	r2, #1
 80043c0:	409a      	lsls	r2, r3
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	f043 0202 	orr.w	r2, r3, #2
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	2204      	movs	r2, #4
 80043d8:	409a      	lsls	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d012      	beq.n	8004408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00b      	beq.n	8004408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	2204      	movs	r2, #4
 80043f6:	409a      	lsls	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	f043 0204 	orr.w	r2, r3, #4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	2210      	movs	r2, #16
 800440e:	409a      	lsls	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d043      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d03c      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	2210      	movs	r2, #16
 800442c:	409a      	lsls	r2, r3
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d018      	beq.n	8004472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d108      	bne.n	8004460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d024      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
 800445e:	e01f      	b.n	80044a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01b      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
 8004470:	e016      	b.n	80044a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0208 	bic.w	r2, r2, #8
 800448e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a4:	2220      	movs	r2, #32
 80044a6:	409a      	lsls	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 808e 	beq.w	80045ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8086 	beq.w	80045ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c6:	2220      	movs	r2, #32
 80044c8:	409a      	lsls	r2, r3
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b05      	cmp	r3, #5
 80044d8:	d136      	bne.n	8004548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0216 	bic.w	r2, r2, #22
 80044e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <HAL_DMA_IRQHandler+0x1da>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004506:	2b00      	cmp	r3, #0
 8004508:	d007      	beq.n	800451a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0208 	bic.w	r2, r2, #8
 8004518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451e:	223f      	movs	r2, #63	; 0x3f
 8004520:	409a      	lsls	r2, r3
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453a:	2b00      	cmp	r3, #0
 800453c:	d07d      	beq.n	800463a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	4798      	blx	r3
        }
        return;
 8004546:	e078      	b.n	800463a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01c      	beq.n	8004590 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d108      	bne.n	8004576 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004568:	2b00      	cmp	r3, #0
 800456a:	d030      	beq.n	80045ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
 8004574:	e02b      	b.n	80045ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d027      	beq.n	80045ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	4798      	blx	r3
 8004586:	e022      	b.n	80045ce <HAL_DMA_IRQHandler+0x29e>
 8004588:	20000010 	.word	0x20000010
 800458c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0210 	bic.w	r2, r2, #16
 80045ac:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d032      	beq.n	800463c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d022      	beq.n	8004628 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2205      	movs	r2, #5
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	429a      	cmp	r2, r3
 8004604:	d307      	bcc.n	8004616 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f2      	bne.n	80045fa <HAL_DMA_IRQHandler+0x2ca>
 8004614:	e000      	b.n	8004618 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004616:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
 8004638:	e000      	b.n	800463c <HAL_DMA_IRQHandler+0x30c>
        return;
 800463a:	bf00      	nop
    }
  }
}
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop

08004644 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004660:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d108      	bne.n	8004684 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004682:	e007      	b.n	8004694 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]
}
 8004694:	bf00      	nop
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	3b10      	subs	r3, #16
 80046b0:	4a13      	ldr	r2, [pc, #76]	; (8004700 <DMA_CalcBaseAndBitshift+0x60>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	091b      	lsrs	r3, r3, #4
 80046b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046ba:	4a12      	ldr	r2, [pc, #72]	; (8004704 <DMA_CalcBaseAndBitshift+0x64>)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d908      	bls.n	80046e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <DMA_CalcBaseAndBitshift+0x68>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	1d1a      	adds	r2, r3, #4
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	659a      	str	r2, [r3, #88]	; 0x58
 80046de:	e006      	b.n	80046ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <DMA_CalcBaseAndBitshift+0x68>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	aaaaaaab 	.word	0xaaaaaaab
 8004704:	0800afcc 	.word	0x0800afcc
 8004708:	fffffc00 	.word	0xfffffc00

0800470c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d11f      	bne.n	8004766 <DMA_CheckFifoParam+0x5a>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d856      	bhi.n	80047da <DMA_CheckFifoParam+0xce>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <DMA_CheckFifoParam+0x28>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004745 	.word	0x08004745
 8004738:	08004757 	.word	0x08004757
 800473c:	08004745 	.word	0x08004745
 8004740:	080047db 	.word	0x080047db
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d046      	beq.n	80047de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004754:	e043      	b.n	80047de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800475e:	d140      	bne.n	80047e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004764:	e03d      	b.n	80047e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476e:	d121      	bne.n	80047b4 <DMA_CheckFifoParam+0xa8>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d837      	bhi.n	80047e6 <DMA_CheckFifoParam+0xda>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <DMA_CheckFifoParam+0x70>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	0800478d 	.word	0x0800478d
 8004780:	08004793 	.word	0x08004793
 8004784:	0800478d 	.word	0x0800478d
 8004788:	080047a5 	.word	0x080047a5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
      break;
 8004790:	e030      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d025      	beq.n	80047ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a2:	e022      	b.n	80047ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047ac:	d11f      	bne.n	80047ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047b2:	e01c      	b.n	80047ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d903      	bls.n	80047c2 <DMA_CheckFifoParam+0xb6>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d003      	beq.n	80047c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047c0:	e018      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	73fb      	strb	r3, [r7, #15]
      break;
 80047c6:	e015      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00e      	beq.n	80047f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      break;
 80047d8:	e00b      	b.n	80047f2 <DMA_CheckFifoParam+0xe6>
      break;
 80047da:	bf00      	nop
 80047dc:	e00a      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      break;
 80047de:	bf00      	nop
 80047e0:	e008      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      break;
 80047e2:	bf00      	nop
 80047e4:	e006      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      break;
 80047e6:	bf00      	nop
 80047e8:	e004      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      break;
 80047ea:	bf00      	nop
 80047ec:	e002      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80047ee:	bf00      	nop
 80047f0:	e000      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      break;
 80047f2:	bf00      	nop
    }
  } 
  
  return status; 
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop

08004804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004804:	b480      	push	{r7}
 8004806:	b089      	sub	sp, #36	; 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004816:	2300      	movs	r3, #0
 8004818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	e175      	b.n	8004b10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004824:	2201      	movs	r2, #1
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	429a      	cmp	r2, r3
 800483e:	f040 8164 	bne.w	8004b0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d005      	beq.n	800485a <HAL_GPIO_Init+0x56>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d130      	bne.n	80048bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	2203      	movs	r2, #3
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4313      	orrs	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004890:	2201      	movs	r2, #1
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 0201 	and.w	r2, r3, #1
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d017      	beq.n	80048f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	2203      	movs	r2, #3
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d123      	bne.n	800494c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	08da      	lsrs	r2, r3, #3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3208      	adds	r2, #8
 800490c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	220f      	movs	r2, #15
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4013      	ands	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	08da      	lsrs	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3208      	adds	r2, #8
 8004946:	69b9      	ldr	r1, [r7, #24]
 8004948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	2203      	movs	r2, #3
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 0203 	and.w	r2, r3, #3
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4313      	orrs	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80be 	beq.w	8004b0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800498e:	4b66      	ldr	r3, [pc, #408]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	4a65      	ldr	r2, [pc, #404]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004998:	6453      	str	r3, [r2, #68]	; 0x44
 800499a:	4b63      	ldr	r3, [pc, #396]	; (8004b28 <HAL_GPIO_Init+0x324>)
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80049a6:	4a61      	ldr	r2, [pc, #388]	; (8004b2c <HAL_GPIO_Init+0x328>)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	3302      	adds	r3, #2
 80049ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	220f      	movs	r2, #15
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4013      	ands	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a58      	ldr	r2, [pc, #352]	; (8004b30 <HAL_GPIO_Init+0x32c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d037      	beq.n	8004a42 <HAL_GPIO_Init+0x23e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a57      	ldr	r2, [pc, #348]	; (8004b34 <HAL_GPIO_Init+0x330>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d031      	beq.n	8004a3e <HAL_GPIO_Init+0x23a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a56      	ldr	r2, [pc, #344]	; (8004b38 <HAL_GPIO_Init+0x334>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02b      	beq.n	8004a3a <HAL_GPIO_Init+0x236>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a55      	ldr	r2, [pc, #340]	; (8004b3c <HAL_GPIO_Init+0x338>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d025      	beq.n	8004a36 <HAL_GPIO_Init+0x232>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a54      	ldr	r2, [pc, #336]	; (8004b40 <HAL_GPIO_Init+0x33c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01f      	beq.n	8004a32 <HAL_GPIO_Init+0x22e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a53      	ldr	r2, [pc, #332]	; (8004b44 <HAL_GPIO_Init+0x340>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d019      	beq.n	8004a2e <HAL_GPIO_Init+0x22a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a52      	ldr	r2, [pc, #328]	; (8004b48 <HAL_GPIO_Init+0x344>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <HAL_GPIO_Init+0x226>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a51      	ldr	r2, [pc, #324]	; (8004b4c <HAL_GPIO_Init+0x348>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00d      	beq.n	8004a26 <HAL_GPIO_Init+0x222>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a50      	ldr	r2, [pc, #320]	; (8004b50 <HAL_GPIO_Init+0x34c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <HAL_GPIO_Init+0x21e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a4f      	ldr	r2, [pc, #316]	; (8004b54 <HAL_GPIO_Init+0x350>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d101      	bne.n	8004a1e <HAL_GPIO_Init+0x21a>
 8004a1a:	2309      	movs	r3, #9
 8004a1c:	e012      	b.n	8004a44 <HAL_GPIO_Init+0x240>
 8004a1e:	230a      	movs	r3, #10
 8004a20:	e010      	b.n	8004a44 <HAL_GPIO_Init+0x240>
 8004a22:	2308      	movs	r3, #8
 8004a24:	e00e      	b.n	8004a44 <HAL_GPIO_Init+0x240>
 8004a26:	2307      	movs	r3, #7
 8004a28:	e00c      	b.n	8004a44 <HAL_GPIO_Init+0x240>
 8004a2a:	2306      	movs	r3, #6
 8004a2c:	e00a      	b.n	8004a44 <HAL_GPIO_Init+0x240>
 8004a2e:	2305      	movs	r3, #5
 8004a30:	e008      	b.n	8004a44 <HAL_GPIO_Init+0x240>
 8004a32:	2304      	movs	r3, #4
 8004a34:	e006      	b.n	8004a44 <HAL_GPIO_Init+0x240>
 8004a36:	2303      	movs	r3, #3
 8004a38:	e004      	b.n	8004a44 <HAL_GPIO_Init+0x240>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e002      	b.n	8004a44 <HAL_GPIO_Init+0x240>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <HAL_GPIO_Init+0x240>
 8004a42:	2300      	movs	r3, #0
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	f002 0203 	and.w	r2, r2, #3
 8004a4a:	0092      	lsls	r2, r2, #2
 8004a4c:	4093      	lsls	r3, r2
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a54:	4935      	ldr	r1, [pc, #212]	; (8004b2c <HAL_GPIO_Init+0x328>)
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	089b      	lsrs	r3, r3, #2
 8004a5a:	3302      	adds	r3, #2
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a62:	4b3d      	ldr	r3, [pc, #244]	; (8004b58 <HAL_GPIO_Init+0x354>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a86:	4a34      	ldr	r2, [pc, #208]	; (8004b58 <HAL_GPIO_Init+0x354>)
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a8c:	4b32      	ldr	r3, [pc, #200]	; (8004b58 <HAL_GPIO_Init+0x354>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	43db      	mvns	r3, r3
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ab0:	4a29      	ldr	r2, [pc, #164]	; (8004b58 <HAL_GPIO_Init+0x354>)
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ab6:	4b28      	ldr	r3, [pc, #160]	; (8004b58 <HAL_GPIO_Init+0x354>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ada:	4a1f      	ldr	r2, [pc, #124]	; (8004b58 <HAL_GPIO_Init+0x354>)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <HAL_GPIO_Init+0x354>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4013      	ands	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b04:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <HAL_GPIO_Init+0x354>)
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2b0f      	cmp	r3, #15
 8004b14:	f67f ae86 	bls.w	8004824 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	3724      	adds	r7, #36	; 0x24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40013800 	.word	0x40013800
 8004b30:	40020000 	.word	0x40020000
 8004b34:	40020400 	.word	0x40020400
 8004b38:	40020800 	.word	0x40020800
 8004b3c:	40020c00 	.word	0x40020c00
 8004b40:	40021000 	.word	0x40021000
 8004b44:	40021400 	.word	0x40021400
 8004b48:	40021800 	.word	0x40021800
 8004b4c:	40021c00 	.word	0x40021c00
 8004b50:	40022000 	.word	0x40022000
 8004b54:	40022400 	.word	0x40022400
 8004b58:	40013c00 	.word	0x40013c00

08004b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	887b      	ldrh	r3, [r7, #2]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
 8004b78:	e001      	b.n	8004b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	807b      	strh	r3, [r7, #2]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b9c:	787b      	ldrb	r3, [r7, #1]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ba2:	887a      	ldrh	r2, [r7, #2]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ba8:	e003      	b.n	8004bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004baa:	887b      	ldrh	r3, [r7, #2]
 8004bac:	041a      	lsls	r2, r3, #16
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	619a      	str	r2, [r3, #24]
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bd0:	887a      	ldrh	r2, [r7, #2]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	041a      	lsls	r2, r3, #16
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	43d9      	mvns	r1, r3
 8004bdc:	887b      	ldrh	r3, [r7, #2]
 8004bde:	400b      	ands	r3, r1
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	619a      	str	r2, [r3, #24]
}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bfe:	4b23      	ldr	r3, [pc, #140]	; (8004c8c <HAL_PWREx_EnableOverDrive+0x98>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <HAL_PWREx_EnableOverDrive+0x98>)
 8004c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c08:	6413      	str	r3, [r2, #64]	; 0x40
 8004c0a:	4b20      	ldr	r3, [pc, #128]	; (8004c8c <HAL_PWREx_EnableOverDrive+0x98>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004c16:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1d      	ldr	r2, [pc, #116]	; (8004c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c20:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c22:	f7fe f913 	bl	8002e4c <HAL_GetTick>
 8004c26:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c28:	e009      	b.n	8004c3e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c2a:	f7fe f90f 	bl	8002e4c <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c38:	d901      	bls.n	8004c3e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e022      	b.n	8004c84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c3e:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4a:	d1ee      	bne.n	8004c2a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0f      	ldr	r2, [pc, #60]	; (8004c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c58:	f7fe f8f8 	bl	8002e4c <HAL_GetTick>
 8004c5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c5e:	e009      	b.n	8004c74 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c60:	f7fe f8f4 	bl	8002e4c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c6e:	d901      	bls.n	8004c74 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e007      	b.n	8004c84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c74:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c80:	d1ee      	bne.n	8004c60 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40007000 	.word	0x40007000

08004c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e29b      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8087 	beq.w	8004dc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cb8:	4b96      	ldr	r3, [pc, #600]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d00c      	beq.n	8004cde <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc4:	4b93      	ldr	r3, [pc, #588]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d112      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x62>
 8004cd0:	4b90      	ldr	r3, [pc, #576]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cdc:	d10b      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cde:	4b8d      	ldr	r3, [pc, #564]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d06c      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x130>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d168      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e275      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCC_OscConfig+0x7a>
 8004d00:	4b84      	ldr	r3, [pc, #528]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a83      	ldr	r2, [pc, #524]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	e02e      	b.n	8004d6c <HAL_RCC_OscConfig+0xd8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x9c>
 8004d16:	4b7f      	ldr	r3, [pc, #508]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a7e      	ldr	r2, [pc, #504]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4b7c      	ldr	r3, [pc, #496]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a7b      	ldr	r2, [pc, #492]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e01d      	b.n	8004d6c <HAL_RCC_OscConfig+0xd8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0xc0>
 8004d3a:	4b76      	ldr	r3, [pc, #472]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a75      	ldr	r2, [pc, #468]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	4b73      	ldr	r3, [pc, #460]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a72      	ldr	r2, [pc, #456]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e00b      	b.n	8004d6c <HAL_RCC_OscConfig+0xd8>
 8004d54:	4b6f      	ldr	r3, [pc, #444]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a6e      	ldr	r2, [pc, #440]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4b6c      	ldr	r3, [pc, #432]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a6b      	ldr	r2, [pc, #428]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d013      	beq.n	8004d9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fe f86a 	bl	8002e4c <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d7c:	f7fe f866 	bl	8002e4c <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	; 0x64
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e229      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8e:	4b61      	ldr	r3, [pc, #388]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f0      	beq.n	8004d7c <HAL_RCC_OscConfig+0xe8>
 8004d9a:	e014      	b.n	8004dc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fe f856 	bl	8002e4c <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da4:	f7fe f852 	bl	8002e4c <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	; 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e215      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004db6:	4b57      	ldr	r3, [pc, #348]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x110>
 8004dc2:	e000      	b.n	8004dc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d069      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dd2:	4b50      	ldr	r3, [pc, #320]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00b      	beq.n	8004df6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dde:	4b4d      	ldr	r3, [pc, #308]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 030c 	and.w	r3, r3, #12
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d11c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x190>
 8004dea:	4b4a      	ldr	r3, [pc, #296]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d116      	bne.n	8004e24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df6:	4b47      	ldr	r3, [pc, #284]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_RCC_OscConfig+0x17a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d001      	beq.n	8004e0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e1e9      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0e:	4b41      	ldr	r3, [pc, #260]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	493d      	ldr	r1, [pc, #244]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e22:	e040      	b.n	8004ea6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d023      	beq.n	8004e74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e2c:	4b39      	ldr	r3, [pc, #228]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a38      	ldr	r2, [pc, #224]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e38:	f7fe f808 	bl	8002e4c <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e40:	f7fe f804 	bl	8002e4c <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e1c7      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e52:	4b30      	ldr	r3, [pc, #192]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0f0      	beq.n	8004e40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5e:	4b2d      	ldr	r3, [pc, #180]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4929      	ldr	r1, [pc, #164]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	600b      	str	r3, [r1, #0]
 8004e72:	e018      	b.n	8004ea6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e74:	4b27      	ldr	r3, [pc, #156]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a26      	ldr	r2, [pc, #152]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004e7a:	f023 0301 	bic.w	r3, r3, #1
 8004e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fd ffe4 	bl	8002e4c <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e88:	f7fd ffe0 	bl	8002e4c <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e1a3      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9a:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d038      	beq.n	8004f24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d019      	beq.n	8004eee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eba:	4b16      	ldr	r3, [pc, #88]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ebe:	4a15      	ldr	r2, [pc, #84]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec6:	f7fd ffc1 	bl	8002e4c <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ece:	f7fd ffbd 	bl	8002e4c <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e180      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCC_OscConfig+0x23a>
 8004eec:	e01a      	b.n	8004f24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eee:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef2:	4a08      	ldr	r2, [pc, #32]	; (8004f14 <HAL_RCC_OscConfig+0x280>)
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efa:	f7fd ffa7 	bl	8002e4c <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f00:	e00a      	b.n	8004f18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f02:	f7fd ffa3 	bl	8002e4c <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d903      	bls.n	8004f18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e166      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
 8004f14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f18:	4b92      	ldr	r3, [pc, #584]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1ee      	bne.n	8004f02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 80a4 	beq.w	800507a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f32:	4b8c      	ldr	r3, [pc, #560]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10d      	bne.n	8004f5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f3e:	4b89      	ldr	r3, [pc, #548]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	4a88      	ldr	r2, [pc, #544]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f48:	6413      	str	r3, [r2, #64]	; 0x40
 8004f4a:	4b86      	ldr	r3, [pc, #536]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f52:	60bb      	str	r3, [r7, #8]
 8004f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f56:	2301      	movs	r3, #1
 8004f58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f5a:	4b83      	ldr	r3, [pc, #524]	; (8005168 <HAL_RCC_OscConfig+0x4d4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d118      	bne.n	8004f98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f66:	4b80      	ldr	r3, [pc, #512]	; (8005168 <HAL_RCC_OscConfig+0x4d4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a7f      	ldr	r2, [pc, #508]	; (8005168 <HAL_RCC_OscConfig+0x4d4>)
 8004f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f72:	f7fd ff6b 	bl	8002e4c <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7a:	f7fd ff67 	bl	8002e4c <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b64      	cmp	r3, #100	; 0x64
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e12a      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f8c:	4b76      	ldr	r3, [pc, #472]	; (8005168 <HAL_RCC_OscConfig+0x4d4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d106      	bne.n	8004fae <HAL_RCC_OscConfig+0x31a>
 8004fa0:	4b70      	ldr	r3, [pc, #448]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	4a6f      	ldr	r2, [pc, #444]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	6713      	str	r3, [r2, #112]	; 0x70
 8004fac:	e02d      	b.n	800500a <HAL_RCC_OscConfig+0x376>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10c      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x33c>
 8004fb6:	4b6b      	ldr	r3, [pc, #428]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	4a6a      	ldr	r2, [pc, #424]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc2:	4b68      	ldr	r3, [pc, #416]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	4a67      	ldr	r2, [pc, #412]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004fc8:	f023 0304 	bic.w	r3, r3, #4
 8004fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fce:	e01c      	b.n	800500a <HAL_RCC_OscConfig+0x376>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b05      	cmp	r3, #5
 8004fd6:	d10c      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x35e>
 8004fd8:	4b62      	ldr	r3, [pc, #392]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	4a61      	ldr	r2, [pc, #388]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004fde:	f043 0304 	orr.w	r3, r3, #4
 8004fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe4:	4b5f      	ldr	r3, [pc, #380]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	4a5e      	ldr	r2, [pc, #376]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004fea:	f043 0301 	orr.w	r3, r3, #1
 8004fee:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff0:	e00b      	b.n	800500a <HAL_RCC_OscConfig+0x376>
 8004ff2:	4b5c      	ldr	r3, [pc, #368]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff6:	4a5b      	ldr	r2, [pc, #364]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8004ff8:	f023 0301 	bic.w	r3, r3, #1
 8004ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ffe:	4b59      	ldr	r3, [pc, #356]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	4a58      	ldr	r2, [pc, #352]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8005004:	f023 0304 	bic.w	r3, r3, #4
 8005008:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d015      	beq.n	800503e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005012:	f7fd ff1b 	bl	8002e4c <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005018:	e00a      	b.n	8005030 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501a:	f7fd ff17 	bl	8002e4c <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	f241 3288 	movw	r2, #5000	; 0x1388
 8005028:	4293      	cmp	r3, r2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e0d8      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005030:	4b4c      	ldr	r3, [pc, #304]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0ee      	beq.n	800501a <HAL_RCC_OscConfig+0x386>
 800503c:	e014      	b.n	8005068 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503e:	f7fd ff05 	bl	8002e4c <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005044:	e00a      	b.n	800505c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005046:	f7fd ff01 	bl	8002e4c <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	f241 3288 	movw	r2, #5000	; 0x1388
 8005054:	4293      	cmp	r3, r2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e0c2      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800505c:	4b41      	ldr	r3, [pc, #260]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1ee      	bne.n	8005046 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d105      	bne.n	800507a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800506e:	4b3d      	ldr	r3, [pc, #244]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	4a3c      	ldr	r2, [pc, #240]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8005074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005078:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80ae 	beq.w	80051e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005084:	4b37      	ldr	r3, [pc, #220]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 030c 	and.w	r3, r3, #12
 800508c:	2b08      	cmp	r3, #8
 800508e:	d06d      	beq.n	800516c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d14b      	bne.n	8005130 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005098:	4b32      	ldr	r3, [pc, #200]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a31      	ldr	r2, [pc, #196]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 800509e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fd fed2 	bl	8002e4c <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fd fece 	bl	8002e4c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e091      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050be:	4b29      	ldr	r3, [pc, #164]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69da      	ldr	r2, [r3, #28]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	019b      	lsls	r3, r3, #6
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	085b      	lsrs	r3, r3, #1
 80050e2:	3b01      	subs	r3, #1
 80050e4:	041b      	lsls	r3, r3, #16
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	061b      	lsls	r3, r3, #24
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	071b      	lsls	r3, r3, #28
 80050f6:	491b      	ldr	r1, [pc, #108]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050fc:	4b19      	ldr	r3, [pc, #100]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a18      	ldr	r2, [pc, #96]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8005102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fd fea0 	bl	8002e4c <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005110:	f7fd fe9c 	bl	8002e4c <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e05f      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005122:	4b10      	ldr	r3, [pc, #64]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0x47c>
 800512e:	e057      	b.n	80051e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005130:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a0b      	ldr	r2, [pc, #44]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8005136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800513a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fd fe86 	bl	8002e4c <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005144:	f7fd fe82 	bl	8002e4c <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e045      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005156:	4b03      	ldr	r3, [pc, #12]	; (8005164 <HAL_RCC_OscConfig+0x4d0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x4b0>
 8005162:	e03d      	b.n	80051e0 <HAL_RCC_OscConfig+0x54c>
 8005164:	40023800 	.word	0x40023800
 8005168:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800516c:	4b1f      	ldr	r3, [pc, #124]	; (80051ec <HAL_RCC_OscConfig+0x558>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d030      	beq.n	80051dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005184:	429a      	cmp	r2, r3
 8005186:	d129      	bne.n	80051dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005192:	429a      	cmp	r2, r3
 8005194:	d122      	bne.n	80051dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800519c:	4013      	ands	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d119      	bne.n	80051dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	3b01      	subs	r3, #1
 80051b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d10f      	bne.n	80051dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d107      	bne.n	80051dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40023800 	.word	0x40023800

080051f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0d0      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005208:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d910      	bls.n	8005238 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005216:	4b67      	ldr	r3, [pc, #412]	; (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 020f 	bic.w	r2, r3, #15
 800521e:	4965      	ldr	r1, [pc, #404]	; (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	4313      	orrs	r3, r2
 8005224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005226:	4b63      	ldr	r3, [pc, #396]	; (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d001      	beq.n	8005238 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0b8      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d020      	beq.n	8005286 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005250:	4b59      	ldr	r3, [pc, #356]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	4a58      	ldr	r2, [pc, #352]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800525a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005268:	4b53      	ldr	r3, [pc, #332]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	4a52      	ldr	r2, [pc, #328]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 800526e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005272:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005274:	4b50      	ldr	r3, [pc, #320]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	494d      	ldr	r1, [pc, #308]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005282:	4313      	orrs	r3, r2
 8005284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d040      	beq.n	8005314 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d107      	bne.n	80052aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529a:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d115      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e07f      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d107      	bne.n	80052c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b2:	4b41      	ldr	r3, [pc, #260]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e073      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c2:	4b3d      	ldr	r3, [pc, #244]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e06b      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052d2:	4b39      	ldr	r3, [pc, #228]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f023 0203 	bic.w	r2, r3, #3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4936      	ldr	r1, [pc, #216]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e4:	f7fd fdb2 	bl	8002e4c <HAL_GetTick>
 80052e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ea:	e00a      	b.n	8005302 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ec:	f7fd fdae 	bl	8002e4c <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e053      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005302:	4b2d      	ldr	r3, [pc, #180]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 020c 	and.w	r2, r3, #12
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	429a      	cmp	r2, r3
 8005312:	d1eb      	bne.n	80052ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005314:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d210      	bcs.n	8005344 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f023 020f 	bic.w	r2, r3, #15
 800532a:	4922      	ldr	r1, [pc, #136]	; (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	4313      	orrs	r3, r2
 8005330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005332:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e032      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4916      	ldr	r1, [pc, #88]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 800535e:	4313      	orrs	r3, r2
 8005360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800536e:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	490e      	ldr	r1, [pc, #56]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 800537e:	4313      	orrs	r3, r2
 8005380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005382:	f000 f821 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8005386:	4602      	mov	r2, r0
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	490a      	ldr	r1, [pc, #40]	; (80053bc <HAL_RCC_ClockConfig+0x1cc>)
 8005394:	5ccb      	ldrb	r3, [r1, r3]
 8005396:	fa22 f303 	lsr.w	r3, r2, r3
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <HAL_RCC_ClockConfig+0x1d0>)
 800539c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <HAL_RCC_ClockConfig+0x1d4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fd fd0e 	bl	8002dc4 <HAL_InitTick>

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40023c00 	.word	0x40023c00
 80053b8:	40023800 	.word	0x40023800
 80053bc:	0800af8c 	.word	0x0800af8c
 80053c0:	20000010 	.word	0x20000010
 80053c4:	20000014 	.word	0x20000014

080053c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	607b      	str	r3, [r7, #4]
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	2300      	movs	r3, #0
 80053da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053e0:	4b67      	ldr	r3, [pc, #412]	; (8005580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 030c 	and.w	r3, r3, #12
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d00d      	beq.n	8005408 <HAL_RCC_GetSysClockFreq+0x40>
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	f200 80bd 	bhi.w	800556c <HAL_RCC_GetSysClockFreq+0x1a4>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_RCC_GetSysClockFreq+0x34>
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d003      	beq.n	8005402 <HAL_RCC_GetSysClockFreq+0x3a>
 80053fa:	e0b7      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053fc:	4b61      	ldr	r3, [pc, #388]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80053fe:	60bb      	str	r3, [r7, #8]
      break;
 8005400:	e0b7      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005402:	4b60      	ldr	r3, [pc, #384]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005404:	60bb      	str	r3, [r7, #8]
      break;
 8005406:	e0b4      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005408:	4b5d      	ldr	r3, [pc, #372]	; (8005580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005410:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005412:	4b5b      	ldr	r3, [pc, #364]	; (8005580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d04d      	beq.n	80054ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800541e:	4b58      	ldr	r3, [pc, #352]	; (8005580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	099b      	lsrs	r3, r3, #6
 8005424:	461a      	mov	r2, r3
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800542e:	f04f 0100 	mov.w	r1, #0
 8005432:	ea02 0800 	and.w	r8, r2, r0
 8005436:	ea03 0901 	and.w	r9, r3, r1
 800543a:	4640      	mov	r0, r8
 800543c:	4649      	mov	r1, r9
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	014b      	lsls	r3, r1, #5
 8005448:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800544c:	0142      	lsls	r2, r0, #5
 800544e:	4610      	mov	r0, r2
 8005450:	4619      	mov	r1, r3
 8005452:	ebb0 0008 	subs.w	r0, r0, r8
 8005456:	eb61 0109 	sbc.w	r1, r1, r9
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	018b      	lsls	r3, r1, #6
 8005464:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005468:	0182      	lsls	r2, r0, #6
 800546a:	1a12      	subs	r2, r2, r0
 800546c:	eb63 0301 	sbc.w	r3, r3, r1
 8005470:	f04f 0000 	mov.w	r0, #0
 8005474:	f04f 0100 	mov.w	r1, #0
 8005478:	00d9      	lsls	r1, r3, #3
 800547a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800547e:	00d0      	lsls	r0, r2, #3
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	eb12 0208 	adds.w	r2, r2, r8
 8005488:	eb43 0309 	adc.w	r3, r3, r9
 800548c:	f04f 0000 	mov.w	r0, #0
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	0299      	lsls	r1, r3, #10
 8005496:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800549a:	0290      	lsls	r0, r2, #10
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4610      	mov	r0, r2
 80054a2:	4619      	mov	r1, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	461a      	mov	r2, r3
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	f7fa ff30 	bl	8000310 <__aeabi_uldivmod>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4613      	mov	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	e04a      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ba:	4b31      	ldr	r3, [pc, #196]	; (8005580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	099b      	lsrs	r3, r3, #6
 80054c0:	461a      	mov	r2, r3
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054ca:	f04f 0100 	mov.w	r1, #0
 80054ce:	ea02 0400 	and.w	r4, r2, r0
 80054d2:	ea03 0501 	and.w	r5, r3, r1
 80054d6:	4620      	mov	r0, r4
 80054d8:	4629      	mov	r1, r5
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	014b      	lsls	r3, r1, #5
 80054e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054e8:	0142      	lsls	r2, r0, #5
 80054ea:	4610      	mov	r0, r2
 80054ec:	4619      	mov	r1, r3
 80054ee:	1b00      	subs	r0, r0, r4
 80054f0:	eb61 0105 	sbc.w	r1, r1, r5
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	018b      	lsls	r3, r1, #6
 80054fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005502:	0182      	lsls	r2, r0, #6
 8005504:	1a12      	subs	r2, r2, r0
 8005506:	eb63 0301 	sbc.w	r3, r3, r1
 800550a:	f04f 0000 	mov.w	r0, #0
 800550e:	f04f 0100 	mov.w	r1, #0
 8005512:	00d9      	lsls	r1, r3, #3
 8005514:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005518:	00d0      	lsls	r0, r2, #3
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	1912      	adds	r2, r2, r4
 8005520:	eb45 0303 	adc.w	r3, r5, r3
 8005524:	f04f 0000 	mov.w	r0, #0
 8005528:	f04f 0100 	mov.w	r1, #0
 800552c:	0299      	lsls	r1, r3, #10
 800552e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005532:	0290      	lsls	r0, r2, #10
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4610      	mov	r0, r2
 800553a:	4619      	mov	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	461a      	mov	r2, r3
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	f7fa fee4 	bl	8000310 <__aeabi_uldivmod>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4613      	mov	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	0c1b      	lsrs	r3, r3, #16
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	3301      	adds	r3, #1
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	fbb2 f3f3 	udiv	r3, r2, r3
 8005568:	60bb      	str	r3, [r7, #8]
      break;
 800556a:	e002      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800556c:	4b05      	ldr	r3, [pc, #20]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800556e:	60bb      	str	r3, [r7, #8]
      break;
 8005570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005572:	68bb      	ldr	r3, [r7, #8]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800557e:	bf00      	nop
 8005580:	40023800 	.word	0x40023800
 8005584:	00f42400 	.word	0x00f42400

08005588 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800558c:	4b03      	ldr	r3, [pc, #12]	; (800559c <HAL_RCC_GetHCLKFreq+0x14>)
 800558e:	681b      	ldr	r3, [r3, #0]
}
 8005590:	4618      	mov	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	20000010 	.word	0x20000010

080055a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055a4:	f7ff fff0 	bl	8005588 <HAL_RCC_GetHCLKFreq>
 80055a8:	4602      	mov	r2, r0
 80055aa:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	0a9b      	lsrs	r3, r3, #10
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	4903      	ldr	r1, [pc, #12]	; (80055c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055b6:	5ccb      	ldrb	r3, [r1, r3]
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055bc:	4618      	mov	r0, r3
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40023800 	.word	0x40023800
 80055c4:	0800af9c 	.word	0x0800af9c

080055c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055cc:	f7ff ffdc 	bl	8005588 <HAL_RCC_GetHCLKFreq>
 80055d0:	4602      	mov	r2, r0
 80055d2:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	0b5b      	lsrs	r3, r3, #13
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	4903      	ldr	r1, [pc, #12]	; (80055ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80055de:	5ccb      	ldrb	r3, [r1, r3]
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40023800 	.word	0x40023800
 80055ec:	0800af9c 	.word	0x0800af9c

080055f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d012      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005618:	4b69      	ldr	r3, [pc, #420]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	4a68      	ldr	r2, [pc, #416]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005622:	6093      	str	r3, [r2, #8]
 8005624:	4b66      	ldr	r3, [pc, #408]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562c:	4964      	ldr	r1, [pc, #400]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800562e:	4313      	orrs	r3, r2
 8005630:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800563a:	2301      	movs	r3, #1
 800563c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d017      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800564a:	4b5d      	ldr	r3, [pc, #372]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005650:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005658:	4959      	ldr	r1, [pc, #356]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005668:	d101      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800566a:	2301      	movs	r3, #1
 800566c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005676:	2301      	movs	r3, #1
 8005678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d017      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005686:	4b4e      	ldr	r3, [pc, #312]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800568c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	494a      	ldr	r1, [pc, #296]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a4:	d101      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80056a6:	2301      	movs	r3, #1
 80056a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80056c2:	2301      	movs	r3, #1
 80056c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 808b 	beq.w	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056d4:	4b3a      	ldr	r3, [pc, #232]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	4a39      	ldr	r2, [pc, #228]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056de:	6413      	str	r3, [r2, #64]	; 0x40
 80056e0:	4b37      	ldr	r3, [pc, #220]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056ec:	4b35      	ldr	r3, [pc, #212]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a34      	ldr	r2, [pc, #208]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f8:	f7fd fba8 	bl	8002e4c <HAL_GetTick>
 80056fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005700:	f7fd fba4 	bl	8002e4c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	; 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e38f      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005712:	4b2c      	ldr	r3, [pc, #176]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800571e:	4b28      	ldr	r3, [pc, #160]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005726:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d035      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	429a      	cmp	r2, r3
 800573a:	d02e      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800573c:	4b20      	ldr	r3, [pc, #128]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005744:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005746:	4b1e      	ldr	r3, [pc, #120]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574a:	4a1d      	ldr	r2, [pc, #116]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005750:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005752:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	4a1a      	ldr	r2, [pc, #104]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800575c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800575e:	4a18      	ldr	r2, [pc, #96]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005764:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b01      	cmp	r3, #1
 800576e:	d114      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005770:	f7fd fb6c 	bl	8002e4c <HAL_GetTick>
 8005774:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005776:	e00a      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005778:	f7fd fb68 	bl	8002e4c <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	f241 3288 	movw	r2, #5000	; 0x1388
 8005786:	4293      	cmp	r3, r2
 8005788:	d901      	bls.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e351      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0ee      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a6:	d111      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057b6:	400b      	ands	r3, r1
 80057b8:	4901      	ldr	r1, [pc, #4]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	608b      	str	r3, [r1, #8]
 80057be:	e00b      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80057c0:	40023800 	.word	0x40023800
 80057c4:	40007000 	.word	0x40007000
 80057c8:	0ffffcff 	.word	0x0ffffcff
 80057cc:	4bb3      	ldr	r3, [pc, #716]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4ab2      	ldr	r2, [pc, #712]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057d6:	6093      	str	r3, [r2, #8]
 80057d8:	4bb0      	ldr	r3, [pc, #704]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e4:	49ad      	ldr	r1, [pc, #692]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0310 	and.w	r3, r3, #16
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d010      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057f6:	4ba9      	ldr	r3, [pc, #676]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057fc:	4aa7      	ldr	r2, [pc, #668]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005802:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005806:	4ba5      	ldr	r3, [pc, #660]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005808:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	49a2      	ldr	r1, [pc, #648]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005824:	4b9d      	ldr	r3, [pc, #628]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005832:	499a      	ldr	r1, [pc, #616]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005846:	4b95      	ldr	r3, [pc, #596]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005854:	4991      	ldr	r1, [pc, #580]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005868:	4b8c      	ldr	r3, [pc, #560]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005876:	4989      	ldr	r1, [pc, #548]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800588a:	4b84      	ldr	r3, [pc, #528]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005890:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005898:	4980      	ldr	r1, [pc, #512]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058ac:	4b7b      	ldr	r3, [pc, #492]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b2:	f023 0203 	bic.w	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ba:	4978      	ldr	r1, [pc, #480]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058ce:	4b73      	ldr	r3, [pc, #460]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	f023 020c 	bic.w	r2, r3, #12
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058dc:	496f      	ldr	r1, [pc, #444]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058f0:	4b6a      	ldr	r3, [pc, #424]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	4967      	ldr	r1, [pc, #412]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005912:	4b62      	ldr	r3, [pc, #392]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005920:	495e      	ldr	r1, [pc, #376]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005934:	4b59      	ldr	r3, [pc, #356]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005942:	4956      	ldr	r1, [pc, #344]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005956:	4b51      	ldr	r3, [pc, #324]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	494d      	ldr	r1, [pc, #308]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005978:	4b48      	ldr	r3, [pc, #288]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005986:	4945      	ldr	r1, [pc, #276]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800599a:	4b40      	ldr	r3, [pc, #256]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800599c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a8:	493c      	ldr	r1, [pc, #240]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059bc:	4b37      	ldr	r3, [pc, #220]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ca:	4934      	ldr	r1, [pc, #208]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d011      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059de:	4b2f      	ldr	r3, [pc, #188]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ec:	492b      	ldr	r1, [pc, #172]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059fc:	d101      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80059fe:	2301      	movs	r3, #1
 8005a00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a1e:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2c:	491b      	ldr	r1, [pc, #108]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a40:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a50:	4912      	ldr	r1, [pc, #72]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00b      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a74:	4909      	ldr	r1, [pc, #36]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00f      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a88:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a98:	e002      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005a9a:	bf00      	nop
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	4986      	ldr	r1, [pc, #536]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ab4:	4b81      	ldr	r3, [pc, #516]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac4:	497d      	ldr	r1, [pc, #500]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d006      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80d6 	beq.w	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ae0:	4b76      	ldr	r3, [pc, #472]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a75      	ldr	r2, [pc, #468]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aec:	f7fd f9ae 	bl	8002e4c <HAL_GetTick>
 8005af0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005af4:	f7fd f9aa 	bl	8002e4c <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b64      	cmp	r3, #100	; 0x64
 8005b00:	d901      	bls.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e195      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b06:	4b6d      	ldr	r3, [pc, #436]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f0      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d021      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d11d      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b26:	4b65      	ldr	r3, [pc, #404]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2c:	0c1b      	lsrs	r3, r3, #16
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b34:	4b61      	ldr	r3, [pc, #388]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3a:	0e1b      	lsrs	r3, r3, #24
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	019a      	lsls	r2, r3, #6
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	061b      	lsls	r3, r3, #24
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	071b      	lsls	r3, r3, #28
 8005b5a:	4958      	ldr	r1, [pc, #352]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d02e      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b8c:	d129      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b8e:	4b4b      	ldr	r3, [pc, #300]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b94:	0c1b      	lsrs	r3, r3, #16
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b9c:	4b47      	ldr	r3, [pc, #284]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba2:	0f1b      	lsrs	r3, r3, #28
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	019a      	lsls	r2, r3, #6
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	061b      	lsls	r3, r3, #24
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	071b      	lsls	r3, r3, #28
 8005bc2:	493e      	ldr	r1, [pc, #248]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bca:	4b3c      	ldr	r3, [pc, #240]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd0:	f023 021f 	bic.w	r2, r3, #31
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	4938      	ldr	r1, [pc, #224]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01d      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005bee:	4b33      	ldr	r3, [pc, #204]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf4:	0e1b      	lsrs	r3, r3, #24
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bfc:	4b2f      	ldr	r3, [pc, #188]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c02:	0f1b      	lsrs	r3, r3, #28
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	019a      	lsls	r2, r3, #6
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	041b      	lsls	r3, r3, #16
 8005c16:	431a      	orrs	r2, r3
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	061b      	lsls	r3, r3, #24
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	071b      	lsls	r3, r3, #28
 8005c22:	4926      	ldr	r1, [pc, #152]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d011      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	019a      	lsls	r2, r3, #6
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	061b      	lsls	r3, r3, #24
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	071b      	lsls	r3, r3, #28
 8005c52:	491a      	ldr	r1, [pc, #104]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c5a:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a17      	ldr	r2, [pc, #92]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c66:	f7fd f8f1 	bl	8002e4c <HAL_GetTick>
 8005c6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c6e:	f7fd f8ed 	bl	8002e4c <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b64      	cmp	r3, #100	; 0x64
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e0d8      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c80:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f0      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	f040 80ce 	bne.w	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c94:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a08      	ldr	r2, [pc, #32]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca0:	f7fd f8d4 	bl	8002e4c <HAL_GetTick>
 8005ca4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ca6:	e00b      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ca8:	f7fd f8d0 	bl	8002e4c <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b64      	cmp	r3, #100	; 0x64
 8005cb4:	d904      	bls.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e0bb      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005cba:	bf00      	nop
 8005cbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cc0:	4b5e      	ldr	r3, [pc, #376]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ccc:	d0ec      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d02e      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d12a      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005cf6:	4b51      	ldr	r3, [pc, #324]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d04:	4b4d      	ldr	r3, [pc, #308]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0a:	0f1b      	lsrs	r3, r3, #28
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	019a      	lsls	r2, r3, #6
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	061b      	lsls	r3, r3, #24
 8005d24:	431a      	orrs	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	071b      	lsls	r3, r3, #28
 8005d2a:	4944      	ldr	r1, [pc, #272]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d32:	4b42      	ldr	r3, [pc, #264]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	3b01      	subs	r3, #1
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	493d      	ldr	r1, [pc, #244]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d022      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d60:	d11d      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d62:	4b36      	ldr	r3, [pc, #216]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d68:	0e1b      	lsrs	r3, r3, #24
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d70:	4b32      	ldr	r3, [pc, #200]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d76:	0f1b      	lsrs	r3, r3, #28
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	019a      	lsls	r2, r3, #6
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	041b      	lsls	r3, r3, #16
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	061b      	lsls	r3, r3, #24
 8005d90:	431a      	orrs	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	071b      	lsls	r3, r3, #28
 8005d96:	4929      	ldr	r1, [pc, #164]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d028      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005daa:	4b24      	ldr	r3, [pc, #144]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	0e1b      	lsrs	r3, r3, #24
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005db8:	4b20      	ldr	r3, [pc, #128]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbe:	0c1b      	lsrs	r3, r3, #16
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	019a      	lsls	r2, r3, #6
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	041b      	lsls	r3, r3, #16
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	061b      	lsls	r3, r3, #24
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	071b      	lsls	r3, r3, #28
 8005dde:	4917      	ldr	r1, [pc, #92]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005de6:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	4911      	ldr	r1, [pc, #68]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a0e      	ldr	r2, [pc, #56]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e08:	f7fd f820 	bl	8002e4c <HAL_GetTick>
 8005e0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e10:	f7fd f81c 	bl	8002e4c <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b64      	cmp	r3, #100	; 0x64
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e007      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2e:	d1ef      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3720      	adds	r7, #32
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40023800 	.word	0x40023800

08005e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e049      	b.n	8005ee6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fc fcb2 	bl	80027d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f000 fb68 	bl	8006554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d001      	beq.n	8005f08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e04c      	b.n	8005fa2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a26      	ldr	r2, [pc, #152]	; (8005fb0 <HAL_TIM_Base_Start+0xc0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d022      	beq.n	8005f60 <HAL_TIM_Base_Start+0x70>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f22:	d01d      	beq.n	8005f60 <HAL_TIM_Base_Start+0x70>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a22      	ldr	r2, [pc, #136]	; (8005fb4 <HAL_TIM_Base_Start+0xc4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d018      	beq.n	8005f60 <HAL_TIM_Base_Start+0x70>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a21      	ldr	r2, [pc, #132]	; (8005fb8 <HAL_TIM_Base_Start+0xc8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d013      	beq.n	8005f60 <HAL_TIM_Base_Start+0x70>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1f      	ldr	r2, [pc, #124]	; (8005fbc <HAL_TIM_Base_Start+0xcc>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d00e      	beq.n	8005f60 <HAL_TIM_Base_Start+0x70>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a1e      	ldr	r2, [pc, #120]	; (8005fc0 <HAL_TIM_Base_Start+0xd0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d009      	beq.n	8005f60 <HAL_TIM_Base_Start+0x70>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1c      	ldr	r2, [pc, #112]	; (8005fc4 <HAL_TIM_Base_Start+0xd4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d004      	beq.n	8005f60 <HAL_TIM_Base_Start+0x70>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a1b      	ldr	r2, [pc, #108]	; (8005fc8 <HAL_TIM_Base_Start+0xd8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d115      	bne.n	8005f8c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	4b19      	ldr	r3, [pc, #100]	; (8005fcc <HAL_TIM_Base_Start+0xdc>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b06      	cmp	r3, #6
 8005f70:	d015      	beq.n	8005f9e <HAL_TIM_Base_Start+0xae>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f78:	d011      	beq.n	8005f9e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0201 	orr.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f8a:	e008      	b.n	8005f9e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0201 	orr.w	r2, r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	e000      	b.n	8005fa0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40010000 	.word	0x40010000
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800
 8005fbc:	40000c00 	.word	0x40000c00
 8005fc0:	40010400 	.word	0x40010400
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40001800 	.word	0x40001800
 8005fcc:	00010007 	.word	0x00010007

08005fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d001      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e054      	b.n	8006092 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a26      	ldr	r2, [pc, #152]	; (80060a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d022      	beq.n	8006050 <HAL_TIM_Base_Start_IT+0x80>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006012:	d01d      	beq.n	8006050 <HAL_TIM_Base_Start_IT+0x80>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a22      	ldr	r2, [pc, #136]	; (80060a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d018      	beq.n	8006050 <HAL_TIM_Base_Start_IT+0x80>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d013      	beq.n	8006050 <HAL_TIM_Base_Start_IT+0x80>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a1f      	ldr	r2, [pc, #124]	; (80060ac <HAL_TIM_Base_Start_IT+0xdc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00e      	beq.n	8006050 <HAL_TIM_Base_Start_IT+0x80>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1e      	ldr	r2, [pc, #120]	; (80060b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d009      	beq.n	8006050 <HAL_TIM_Base_Start_IT+0x80>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1c      	ldr	r2, [pc, #112]	; (80060b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d004      	beq.n	8006050 <HAL_TIM_Base_Start_IT+0x80>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1b      	ldr	r2, [pc, #108]	; (80060b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d115      	bne.n	800607c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	4b19      	ldr	r3, [pc, #100]	; (80060bc <HAL_TIM_Base_Start_IT+0xec>)
 8006058:	4013      	ands	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b06      	cmp	r3, #6
 8006060:	d015      	beq.n	800608e <HAL_TIM_Base_Start_IT+0xbe>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006068:	d011      	beq.n	800608e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f042 0201 	orr.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800607a:	e008      	b.n	800608e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	e000      	b.n	8006090 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40000800 	.word	0x40000800
 80060ac:	40000c00 	.word	0x40000c00
 80060b0:	40010400 	.word	0x40010400
 80060b4:	40014000 	.word	0x40014000
 80060b8:	40001800 	.word	0x40001800
 80060bc:	00010007 	.word	0x00010007

080060c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0201 	bic.w	r2, r2, #1
 80060d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6a1a      	ldr	r2, [r3, #32]
 80060de:	f241 1311 	movw	r3, #4369	; 0x1111
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10f      	bne.n	8006108 <HAL_TIM_Base_Stop_IT+0x48>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6a1a      	ldr	r2, [r3, #32]
 80060ee:	f240 4344 	movw	r3, #1092	; 0x444
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d107      	bne.n	8006108 <HAL_TIM_Base_Stop_IT+0x48>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0201 	bic.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b02      	cmp	r3, #2
 8006132:	d122      	bne.n	800617a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d11b      	bne.n	800617a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f06f 0202 	mvn.w	r2, #2
 800614a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	f003 0303 	and.w	r3, r3, #3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f9d9 	bl	8006518 <HAL_TIM_IC_CaptureCallback>
 8006166:	e005      	b.n	8006174 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f9cb 	bl	8006504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f9dc 	bl	800652c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b04      	cmp	r3, #4
 8006186:	d122      	bne.n	80061ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b04      	cmp	r3, #4
 8006194:	d11b      	bne.n	80061ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f06f 0204 	mvn.w	r2, #4
 800619e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f9af 	bl	8006518 <HAL_TIM_IC_CaptureCallback>
 80061ba:	e005      	b.n	80061c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f9a1 	bl	8006504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f9b2 	bl	800652c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d122      	bne.n	8006222 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d11b      	bne.n	8006222 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f06f 0208 	mvn.w	r2, #8
 80061f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2204      	movs	r2, #4
 80061f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	f003 0303 	and.w	r3, r3, #3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f985 	bl	8006518 <HAL_TIM_IC_CaptureCallback>
 800620e:	e005      	b.n	800621c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f977 	bl	8006504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f988 	bl	800652c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	2b10      	cmp	r3, #16
 800622e:	d122      	bne.n	8006276 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	2b10      	cmp	r3, #16
 800623c:	d11b      	bne.n	8006276 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f06f 0210 	mvn.w	r2, #16
 8006246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2208      	movs	r2, #8
 800624c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f95b 	bl	8006518 <HAL_TIM_IC_CaptureCallback>
 8006262:	e005      	b.n	8006270 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f94d 	bl	8006504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f95e 	bl	800652c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b01      	cmp	r3, #1
 8006282:	d10e      	bne.n	80062a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b01      	cmp	r3, #1
 8006290:	d107      	bne.n	80062a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f06f 0201 	mvn.w	r2, #1
 800629a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f927 	bl	80064f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	d10e      	bne.n	80062ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d107      	bne.n	80062ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fb15 	bl	80068f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062dc:	d10e      	bne.n	80062fc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e8:	2b80      	cmp	r3, #128	; 0x80
 80062ea:	d107      	bne.n	80062fc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fb08 	bl	800690c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d10e      	bne.n	8006328 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d107      	bne.n	8006328 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f90c 	bl	8006540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b20      	cmp	r3, #32
 8006334:	d10e      	bne.n	8006354 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b20      	cmp	r3, #32
 8006342:	d107      	bne.n	8006354 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0220 	mvn.w	r2, #32
 800634c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fac8 	bl	80068e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_TIM_ConfigClockSource+0x1c>
 8006374:	2302      	movs	r3, #2
 8006376:	e0b4      	b.n	80064e2 <HAL_TIM_ConfigClockSource+0x186>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	4b56      	ldr	r3, [pc, #344]	; (80064ec <HAL_TIM_ConfigClockSource+0x190>)
 8006394:	4013      	ands	r3, r2
 8006396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800639e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b0:	d03e      	beq.n	8006430 <HAL_TIM_ConfigClockSource+0xd4>
 80063b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b6:	f200 8087 	bhi.w	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063be:	f000 8086 	beq.w	80064ce <HAL_TIM_ConfigClockSource+0x172>
 80063c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c6:	d87f      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063c8:	2b70      	cmp	r3, #112	; 0x70
 80063ca:	d01a      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0xa6>
 80063cc:	2b70      	cmp	r3, #112	; 0x70
 80063ce:	d87b      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063d0:	2b60      	cmp	r3, #96	; 0x60
 80063d2:	d050      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0x11a>
 80063d4:	2b60      	cmp	r3, #96	; 0x60
 80063d6:	d877      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063d8:	2b50      	cmp	r3, #80	; 0x50
 80063da:	d03c      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0xfa>
 80063dc:	2b50      	cmp	r3, #80	; 0x50
 80063de:	d873      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063e0:	2b40      	cmp	r3, #64	; 0x40
 80063e2:	d058      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x13a>
 80063e4:	2b40      	cmp	r3, #64	; 0x40
 80063e6:	d86f      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063e8:	2b30      	cmp	r3, #48	; 0x30
 80063ea:	d064      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x15a>
 80063ec:	2b30      	cmp	r3, #48	; 0x30
 80063ee:	d86b      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d060      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x15a>
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d867      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d05c      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x15a>
 80063fc:	2b10      	cmp	r3, #16
 80063fe:	d05a      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x15a>
 8006400:	e062      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6899      	ldr	r1, [r3, #8]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f000 f9b9 	bl	8006788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006424:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	609a      	str	r2, [r3, #8]
      break;
 800642e:	e04f      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6818      	ldr	r0, [r3, #0]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	6899      	ldr	r1, [r3, #8]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f000 f9a2 	bl	8006788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006452:	609a      	str	r2, [r3, #8]
      break;
 8006454:	e03c      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6859      	ldr	r1, [r3, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	461a      	mov	r2, r3
 8006464:	f000 f916 	bl	8006694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2150      	movs	r1, #80	; 0x50
 800646e:	4618      	mov	r0, r3
 8006470:	f000 f96f 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 8006474:	e02c      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6859      	ldr	r1, [r3, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	461a      	mov	r2, r3
 8006484:	f000 f935 	bl	80066f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2160      	movs	r1, #96	; 0x60
 800648e:	4618      	mov	r0, r3
 8006490:	f000 f95f 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 8006494:	e01c      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	6859      	ldr	r1, [r3, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	461a      	mov	r2, r3
 80064a4:	f000 f8f6 	bl	8006694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2140      	movs	r1, #64	; 0x40
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 f94f 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 80064b4:	e00c      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4619      	mov	r1, r3
 80064c0:	4610      	mov	r0, r2
 80064c2:	f000 f946 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 80064c6:	e003      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	73fb      	strb	r3, [r7, #15]
      break;
 80064cc:	e000      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	fffeff88 	.word	0xfffeff88

080064f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a40      	ldr	r2, [pc, #256]	; (8006668 <TIM_Base_SetConfig+0x114>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d013      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006572:	d00f      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a3d      	ldr	r2, [pc, #244]	; (800666c <TIM_Base_SetConfig+0x118>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00b      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a3c      	ldr	r2, [pc, #240]	; (8006670 <TIM_Base_SetConfig+0x11c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d007      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a3b      	ldr	r2, [pc, #236]	; (8006674 <TIM_Base_SetConfig+0x120>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d003      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a3a      	ldr	r2, [pc, #232]	; (8006678 <TIM_Base_SetConfig+0x124>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d108      	bne.n	80065a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a2f      	ldr	r2, [pc, #188]	; (8006668 <TIM_Base_SetConfig+0x114>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d02b      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b4:	d027      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2c      	ldr	r2, [pc, #176]	; (800666c <TIM_Base_SetConfig+0x118>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d023      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a2b      	ldr	r2, [pc, #172]	; (8006670 <TIM_Base_SetConfig+0x11c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01f      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a2a      	ldr	r2, [pc, #168]	; (8006674 <TIM_Base_SetConfig+0x120>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d01b      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a29      	ldr	r2, [pc, #164]	; (8006678 <TIM_Base_SetConfig+0x124>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d017      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a28      	ldr	r2, [pc, #160]	; (800667c <TIM_Base_SetConfig+0x128>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d013      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a27      	ldr	r2, [pc, #156]	; (8006680 <TIM_Base_SetConfig+0x12c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00f      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a26      	ldr	r2, [pc, #152]	; (8006684 <TIM_Base_SetConfig+0x130>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00b      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a25      	ldr	r2, [pc, #148]	; (8006688 <TIM_Base_SetConfig+0x134>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d007      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a24      	ldr	r2, [pc, #144]	; (800668c <TIM_Base_SetConfig+0x138>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d003      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a23      	ldr	r2, [pc, #140]	; (8006690 <TIM_Base_SetConfig+0x13c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d108      	bne.n	8006618 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800660c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a0a      	ldr	r2, [pc, #40]	; (8006668 <TIM_Base_SetConfig+0x114>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d003      	beq.n	800664c <TIM_Base_SetConfig+0xf8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a0c      	ldr	r2, [pc, #48]	; (8006678 <TIM_Base_SetConfig+0x124>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d103      	bne.n	8006654 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	691a      	ldr	r2, [r3, #16]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	615a      	str	r2, [r3, #20]
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40010000 	.word	0x40010000
 800666c:	40000400 	.word	0x40000400
 8006670:	40000800 	.word	0x40000800
 8006674:	40000c00 	.word	0x40000c00
 8006678:	40010400 	.word	0x40010400
 800667c:	40014000 	.word	0x40014000
 8006680:	40014400 	.word	0x40014400
 8006684:	40014800 	.word	0x40014800
 8006688:	40001800 	.word	0x40001800
 800668c:	40001c00 	.word	0x40001c00
 8006690:	40002000 	.word	0x40002000

08006694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f023 0201 	bic.w	r2, r3, #1
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f023 030a 	bic.w	r3, r3, #10
 80066d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b087      	sub	sp, #28
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f023 0210 	bic.w	r2, r3, #16
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800671c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	031b      	lsls	r3, r3, #12
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800672e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	f043 0307 	orr.w	r3, r3, #7
 8006774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	609a      	str	r2, [r3, #8]
}
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	021a      	lsls	r2, r3, #8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	431a      	orrs	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	609a      	str	r2, [r3, #8]
}
 80067bc:	bf00      	nop
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067dc:	2302      	movs	r3, #2
 80067de:	e06d      	b.n	80068bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a30      	ldr	r2, [pc, #192]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a2f      	ldr	r2, [pc, #188]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d108      	bne.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800681a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a20      	ldr	r2, [pc, #128]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d022      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006852:	d01d      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1d      	ldr	r2, [pc, #116]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d018      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1a      	ldr	r2, [pc, #104]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00e      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a15      	ldr	r2, [pc, #84]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d009      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a16      	ldr	r2, [pc, #88]	; (80068dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d004      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d10c      	bne.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006896:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40010400 	.word	0x40010400
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40001800 	.word	0x40001800

080068e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e040      	b.n	80069b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fc f818 	bl	8002978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2224      	movs	r2, #36	; 0x24
 800694c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fbf2 	bl	8007148 <UART_SetConfig>
 8006964:	4603      	mov	r3, r0
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e022      	b.n	80069b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fe48 	bl	800760c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800698a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800699a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fecf 	bl	8007750 <UART_CheckIdleState>
 80069b2:	4603      	mov	r3, r0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80069bc:	b480      	push	{r7}
 80069be:	b08b      	sub	sp, #44	; 0x2c
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	4613      	mov	r3, r2
 80069c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d156      	bne.n	8006a80 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <HAL_UART_Transmit_IT+0x22>
 80069d8:	88fb      	ldrh	r3, [r7, #6]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e04f      	b.n	8006a82 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_UART_Transmit_IT+0x34>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e048      	b.n	8006a82 <HAL_UART_Transmit_IT+0xc6>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	88fa      	ldrh	r2, [r7, #6]
 8006a02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	88fa      	ldrh	r2, [r7, #6]
 8006a0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2221      	movs	r2, #33	; 0x21
 8006a20:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2a:	d107      	bne.n	8006a3c <HAL_UART_Transmit_IT+0x80>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d103      	bne.n	8006a3c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4a16      	ldr	r2, [pc, #88]	; (8006a90 <HAL_UART_Transmit_IT+0xd4>)
 8006a38:	669a      	str	r2, [r3, #104]	; 0x68
 8006a3a:	e002      	b.n	8006a42 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a15      	ldr	r2, [pc, #84]	; (8006a94 <HAL_UART_Transmit_IT+0xd8>)
 8006a40:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	613b      	str	r3, [r7, #16]
   return(result);
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	623b      	str	r3, [r7, #32]
 8006a6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	69f9      	ldr	r1, [r7, #28]
 8006a6e:	6a3a      	ldr	r2, [r7, #32]
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e6      	bne.n	8006a4a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e000      	b.n	8006a82 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
  }
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	372c      	adds	r7, #44	; 0x2c
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	08007ca9 	.word	0x08007ca9
 8006a94:	08007bf3 	.word	0x08007bf3

08006a98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	; 0x28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d13d      	bne.n	8006b2a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <HAL_UART_Receive_IT+0x22>
 8006ab4:	88fb      	ldrh	r3, [r7, #6]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e036      	b.n	8006b2c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_UART_Receive_IT+0x34>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e02f      	b.n	8006b2c <HAL_UART_Receive_IT+0x94>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d018      	beq.n	8006b1a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	613b      	str	r3, [r7, #16]
   return(result);
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	623b      	str	r3, [r7, #32]
 8006b08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	69f9      	ldr	r1, [r7, #28]
 8006b0c:	6a3a      	ldr	r2, [r7, #32]
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e6      	bne.n	8006ae8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b1a:	88fb      	ldrh	r3, [r7, #6]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	68b9      	ldr	r1, [r7, #8]
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 ff23 	bl	800796c <UART_Start_Receive_IT>
 8006b26:	4603      	mov	r3, r0
 8006b28:	e000      	b.n	8006b2c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b2a:	2302      	movs	r3, #2
  }
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3728      	adds	r7, #40	; 0x28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b0ba      	sub	sp, #232	; 0xe8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b62:	4013      	ands	r3, r2
 8006b64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d115      	bne.n	8006b9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00f      	beq.n	8006b9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 82a4 	beq.w	80070da <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	4798      	blx	r3
      }
      return;
 8006b9a:	e29e      	b.n	80070da <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 8117 	beq.w	8006dd4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006bb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006bb6:	4b85      	ldr	r3, [pc, #532]	; (8006dcc <HAL_UART_IRQHandler+0x298>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 810a 	beq.w	8006dd4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d011      	beq.n	8006bf0 <HAL_UART_IRQHandler+0xbc>
 8006bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00b      	beq.n	8006bf0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be6:	f043 0201 	orr.w	r2, r3, #1
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d011      	beq.n	8006c20 <HAL_UART_IRQHandler+0xec>
 8006bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00b      	beq.n	8006c20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c16:	f043 0204 	orr.w	r2, r3, #4
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d011      	beq.n	8006c50 <HAL_UART_IRQHandler+0x11c>
 8006c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2204      	movs	r2, #4
 8006c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c46:	f043 0202 	orr.w	r2, r3, #2
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c54:	f003 0308 	and.w	r3, r3, #8
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d017      	beq.n	8006c8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d105      	bne.n	8006c74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00b      	beq.n	8006c8c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2208      	movs	r2, #8
 8006c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c82:	f043 0208 	orr.w	r2, r3, #8
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d012      	beq.n	8006cbe <HAL_UART_IRQHandler+0x18a>
 8006c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00c      	beq.n	8006cbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb4:	f043 0220 	orr.w	r2, r3, #32
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 820a 	beq.w	80070de <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00d      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d007      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d06:	2b40      	cmp	r3, #64	; 0x40
 8006d08:	d005      	beq.n	8006d16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d04f      	beq.n	8006db6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fef2 	bl	8007b00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d26:	2b40      	cmp	r3, #64	; 0x40
 8006d28:	d141      	bne.n	8006dae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3308      	adds	r3, #8
 8006d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3308      	adds	r3, #8
 8006d52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1d9      	bne.n	8006d2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d013      	beq.n	8006da6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	4a13      	ldr	r2, [pc, #76]	; (8006dd0 <HAL_UART_IRQHandler+0x29c>)
 8006d84:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fd faae 	bl	80042ec <HAL_DMA_Abort_IT>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d017      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006da0:	4610      	mov	r0, r2
 8006da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da4:	e00f      	b.n	8006dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f9ae 	bl	8007108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dac:	e00b      	b.n	8006dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f9aa 	bl	8007108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db4:	e007      	b.n	8006dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f9a6 	bl	8007108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006dc4:	e18b      	b.n	80070de <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc6:	bf00      	nop
    return;
 8006dc8:	e189      	b.n	80070de <HAL_UART_IRQHandler+0x5aa>
 8006dca:	bf00      	nop
 8006dcc:	04000120 	.word	0x04000120
 8006dd0:	08007bc7 	.word	0x08007bc7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	f040 8144 	bne.w	8007066 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de2:	f003 0310 	and.w	r3, r3, #16
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 813d 	beq.w	8007066 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 8136 	beq.w	8007066 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2210      	movs	r2, #16
 8006e00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0c:	2b40      	cmp	r3, #64	; 0x40
 8006e0e:	f040 80b2 	bne.w	8006f76 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 815d 	beq.w	80070e2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e32:	429a      	cmp	r2, r3
 8006e34:	f080 8155 	bcs.w	80070e2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4c:	f000 8085 	beq.w	8006f5a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1da      	bne.n	8006e50 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eac:	f023 0301 	bic.w	r3, r3, #1
 8006eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ebe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ec2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ec6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e1      	bne.n	8006e9a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3308      	adds	r3, #8
 8006edc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006efa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006efc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e3      	bne.n	8006ed6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f2a:	f023 0310 	bic.w	r3, r3, #16
 8006f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f3e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e4      	bne.n	8006f1a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fd f959 	bl	800420c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f8d4 	bl	800711c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f74:	e0b5      	b.n	80070e2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 80a7 	beq.w	80070e6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 80a2 	beq.w	80070e6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e4      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3308      	adds	r3, #8
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	e853 3f00 	ldrex	r3, [r3]
 8006fe6:	623b      	str	r3, [r7, #32]
   return(result);
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	f023 0301 	bic.w	r3, r3, #1
 8006fee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ffc:	633a      	str	r2, [r7, #48]	; 0x30
 8006ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e3      	bne.n	8006fd8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0310 	bic.w	r3, r3, #16
 8007036:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007044:	61fb      	str	r3, [r7, #28]
 8007046:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	69b9      	ldr	r1, [r7, #24]
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	617b      	str	r3, [r7, #20]
   return(result);
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e4      	bne.n	8007022 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007058:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f85c 	bl	800711c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007064:	e03f      	b.n	80070e6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800706a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00e      	beq.n	8007090 <HAL_UART_IRQHandler+0x55c>
 8007072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d008      	beq.n	8007090 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007086:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f853 	bl	8007134 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800708e:	e02d      	b.n	80070ec <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00e      	beq.n	80070ba <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800709c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d008      	beq.n	80070ba <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01c      	beq.n	80070ea <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	4798      	blx	r3
    }
    return;
 80070b8:	e017      	b.n	80070ea <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d012      	beq.n	80070ec <HAL_UART_IRQHandler+0x5b8>
 80070c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00c      	beq.n	80070ec <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fe48 	bl	8007d68 <UART_EndTransmit_IT>
    return;
 80070d8:	e008      	b.n	80070ec <HAL_UART_IRQHandler+0x5b8>
      return;
 80070da:	bf00      	nop
 80070dc:	e006      	b.n	80070ec <HAL_UART_IRQHandler+0x5b8>
    return;
 80070de:	bf00      	nop
 80070e0:	e004      	b.n	80070ec <HAL_UART_IRQHandler+0x5b8>
      return;
 80070e2:	bf00      	nop
 80070e4:	e002      	b.n	80070ec <HAL_UART_IRQHandler+0x5b8>
      return;
 80070e6:	bf00      	nop
 80070e8:	e000      	b.n	80070ec <HAL_UART_IRQHandler+0x5b8>
    return;
 80070ea:	bf00      	nop
  }

}
 80070ec:	37e8      	adds	r7, #232	; 0xe8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop

080070f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	4313      	orrs	r3, r2
 800716a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4ba7      	ldr	r3, [pc, #668]	; (8007410 <UART_SetConfig+0x2c8>)
 8007174:	4013      	ands	r3, r2
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	6979      	ldr	r1, [r7, #20]
 800717c:	430b      	orrs	r3, r1
 800717e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a95      	ldr	r2, [pc, #596]	; (8007414 <UART_SetConfig+0x2cc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d120      	bne.n	8007206 <UART_SetConfig+0xbe>
 80071c4:	4b94      	ldr	r3, [pc, #592]	; (8007418 <UART_SetConfig+0x2d0>)
 80071c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d816      	bhi.n	8007200 <UART_SetConfig+0xb8>
 80071d2:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <UART_SetConfig+0x90>)
 80071d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d8:	080071e9 	.word	0x080071e9
 80071dc:	080071f5 	.word	0x080071f5
 80071e0:	080071ef 	.word	0x080071ef
 80071e4:	080071fb 	.word	0x080071fb
 80071e8:	2301      	movs	r3, #1
 80071ea:	77fb      	strb	r3, [r7, #31]
 80071ec:	e14f      	b.n	800748e <UART_SetConfig+0x346>
 80071ee:	2302      	movs	r3, #2
 80071f0:	77fb      	strb	r3, [r7, #31]
 80071f2:	e14c      	b.n	800748e <UART_SetConfig+0x346>
 80071f4:	2304      	movs	r3, #4
 80071f6:	77fb      	strb	r3, [r7, #31]
 80071f8:	e149      	b.n	800748e <UART_SetConfig+0x346>
 80071fa:	2308      	movs	r3, #8
 80071fc:	77fb      	strb	r3, [r7, #31]
 80071fe:	e146      	b.n	800748e <UART_SetConfig+0x346>
 8007200:	2310      	movs	r3, #16
 8007202:	77fb      	strb	r3, [r7, #31]
 8007204:	e143      	b.n	800748e <UART_SetConfig+0x346>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a84      	ldr	r2, [pc, #528]	; (800741c <UART_SetConfig+0x2d4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d132      	bne.n	8007276 <UART_SetConfig+0x12e>
 8007210:	4b81      	ldr	r3, [pc, #516]	; (8007418 <UART_SetConfig+0x2d0>)
 8007212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007216:	f003 030c 	and.w	r3, r3, #12
 800721a:	2b0c      	cmp	r3, #12
 800721c:	d828      	bhi.n	8007270 <UART_SetConfig+0x128>
 800721e:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <UART_SetConfig+0xdc>)
 8007220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007224:	08007259 	.word	0x08007259
 8007228:	08007271 	.word	0x08007271
 800722c:	08007271 	.word	0x08007271
 8007230:	08007271 	.word	0x08007271
 8007234:	08007265 	.word	0x08007265
 8007238:	08007271 	.word	0x08007271
 800723c:	08007271 	.word	0x08007271
 8007240:	08007271 	.word	0x08007271
 8007244:	0800725f 	.word	0x0800725f
 8007248:	08007271 	.word	0x08007271
 800724c:	08007271 	.word	0x08007271
 8007250:	08007271 	.word	0x08007271
 8007254:	0800726b 	.word	0x0800726b
 8007258:	2300      	movs	r3, #0
 800725a:	77fb      	strb	r3, [r7, #31]
 800725c:	e117      	b.n	800748e <UART_SetConfig+0x346>
 800725e:	2302      	movs	r3, #2
 8007260:	77fb      	strb	r3, [r7, #31]
 8007262:	e114      	b.n	800748e <UART_SetConfig+0x346>
 8007264:	2304      	movs	r3, #4
 8007266:	77fb      	strb	r3, [r7, #31]
 8007268:	e111      	b.n	800748e <UART_SetConfig+0x346>
 800726a:	2308      	movs	r3, #8
 800726c:	77fb      	strb	r3, [r7, #31]
 800726e:	e10e      	b.n	800748e <UART_SetConfig+0x346>
 8007270:	2310      	movs	r3, #16
 8007272:	77fb      	strb	r3, [r7, #31]
 8007274:	e10b      	b.n	800748e <UART_SetConfig+0x346>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a69      	ldr	r2, [pc, #420]	; (8007420 <UART_SetConfig+0x2d8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d120      	bne.n	80072c2 <UART_SetConfig+0x17a>
 8007280:	4b65      	ldr	r3, [pc, #404]	; (8007418 <UART_SetConfig+0x2d0>)
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007286:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800728a:	2b30      	cmp	r3, #48	; 0x30
 800728c:	d013      	beq.n	80072b6 <UART_SetConfig+0x16e>
 800728e:	2b30      	cmp	r3, #48	; 0x30
 8007290:	d814      	bhi.n	80072bc <UART_SetConfig+0x174>
 8007292:	2b20      	cmp	r3, #32
 8007294:	d009      	beq.n	80072aa <UART_SetConfig+0x162>
 8007296:	2b20      	cmp	r3, #32
 8007298:	d810      	bhi.n	80072bc <UART_SetConfig+0x174>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <UART_SetConfig+0x15c>
 800729e:	2b10      	cmp	r3, #16
 80072a0:	d006      	beq.n	80072b0 <UART_SetConfig+0x168>
 80072a2:	e00b      	b.n	80072bc <UART_SetConfig+0x174>
 80072a4:	2300      	movs	r3, #0
 80072a6:	77fb      	strb	r3, [r7, #31]
 80072a8:	e0f1      	b.n	800748e <UART_SetConfig+0x346>
 80072aa:	2302      	movs	r3, #2
 80072ac:	77fb      	strb	r3, [r7, #31]
 80072ae:	e0ee      	b.n	800748e <UART_SetConfig+0x346>
 80072b0:	2304      	movs	r3, #4
 80072b2:	77fb      	strb	r3, [r7, #31]
 80072b4:	e0eb      	b.n	800748e <UART_SetConfig+0x346>
 80072b6:	2308      	movs	r3, #8
 80072b8:	77fb      	strb	r3, [r7, #31]
 80072ba:	e0e8      	b.n	800748e <UART_SetConfig+0x346>
 80072bc:	2310      	movs	r3, #16
 80072be:	77fb      	strb	r3, [r7, #31]
 80072c0:	e0e5      	b.n	800748e <UART_SetConfig+0x346>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a57      	ldr	r2, [pc, #348]	; (8007424 <UART_SetConfig+0x2dc>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d120      	bne.n	800730e <UART_SetConfig+0x1c6>
 80072cc:	4b52      	ldr	r3, [pc, #328]	; (8007418 <UART_SetConfig+0x2d0>)
 80072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072d6:	2bc0      	cmp	r3, #192	; 0xc0
 80072d8:	d013      	beq.n	8007302 <UART_SetConfig+0x1ba>
 80072da:	2bc0      	cmp	r3, #192	; 0xc0
 80072dc:	d814      	bhi.n	8007308 <UART_SetConfig+0x1c0>
 80072de:	2b80      	cmp	r3, #128	; 0x80
 80072e0:	d009      	beq.n	80072f6 <UART_SetConfig+0x1ae>
 80072e2:	2b80      	cmp	r3, #128	; 0x80
 80072e4:	d810      	bhi.n	8007308 <UART_SetConfig+0x1c0>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <UART_SetConfig+0x1a8>
 80072ea:	2b40      	cmp	r3, #64	; 0x40
 80072ec:	d006      	beq.n	80072fc <UART_SetConfig+0x1b4>
 80072ee:	e00b      	b.n	8007308 <UART_SetConfig+0x1c0>
 80072f0:	2300      	movs	r3, #0
 80072f2:	77fb      	strb	r3, [r7, #31]
 80072f4:	e0cb      	b.n	800748e <UART_SetConfig+0x346>
 80072f6:	2302      	movs	r3, #2
 80072f8:	77fb      	strb	r3, [r7, #31]
 80072fa:	e0c8      	b.n	800748e <UART_SetConfig+0x346>
 80072fc:	2304      	movs	r3, #4
 80072fe:	77fb      	strb	r3, [r7, #31]
 8007300:	e0c5      	b.n	800748e <UART_SetConfig+0x346>
 8007302:	2308      	movs	r3, #8
 8007304:	77fb      	strb	r3, [r7, #31]
 8007306:	e0c2      	b.n	800748e <UART_SetConfig+0x346>
 8007308:	2310      	movs	r3, #16
 800730a:	77fb      	strb	r3, [r7, #31]
 800730c:	e0bf      	b.n	800748e <UART_SetConfig+0x346>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a45      	ldr	r2, [pc, #276]	; (8007428 <UART_SetConfig+0x2e0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d125      	bne.n	8007364 <UART_SetConfig+0x21c>
 8007318:	4b3f      	ldr	r3, [pc, #252]	; (8007418 <UART_SetConfig+0x2d0>)
 800731a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007326:	d017      	beq.n	8007358 <UART_SetConfig+0x210>
 8007328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800732c:	d817      	bhi.n	800735e <UART_SetConfig+0x216>
 800732e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007332:	d00b      	beq.n	800734c <UART_SetConfig+0x204>
 8007334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007338:	d811      	bhi.n	800735e <UART_SetConfig+0x216>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <UART_SetConfig+0x1fe>
 800733e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007342:	d006      	beq.n	8007352 <UART_SetConfig+0x20a>
 8007344:	e00b      	b.n	800735e <UART_SetConfig+0x216>
 8007346:	2300      	movs	r3, #0
 8007348:	77fb      	strb	r3, [r7, #31]
 800734a:	e0a0      	b.n	800748e <UART_SetConfig+0x346>
 800734c:	2302      	movs	r3, #2
 800734e:	77fb      	strb	r3, [r7, #31]
 8007350:	e09d      	b.n	800748e <UART_SetConfig+0x346>
 8007352:	2304      	movs	r3, #4
 8007354:	77fb      	strb	r3, [r7, #31]
 8007356:	e09a      	b.n	800748e <UART_SetConfig+0x346>
 8007358:	2308      	movs	r3, #8
 800735a:	77fb      	strb	r3, [r7, #31]
 800735c:	e097      	b.n	800748e <UART_SetConfig+0x346>
 800735e:	2310      	movs	r3, #16
 8007360:	77fb      	strb	r3, [r7, #31]
 8007362:	e094      	b.n	800748e <UART_SetConfig+0x346>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a30      	ldr	r2, [pc, #192]	; (800742c <UART_SetConfig+0x2e4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d125      	bne.n	80073ba <UART_SetConfig+0x272>
 800736e:	4b2a      	ldr	r3, [pc, #168]	; (8007418 <UART_SetConfig+0x2d0>)
 8007370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007374:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007378:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800737c:	d017      	beq.n	80073ae <UART_SetConfig+0x266>
 800737e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007382:	d817      	bhi.n	80073b4 <UART_SetConfig+0x26c>
 8007384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007388:	d00b      	beq.n	80073a2 <UART_SetConfig+0x25a>
 800738a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800738e:	d811      	bhi.n	80073b4 <UART_SetConfig+0x26c>
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <UART_SetConfig+0x254>
 8007394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007398:	d006      	beq.n	80073a8 <UART_SetConfig+0x260>
 800739a:	e00b      	b.n	80073b4 <UART_SetConfig+0x26c>
 800739c:	2301      	movs	r3, #1
 800739e:	77fb      	strb	r3, [r7, #31]
 80073a0:	e075      	b.n	800748e <UART_SetConfig+0x346>
 80073a2:	2302      	movs	r3, #2
 80073a4:	77fb      	strb	r3, [r7, #31]
 80073a6:	e072      	b.n	800748e <UART_SetConfig+0x346>
 80073a8:	2304      	movs	r3, #4
 80073aa:	77fb      	strb	r3, [r7, #31]
 80073ac:	e06f      	b.n	800748e <UART_SetConfig+0x346>
 80073ae:	2308      	movs	r3, #8
 80073b0:	77fb      	strb	r3, [r7, #31]
 80073b2:	e06c      	b.n	800748e <UART_SetConfig+0x346>
 80073b4:	2310      	movs	r3, #16
 80073b6:	77fb      	strb	r3, [r7, #31]
 80073b8:	e069      	b.n	800748e <UART_SetConfig+0x346>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1c      	ldr	r2, [pc, #112]	; (8007430 <UART_SetConfig+0x2e8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d137      	bne.n	8007434 <UART_SetConfig+0x2ec>
 80073c4:	4b14      	ldr	r3, [pc, #80]	; (8007418 <UART_SetConfig+0x2d0>)
 80073c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80073ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073d2:	d017      	beq.n	8007404 <UART_SetConfig+0x2bc>
 80073d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073d8:	d817      	bhi.n	800740a <UART_SetConfig+0x2c2>
 80073da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073de:	d00b      	beq.n	80073f8 <UART_SetConfig+0x2b0>
 80073e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073e4:	d811      	bhi.n	800740a <UART_SetConfig+0x2c2>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <UART_SetConfig+0x2aa>
 80073ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ee:	d006      	beq.n	80073fe <UART_SetConfig+0x2b6>
 80073f0:	e00b      	b.n	800740a <UART_SetConfig+0x2c2>
 80073f2:	2300      	movs	r3, #0
 80073f4:	77fb      	strb	r3, [r7, #31]
 80073f6:	e04a      	b.n	800748e <UART_SetConfig+0x346>
 80073f8:	2302      	movs	r3, #2
 80073fa:	77fb      	strb	r3, [r7, #31]
 80073fc:	e047      	b.n	800748e <UART_SetConfig+0x346>
 80073fe:	2304      	movs	r3, #4
 8007400:	77fb      	strb	r3, [r7, #31]
 8007402:	e044      	b.n	800748e <UART_SetConfig+0x346>
 8007404:	2308      	movs	r3, #8
 8007406:	77fb      	strb	r3, [r7, #31]
 8007408:	e041      	b.n	800748e <UART_SetConfig+0x346>
 800740a:	2310      	movs	r3, #16
 800740c:	77fb      	strb	r3, [r7, #31]
 800740e:	e03e      	b.n	800748e <UART_SetConfig+0x346>
 8007410:	efff69f3 	.word	0xefff69f3
 8007414:	40011000 	.word	0x40011000
 8007418:	40023800 	.word	0x40023800
 800741c:	40004400 	.word	0x40004400
 8007420:	40004800 	.word	0x40004800
 8007424:	40004c00 	.word	0x40004c00
 8007428:	40005000 	.word	0x40005000
 800742c:	40011400 	.word	0x40011400
 8007430:	40007800 	.word	0x40007800
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a71      	ldr	r2, [pc, #452]	; (8007600 <UART_SetConfig+0x4b8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d125      	bne.n	800748a <UART_SetConfig+0x342>
 800743e:	4b71      	ldr	r3, [pc, #452]	; (8007604 <UART_SetConfig+0x4bc>)
 8007440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007444:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007448:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800744c:	d017      	beq.n	800747e <UART_SetConfig+0x336>
 800744e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007452:	d817      	bhi.n	8007484 <UART_SetConfig+0x33c>
 8007454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007458:	d00b      	beq.n	8007472 <UART_SetConfig+0x32a>
 800745a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800745e:	d811      	bhi.n	8007484 <UART_SetConfig+0x33c>
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <UART_SetConfig+0x324>
 8007464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007468:	d006      	beq.n	8007478 <UART_SetConfig+0x330>
 800746a:	e00b      	b.n	8007484 <UART_SetConfig+0x33c>
 800746c:	2300      	movs	r3, #0
 800746e:	77fb      	strb	r3, [r7, #31]
 8007470:	e00d      	b.n	800748e <UART_SetConfig+0x346>
 8007472:	2302      	movs	r3, #2
 8007474:	77fb      	strb	r3, [r7, #31]
 8007476:	e00a      	b.n	800748e <UART_SetConfig+0x346>
 8007478:	2304      	movs	r3, #4
 800747a:	77fb      	strb	r3, [r7, #31]
 800747c:	e007      	b.n	800748e <UART_SetConfig+0x346>
 800747e:	2308      	movs	r3, #8
 8007480:	77fb      	strb	r3, [r7, #31]
 8007482:	e004      	b.n	800748e <UART_SetConfig+0x346>
 8007484:	2310      	movs	r3, #16
 8007486:	77fb      	strb	r3, [r7, #31]
 8007488:	e001      	b.n	800748e <UART_SetConfig+0x346>
 800748a:	2310      	movs	r3, #16
 800748c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007496:	d15a      	bne.n	800754e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007498:	7ffb      	ldrb	r3, [r7, #31]
 800749a:	2b08      	cmp	r3, #8
 800749c:	d827      	bhi.n	80074ee <UART_SetConfig+0x3a6>
 800749e:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <UART_SetConfig+0x35c>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	080074c9 	.word	0x080074c9
 80074a8:	080074d1 	.word	0x080074d1
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	080074ef 	.word	0x080074ef
 80074b4:	080074df 	.word	0x080074df
 80074b8:	080074ef 	.word	0x080074ef
 80074bc:	080074ef 	.word	0x080074ef
 80074c0:	080074ef 	.word	0x080074ef
 80074c4:	080074e7 	.word	0x080074e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074c8:	f7fe f86a 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 80074cc:	61b8      	str	r0, [r7, #24]
        break;
 80074ce:	e013      	b.n	80074f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074d0:	f7fe f87a 	bl	80055c8 <HAL_RCC_GetPCLK2Freq>
 80074d4:	61b8      	str	r0, [r7, #24]
        break;
 80074d6:	e00f      	b.n	80074f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074d8:	4b4b      	ldr	r3, [pc, #300]	; (8007608 <UART_SetConfig+0x4c0>)
 80074da:	61bb      	str	r3, [r7, #24]
        break;
 80074dc:	e00c      	b.n	80074f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074de:	f7fd ff73 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 80074e2:	61b8      	str	r0, [r7, #24]
        break;
 80074e4:	e008      	b.n	80074f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ea:	61bb      	str	r3, [r7, #24]
        break;
 80074ec:	e004      	b.n	80074f8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	77bb      	strb	r3, [r7, #30]
        break;
 80074f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d074      	beq.n	80075e8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	005a      	lsls	r2, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	085b      	lsrs	r3, r3, #1
 8007508:	441a      	add	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007512:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	2b0f      	cmp	r3, #15
 8007518:	d916      	bls.n	8007548 <UART_SetConfig+0x400>
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007520:	d212      	bcs.n	8007548 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	b29b      	uxth	r3, r3
 8007526:	f023 030f 	bic.w	r3, r3, #15
 800752a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	b29b      	uxth	r3, r3
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	b29a      	uxth	r2, r3
 8007538:	89fb      	ldrh	r3, [r7, #14]
 800753a:	4313      	orrs	r3, r2
 800753c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	89fa      	ldrh	r2, [r7, #14]
 8007544:	60da      	str	r2, [r3, #12]
 8007546:	e04f      	b.n	80075e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	77bb      	strb	r3, [r7, #30]
 800754c:	e04c      	b.n	80075e8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800754e:	7ffb      	ldrb	r3, [r7, #31]
 8007550:	2b08      	cmp	r3, #8
 8007552:	d828      	bhi.n	80075a6 <UART_SetConfig+0x45e>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <UART_SetConfig+0x414>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	08007581 	.word	0x08007581
 8007560:	08007589 	.word	0x08007589
 8007564:	08007591 	.word	0x08007591
 8007568:	080075a7 	.word	0x080075a7
 800756c:	08007597 	.word	0x08007597
 8007570:	080075a7 	.word	0x080075a7
 8007574:	080075a7 	.word	0x080075a7
 8007578:	080075a7 	.word	0x080075a7
 800757c:	0800759f 	.word	0x0800759f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007580:	f7fe f80e 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 8007584:	61b8      	str	r0, [r7, #24]
        break;
 8007586:	e013      	b.n	80075b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007588:	f7fe f81e 	bl	80055c8 <HAL_RCC_GetPCLK2Freq>
 800758c:	61b8      	str	r0, [r7, #24]
        break;
 800758e:	e00f      	b.n	80075b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007590:	4b1d      	ldr	r3, [pc, #116]	; (8007608 <UART_SetConfig+0x4c0>)
 8007592:	61bb      	str	r3, [r7, #24]
        break;
 8007594:	e00c      	b.n	80075b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007596:	f7fd ff17 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 800759a:	61b8      	str	r0, [r7, #24]
        break;
 800759c:	e008      	b.n	80075b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800759e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075a2:	61bb      	str	r3, [r7, #24]
        break;
 80075a4:	e004      	b.n	80075b0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	77bb      	strb	r3, [r7, #30]
        break;
 80075ae:	bf00      	nop
    }

    if (pclk != 0U)
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d018      	beq.n	80075e8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	085a      	lsrs	r2, r3, #1
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	441a      	add	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	2b0f      	cmp	r3, #15
 80075ce:	d909      	bls.n	80075e4 <UART_SetConfig+0x49c>
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d6:	d205      	bcs.n	80075e4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	b29a      	uxth	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	60da      	str	r2, [r3, #12]
 80075e2:	e001      	b.n	80075e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80075f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3720      	adds	r7, #32
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40007c00 	.word	0x40007c00
 8007604:	40023800 	.word	0x40023800
 8007608:	00f42400 	.word	0x00f42400

0800760c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00a      	beq.n	800767a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	f003 0308 	and.w	r3, r3, #8
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	f003 0310 	and.w	r3, r3, #16
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00a      	beq.n	80076be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01a      	beq.n	8007722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800770a:	d10a      	bne.n	8007722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	605a      	str	r2, [r3, #4]
  }
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af02      	add	r7, sp, #8
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007760:	f7fb fb74 	bl	8002e4c <HAL_GetTick>
 8007764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	2b08      	cmp	r3, #8
 8007772:	d10e      	bne.n	8007792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f82d 	bl	80077e2 <UART_WaitOnFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e023      	b.n	80077da <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b04      	cmp	r3, #4
 800779e:	d10e      	bne.n	80077be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f817 	bl	80077e2 <UART_WaitOnFlagUntilTimeout>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e00d      	b.n	80077da <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2220      	movs	r2, #32
 80077c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2220      	movs	r2, #32
 80077c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b09c      	sub	sp, #112	; 0x70
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	603b      	str	r3, [r7, #0]
 80077ee:	4613      	mov	r3, r2
 80077f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077f2:	e0a5      	b.n	8007940 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fa:	f000 80a1 	beq.w	8007940 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077fe:	f7fb fb25 	bl	8002e4c <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800780a:	429a      	cmp	r2, r3
 800780c:	d302      	bcc.n	8007814 <UART_WaitOnFlagUntilTimeout+0x32>
 800780e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007810:	2b00      	cmp	r3, #0
 8007812:	d13e      	bne.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007828:	667b      	str	r3, [r7, #100]	; 0x64
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007834:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007838:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e6      	bne.n	8007814 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	663b      	str	r3, [r7, #96]	; 0x60
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007866:	64ba      	str	r2, [r7, #72]	; 0x48
 8007868:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800786c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e5      	bne.n	8007846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2220      	movs	r2, #32
 800787e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2220      	movs	r2, #32
 8007884:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e067      	b.n	8007962 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b00      	cmp	r3, #0
 800789e:	d04f      	beq.n	8007940 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ae:	d147      	bne.n	8007940 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d8:	637b      	str	r3, [r7, #52]	; 0x34
 80078da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e6      	bne.n	80078ba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	613b      	str	r3, [r7, #16]
   return(result);
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f023 0301 	bic.w	r3, r3, #1
 8007902:	66bb      	str	r3, [r7, #104]	; 0x68
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3308      	adds	r3, #8
 800790a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800790c:	623a      	str	r2, [r7, #32]
 800790e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	6a3a      	ldr	r2, [r7, #32]
 8007914:	e841 2300 	strex	r3, r2, [r1]
 8007918:	61bb      	str	r3, [r7, #24]
   return(result);
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e5      	bne.n	80078ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2220      	movs	r2, #32
 8007924:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2220      	movs	r2, #32
 800792a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2220      	movs	r2, #32
 8007930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e010      	b.n	8007962 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69da      	ldr	r2, [r3, #28]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	4013      	ands	r3, r2
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	429a      	cmp	r2, r3
 800794e:	bf0c      	ite	eq
 8007950:	2301      	moveq	r3, #1
 8007952:	2300      	movne	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	461a      	mov	r2, r3
 8007958:	79fb      	ldrb	r3, [r7, #7]
 800795a:	429a      	cmp	r2, r3
 800795c:	f43f af4a 	beq.w	80077f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3770      	adds	r7, #112	; 0x70
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800796c:	b480      	push	{r7}
 800796e:	b097      	sub	sp, #92	; 0x5c
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	4613      	mov	r3, r2
 8007978:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	88fa      	ldrh	r2, [r7, #6]
 8007984:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	88fa      	ldrh	r2, [r7, #6]
 800798c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800799e:	d10e      	bne.n	80079be <UART_Start_Receive_IT+0x52>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d105      	bne.n	80079b4 <UART_Start_Receive_IT+0x48>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80079ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079b2:	e02d      	b.n	8007a10 <UART_Start_Receive_IT+0xa4>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	22ff      	movs	r2, #255	; 0xff
 80079b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079bc:	e028      	b.n	8007a10 <UART_Start_Receive_IT+0xa4>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10d      	bne.n	80079e2 <UART_Start_Receive_IT+0x76>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d104      	bne.n	80079d8 <UART_Start_Receive_IT+0x6c>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	22ff      	movs	r2, #255	; 0xff
 80079d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079d6:	e01b      	b.n	8007a10 <UART_Start_Receive_IT+0xa4>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	227f      	movs	r2, #127	; 0x7f
 80079dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079e0:	e016      	b.n	8007a10 <UART_Start_Receive_IT+0xa4>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ea:	d10d      	bne.n	8007a08 <UART_Start_Receive_IT+0x9c>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d104      	bne.n	80079fe <UART_Start_Receive_IT+0x92>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	227f      	movs	r2, #127	; 0x7f
 80079f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079fc:	e008      	b.n	8007a10 <UART_Start_Receive_IT+0xa4>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	223f      	movs	r2, #63	; 0x3f
 8007a02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a06:	e003      	b.n	8007a10 <UART_Start_Receive_IT+0xa4>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2222      	movs	r2, #34	; 0x22
 8007a1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3308      	adds	r3, #8
 8007a24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	f043 0301 	orr.w	r3, r3, #1
 8007a34:	657b      	str	r3, [r7, #84]	; 0x54
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e5      	bne.n	8007a1e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5a:	d107      	bne.n	8007a6c <UART_Start_Receive_IT+0x100>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d103      	bne.n	8007a6c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4a24      	ldr	r2, [pc, #144]	; (8007af8 <UART_Start_Receive_IT+0x18c>)
 8007a68:	665a      	str	r2, [r3, #100]	; 0x64
 8007a6a:	e002      	b.n	8007a72 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4a23      	ldr	r2, [pc, #140]	; (8007afc <UART_Start_Receive_IT+0x190>)
 8007a70:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d019      	beq.n	8007ab6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e6      	bne.n	8007a82 <UART_Start_Receive_IT+0x116>
 8007ab4:	e018      	b.n	8007ae8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	e853 3f00 	ldrex	r3, [r3]
 8007ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f043 0320 	orr.w	r3, r3, #32
 8007aca:	653b      	str	r3, [r7, #80]	; 0x50
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ad4:	623b      	str	r3, [r7, #32]
 8007ad6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	69f9      	ldr	r1, [r7, #28]
 8007ada:	6a3a      	ldr	r2, [r7, #32]
 8007adc:	e841 2300 	strex	r3, r2, [r1]
 8007ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e6      	bne.n	8007ab6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	375c      	adds	r7, #92	; 0x5c
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	08007f19 	.word	0x08007f19
 8007afc:	08007dbd 	.word	0x08007dbd

08007b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b095      	sub	sp, #84	; 0x54
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b26:	643b      	str	r3, [r7, #64]	; 0x40
 8007b28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e6      	bne.n	8007b08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	f023 0301 	bic.w	r3, r3, #1
 8007b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e5      	bne.n	8007b3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d118      	bne.n	8007ba8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	e853 3f00 	ldrex	r3, [r3]
 8007b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f023 0310 	bic.w	r3, r3, #16
 8007b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	461a      	mov	r2, r3
 8007b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b94:	61bb      	str	r3, [r7, #24]
 8007b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b98:	6979      	ldr	r1, [r7, #20]
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	e841 2300 	strex	r3, r2, [r1]
 8007ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e6      	bne.n	8007b76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2220      	movs	r2, #32
 8007bac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007bba:	bf00      	nop
 8007bbc:	3754      	adds	r7, #84	; 0x54
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f7ff fa8f 	bl	8007108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bea:	bf00      	nop
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b08f      	sub	sp, #60	; 0x3c
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bfe:	2b21      	cmp	r3, #33	; 0x21
 8007c00:	d14c      	bne.n	8007c9c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d132      	bne.n	8007c74 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c22:	637b      	str	r3, [r7, #52]	; 0x34
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c2e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e6      	bne.n	8007c0e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c54:	633b      	str	r3, [r7, #48]	; 0x30
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	61bb      	str	r3, [r7, #24]
 8007c60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	6979      	ldr	r1, [r7, #20]
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e6      	bne.n	8007c40 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007c72:	e013      	b.n	8007c9c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c78:	781a      	ldrb	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007c9c:	bf00      	nop
 8007c9e:	373c      	adds	r7, #60	; 0x3c
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b091      	sub	sp, #68	; 0x44
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cb4:	2b21      	cmp	r3, #33	; 0x21
 8007cb6:	d151      	bne.n	8007d5c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d132      	bne.n	8007d2a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8007ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e6      	bne.n	8007cc4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d14:	61fb      	str	r3, [r7, #28]
 8007d16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	69b9      	ldr	r1, [r7, #24]
 8007d1a:	69fa      	ldr	r2, [r7, #28]
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	617b      	str	r3, [r7, #20]
   return(result);
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e6      	bne.n	8007cf6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007d28:	e018      	b.n	8007d5c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d3e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d44:	1c9a      	adds	r2, r3, #2
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	3b01      	subs	r3, #1
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007d5c:	bf00      	nop
 8007d5e:	3744      	adds	r7, #68	; 0x44
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d84:	61fb      	str	r3, [r7, #28]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6979      	ldr	r1, [r7, #20]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e6      	bne.n	8007d70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2220      	movs	r2, #32
 8007da6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff f9a0 	bl	80070f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007db4:	bf00      	nop
 8007db6:	3720      	adds	r7, #32
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b096      	sub	sp, #88	; 0x58
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007dca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dd2:	2b22      	cmp	r3, #34	; 0x22
 8007dd4:	f040 8094 	bne.w	8007f00 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007de2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007de6:	b2d9      	uxtb	r1, r3
 8007de8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df2:	400a      	ands	r2, r1
 8007df4:	b2d2      	uxtb	r2, r2
 8007df6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d177      	bne.n	8007f10 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e34:	653b      	str	r3, [r7, #80]	; 0x50
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e6      	bne.n	8007e20 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3308      	adds	r3, #8
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	623b      	str	r3, [r7, #32]
   return(result);
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	f023 0301 	bic.w	r3, r3, #1
 8007e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e72:	633a      	str	r2, [r7, #48]	; 0x30
 8007e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e5      	bne.n	8007e52 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d12e      	bne.n	8007ef8 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	e853 3f00 	ldrex	r3, [r3]
 8007eac:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f023 0310 	bic.w	r3, r3, #16
 8007eb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ebe:	61fb      	str	r3, [r7, #28]
 8007ec0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	69b9      	ldr	r1, [r7, #24]
 8007ec4:	69fa      	ldr	r2, [r7, #28]
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	617b      	str	r3, [r7, #20]
   return(result);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e6      	bne.n	8007ea0 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	f003 0310 	and.w	r3, r3, #16
 8007edc:	2b10      	cmp	r3, #16
 8007ede:	d103      	bne.n	8007ee8 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2210      	movs	r2, #16
 8007ee6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff f913 	bl	800711c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ef6:	e00b      	b.n	8007f10 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7fa fe97 	bl	8002c2c <HAL_UART_RxCpltCallback>
}
 8007efe:	e007      	b.n	8007f10 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699a      	ldr	r2, [r3, #24]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0208 	orr.w	r2, r2, #8
 8007f0e:	619a      	str	r2, [r3, #24]
}
 8007f10:	bf00      	nop
 8007f12:	3758      	adds	r7, #88	; 0x58
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b096      	sub	sp, #88	; 0x58
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f26:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f2e:	2b22      	cmp	r3, #34	; 0x22
 8007f30:	f040 8094 	bne.w	800805c <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f42:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f44:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007f48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f52:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f58:	1c9a      	adds	r2, r3, #2
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	3b01      	subs	r3, #1
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d177      	bne.n	800806c <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8007f9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e6      	bne.n	8007f7c <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3308      	adds	r3, #8
 8007fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e5      	bne.n	8007fae <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d12e      	bne.n	8008054 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	e853 3f00 	ldrex	r3, [r3]
 8008008:	60bb      	str	r3, [r7, #8]
   return(result);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f023 0310 	bic.w	r3, r3, #16
 8008010:	647b      	str	r3, [r7, #68]	; 0x44
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800801a:	61bb      	str	r3, [r7, #24]
 800801c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801e:	6979      	ldr	r1, [r7, #20]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	e841 2300 	strex	r3, r2, [r1]
 8008026:	613b      	str	r3, [r7, #16]
   return(result);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1e6      	bne.n	8007ffc <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	f003 0310 	and.w	r3, r3, #16
 8008038:	2b10      	cmp	r3, #16
 800803a:	d103      	bne.n	8008044 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2210      	movs	r2, #16
 8008042:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff f865 	bl	800711c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008052:	e00b      	b.n	800806c <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fa fde9 	bl	8002c2c <HAL_UART_RxCpltCallback>
}
 800805a:	e007      	b.n	800806c <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	699a      	ldr	r2, [r3, #24]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0208 	orr.w	r2, r2, #8
 800806a:	619a      	str	r2, [r3, #24]
}
 800806c:	bf00      	nop
 800806e:	3758      	adds	r7, #88	; 0x58
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <__errno>:
 8008074:	4b01      	ldr	r3, [pc, #4]	; (800807c <__errno+0x8>)
 8008076:	6818      	ldr	r0, [r3, #0]
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	2000001c 	.word	0x2000001c

08008080 <__libc_init_array>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	4d0d      	ldr	r5, [pc, #52]	; (80080b8 <__libc_init_array+0x38>)
 8008084:	4c0d      	ldr	r4, [pc, #52]	; (80080bc <__libc_init_array+0x3c>)
 8008086:	1b64      	subs	r4, r4, r5
 8008088:	10a4      	asrs	r4, r4, #2
 800808a:	2600      	movs	r6, #0
 800808c:	42a6      	cmp	r6, r4
 800808e:	d109      	bne.n	80080a4 <__libc_init_array+0x24>
 8008090:	4d0b      	ldr	r5, [pc, #44]	; (80080c0 <__libc_init_array+0x40>)
 8008092:	4c0c      	ldr	r4, [pc, #48]	; (80080c4 <__libc_init_array+0x44>)
 8008094:	f002 f8ca 	bl	800a22c <_init>
 8008098:	1b64      	subs	r4, r4, r5
 800809a:	10a4      	asrs	r4, r4, #2
 800809c:	2600      	movs	r6, #0
 800809e:	42a6      	cmp	r6, r4
 80080a0:	d105      	bne.n	80080ae <__libc_init_array+0x2e>
 80080a2:	bd70      	pop	{r4, r5, r6, pc}
 80080a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a8:	4798      	blx	r3
 80080aa:	3601      	adds	r6, #1
 80080ac:	e7ee      	b.n	800808c <__libc_init_array+0xc>
 80080ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b2:	4798      	blx	r3
 80080b4:	3601      	adds	r6, #1
 80080b6:	e7f2      	b.n	800809e <__libc_init_array+0x1e>
 80080b8:	0800b400 	.word	0x0800b400
 80080bc:	0800b400 	.word	0x0800b400
 80080c0:	0800b400 	.word	0x0800b400
 80080c4:	0800b404 	.word	0x0800b404

080080c8 <malloc>:
 80080c8:	4b02      	ldr	r3, [pc, #8]	; (80080d4 <malloc+0xc>)
 80080ca:	4601      	mov	r1, r0
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	f000 b863 	b.w	8008198 <_malloc_r>
 80080d2:	bf00      	nop
 80080d4:	2000001c 	.word	0x2000001c

080080d8 <free>:
 80080d8:	4b02      	ldr	r3, [pc, #8]	; (80080e4 <free+0xc>)
 80080da:	4601      	mov	r1, r0
 80080dc:	6818      	ldr	r0, [r3, #0]
 80080de:	f000 b80b 	b.w	80080f8 <_free_r>
 80080e2:	bf00      	nop
 80080e4:	2000001c 	.word	0x2000001c

080080e8 <memset>:
 80080e8:	4402      	add	r2, r0
 80080ea:	4603      	mov	r3, r0
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d100      	bne.n	80080f2 <memset+0xa>
 80080f0:	4770      	bx	lr
 80080f2:	f803 1b01 	strb.w	r1, [r3], #1
 80080f6:	e7f9      	b.n	80080ec <memset+0x4>

080080f8 <_free_r>:
 80080f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080fa:	2900      	cmp	r1, #0
 80080fc:	d048      	beq.n	8008190 <_free_r+0x98>
 80080fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008102:	9001      	str	r0, [sp, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f1a1 0404 	sub.w	r4, r1, #4
 800810a:	bfb8      	it	lt
 800810c:	18e4      	addlt	r4, r4, r3
 800810e:	f000 fa2b 	bl	8008568 <__malloc_lock>
 8008112:	4a20      	ldr	r2, [pc, #128]	; (8008194 <_free_r+0x9c>)
 8008114:	9801      	ldr	r0, [sp, #4]
 8008116:	6813      	ldr	r3, [r2, #0]
 8008118:	4615      	mov	r5, r2
 800811a:	b933      	cbnz	r3, 800812a <_free_r+0x32>
 800811c:	6063      	str	r3, [r4, #4]
 800811e:	6014      	str	r4, [r2, #0]
 8008120:	b003      	add	sp, #12
 8008122:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008126:	f000 ba25 	b.w	8008574 <__malloc_unlock>
 800812a:	42a3      	cmp	r3, r4
 800812c:	d90b      	bls.n	8008146 <_free_r+0x4e>
 800812e:	6821      	ldr	r1, [r4, #0]
 8008130:	1862      	adds	r2, r4, r1
 8008132:	4293      	cmp	r3, r2
 8008134:	bf04      	itt	eq
 8008136:	681a      	ldreq	r2, [r3, #0]
 8008138:	685b      	ldreq	r3, [r3, #4]
 800813a:	6063      	str	r3, [r4, #4]
 800813c:	bf04      	itt	eq
 800813e:	1852      	addeq	r2, r2, r1
 8008140:	6022      	streq	r2, [r4, #0]
 8008142:	602c      	str	r4, [r5, #0]
 8008144:	e7ec      	b.n	8008120 <_free_r+0x28>
 8008146:	461a      	mov	r2, r3
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	b10b      	cbz	r3, 8008150 <_free_r+0x58>
 800814c:	42a3      	cmp	r3, r4
 800814e:	d9fa      	bls.n	8008146 <_free_r+0x4e>
 8008150:	6811      	ldr	r1, [r2, #0]
 8008152:	1855      	adds	r5, r2, r1
 8008154:	42a5      	cmp	r5, r4
 8008156:	d10b      	bne.n	8008170 <_free_r+0x78>
 8008158:	6824      	ldr	r4, [r4, #0]
 800815a:	4421      	add	r1, r4
 800815c:	1854      	adds	r4, r2, r1
 800815e:	42a3      	cmp	r3, r4
 8008160:	6011      	str	r1, [r2, #0]
 8008162:	d1dd      	bne.n	8008120 <_free_r+0x28>
 8008164:	681c      	ldr	r4, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	6053      	str	r3, [r2, #4]
 800816a:	4421      	add	r1, r4
 800816c:	6011      	str	r1, [r2, #0]
 800816e:	e7d7      	b.n	8008120 <_free_r+0x28>
 8008170:	d902      	bls.n	8008178 <_free_r+0x80>
 8008172:	230c      	movs	r3, #12
 8008174:	6003      	str	r3, [r0, #0]
 8008176:	e7d3      	b.n	8008120 <_free_r+0x28>
 8008178:	6825      	ldr	r5, [r4, #0]
 800817a:	1961      	adds	r1, r4, r5
 800817c:	428b      	cmp	r3, r1
 800817e:	bf04      	itt	eq
 8008180:	6819      	ldreq	r1, [r3, #0]
 8008182:	685b      	ldreq	r3, [r3, #4]
 8008184:	6063      	str	r3, [r4, #4]
 8008186:	bf04      	itt	eq
 8008188:	1949      	addeq	r1, r1, r5
 800818a:	6021      	streq	r1, [r4, #0]
 800818c:	6054      	str	r4, [r2, #4]
 800818e:	e7c7      	b.n	8008120 <_free_r+0x28>
 8008190:	b003      	add	sp, #12
 8008192:	bd30      	pop	{r4, r5, pc}
 8008194:	20000270 	.word	0x20000270

08008198 <_malloc_r>:
 8008198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819a:	1ccd      	adds	r5, r1, #3
 800819c:	f025 0503 	bic.w	r5, r5, #3
 80081a0:	3508      	adds	r5, #8
 80081a2:	2d0c      	cmp	r5, #12
 80081a4:	bf38      	it	cc
 80081a6:	250c      	movcc	r5, #12
 80081a8:	2d00      	cmp	r5, #0
 80081aa:	4606      	mov	r6, r0
 80081ac:	db01      	blt.n	80081b2 <_malloc_r+0x1a>
 80081ae:	42a9      	cmp	r1, r5
 80081b0:	d903      	bls.n	80081ba <_malloc_r+0x22>
 80081b2:	230c      	movs	r3, #12
 80081b4:	6033      	str	r3, [r6, #0]
 80081b6:	2000      	movs	r0, #0
 80081b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ba:	f000 f9d5 	bl	8008568 <__malloc_lock>
 80081be:	4921      	ldr	r1, [pc, #132]	; (8008244 <_malloc_r+0xac>)
 80081c0:	680a      	ldr	r2, [r1, #0]
 80081c2:	4614      	mov	r4, r2
 80081c4:	b99c      	cbnz	r4, 80081ee <_malloc_r+0x56>
 80081c6:	4f20      	ldr	r7, [pc, #128]	; (8008248 <_malloc_r+0xb0>)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	b923      	cbnz	r3, 80081d6 <_malloc_r+0x3e>
 80081cc:	4621      	mov	r1, r4
 80081ce:	4630      	mov	r0, r6
 80081d0:	f000 f844 	bl	800825c <_sbrk_r>
 80081d4:	6038      	str	r0, [r7, #0]
 80081d6:	4629      	mov	r1, r5
 80081d8:	4630      	mov	r0, r6
 80081da:	f000 f83f 	bl	800825c <_sbrk_r>
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	d123      	bne.n	800822a <_malloc_r+0x92>
 80081e2:	230c      	movs	r3, #12
 80081e4:	6033      	str	r3, [r6, #0]
 80081e6:	4630      	mov	r0, r6
 80081e8:	f000 f9c4 	bl	8008574 <__malloc_unlock>
 80081ec:	e7e3      	b.n	80081b6 <_malloc_r+0x1e>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	1b5b      	subs	r3, r3, r5
 80081f2:	d417      	bmi.n	8008224 <_malloc_r+0x8c>
 80081f4:	2b0b      	cmp	r3, #11
 80081f6:	d903      	bls.n	8008200 <_malloc_r+0x68>
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	441c      	add	r4, r3
 80081fc:	6025      	str	r5, [r4, #0]
 80081fe:	e004      	b.n	800820a <_malloc_r+0x72>
 8008200:	6863      	ldr	r3, [r4, #4]
 8008202:	42a2      	cmp	r2, r4
 8008204:	bf0c      	ite	eq
 8008206:	600b      	streq	r3, [r1, #0]
 8008208:	6053      	strne	r3, [r2, #4]
 800820a:	4630      	mov	r0, r6
 800820c:	f000 f9b2 	bl	8008574 <__malloc_unlock>
 8008210:	f104 000b 	add.w	r0, r4, #11
 8008214:	1d23      	adds	r3, r4, #4
 8008216:	f020 0007 	bic.w	r0, r0, #7
 800821a:	1ac2      	subs	r2, r0, r3
 800821c:	d0cc      	beq.n	80081b8 <_malloc_r+0x20>
 800821e:	1a1b      	subs	r3, r3, r0
 8008220:	50a3      	str	r3, [r4, r2]
 8008222:	e7c9      	b.n	80081b8 <_malloc_r+0x20>
 8008224:	4622      	mov	r2, r4
 8008226:	6864      	ldr	r4, [r4, #4]
 8008228:	e7cc      	b.n	80081c4 <_malloc_r+0x2c>
 800822a:	1cc4      	adds	r4, r0, #3
 800822c:	f024 0403 	bic.w	r4, r4, #3
 8008230:	42a0      	cmp	r0, r4
 8008232:	d0e3      	beq.n	80081fc <_malloc_r+0x64>
 8008234:	1a21      	subs	r1, r4, r0
 8008236:	4630      	mov	r0, r6
 8008238:	f000 f810 	bl	800825c <_sbrk_r>
 800823c:	3001      	adds	r0, #1
 800823e:	d1dd      	bne.n	80081fc <_malloc_r+0x64>
 8008240:	e7cf      	b.n	80081e2 <_malloc_r+0x4a>
 8008242:	bf00      	nop
 8008244:	20000270 	.word	0x20000270
 8008248:	20000274 	.word	0x20000274

0800824c <realloc>:
 800824c:	4b02      	ldr	r3, [pc, #8]	; (8008258 <realloc+0xc>)
 800824e:	460a      	mov	r2, r1
 8008250:	4601      	mov	r1, r0
 8008252:	6818      	ldr	r0, [r3, #0]
 8008254:	f000 b994 	b.w	8008580 <_realloc_r>
 8008258:	2000001c 	.word	0x2000001c

0800825c <_sbrk_r>:
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4d06      	ldr	r5, [pc, #24]	; (8008278 <_sbrk_r+0x1c>)
 8008260:	2300      	movs	r3, #0
 8008262:	4604      	mov	r4, r0
 8008264:	4608      	mov	r0, r1
 8008266:	602b      	str	r3, [r5, #0]
 8008268:	f7fa f9e2 	bl	8002630 <_sbrk>
 800826c:	1c43      	adds	r3, r0, #1
 800826e:	d102      	bne.n	8008276 <_sbrk_r+0x1a>
 8008270:	682b      	ldr	r3, [r5, #0]
 8008272:	b103      	cbz	r3, 8008276 <_sbrk_r+0x1a>
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	200005fc 	.word	0x200005fc

0800827c <sniprintf>:
 800827c:	b40c      	push	{r2, r3}
 800827e:	b530      	push	{r4, r5, lr}
 8008280:	4b17      	ldr	r3, [pc, #92]	; (80082e0 <sniprintf+0x64>)
 8008282:	1e0c      	subs	r4, r1, #0
 8008284:	681d      	ldr	r5, [r3, #0]
 8008286:	b09d      	sub	sp, #116	; 0x74
 8008288:	da08      	bge.n	800829c <sniprintf+0x20>
 800828a:	238b      	movs	r3, #139	; 0x8b
 800828c:	602b      	str	r3, [r5, #0]
 800828e:	f04f 30ff 	mov.w	r0, #4294967295
 8008292:	b01d      	add	sp, #116	; 0x74
 8008294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008298:	b002      	add	sp, #8
 800829a:	4770      	bx	lr
 800829c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80082a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80082a4:	bf14      	ite	ne
 80082a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80082aa:	4623      	moveq	r3, r4
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	9307      	str	r3, [sp, #28]
 80082b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082b4:	9002      	str	r0, [sp, #8]
 80082b6:	9006      	str	r0, [sp, #24]
 80082b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80082be:	ab21      	add	r3, sp, #132	; 0x84
 80082c0:	a902      	add	r1, sp, #8
 80082c2:	4628      	mov	r0, r5
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	f000 f9dd 	bl	8008684 <_svfiprintf_r>
 80082ca:	1c43      	adds	r3, r0, #1
 80082cc:	bfbc      	itt	lt
 80082ce:	238b      	movlt	r3, #139	; 0x8b
 80082d0:	602b      	strlt	r3, [r5, #0]
 80082d2:	2c00      	cmp	r4, #0
 80082d4:	d0dd      	beq.n	8008292 <sniprintf+0x16>
 80082d6:	9b02      	ldr	r3, [sp, #8]
 80082d8:	2200      	movs	r2, #0
 80082da:	701a      	strb	r2, [r3, #0]
 80082dc:	e7d9      	b.n	8008292 <sniprintf+0x16>
 80082de:	bf00      	nop
 80082e0:	2000001c 	.word	0x2000001c

080082e4 <siprintf>:
 80082e4:	b40e      	push	{r1, r2, r3}
 80082e6:	b500      	push	{lr}
 80082e8:	b09c      	sub	sp, #112	; 0x70
 80082ea:	ab1d      	add	r3, sp, #116	; 0x74
 80082ec:	9002      	str	r0, [sp, #8]
 80082ee:	9006      	str	r0, [sp, #24]
 80082f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082f4:	4809      	ldr	r0, [pc, #36]	; (800831c <siprintf+0x38>)
 80082f6:	9107      	str	r1, [sp, #28]
 80082f8:	9104      	str	r1, [sp, #16]
 80082fa:	4909      	ldr	r1, [pc, #36]	; (8008320 <siprintf+0x3c>)
 80082fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008300:	9105      	str	r1, [sp, #20]
 8008302:	6800      	ldr	r0, [r0, #0]
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	a902      	add	r1, sp, #8
 8008308:	f000 f9bc 	bl	8008684 <_svfiprintf_r>
 800830c:	9b02      	ldr	r3, [sp, #8]
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
 8008312:	b01c      	add	sp, #112	; 0x70
 8008314:	f85d eb04 	ldr.w	lr, [sp], #4
 8008318:	b003      	add	sp, #12
 800831a:	4770      	bx	lr
 800831c:	2000001c 	.word	0x2000001c
 8008320:	ffff0208 	.word	0xffff0208

08008324 <strcpy>:
 8008324:	4603      	mov	r3, r0
 8008326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800832a:	f803 2b01 	strb.w	r2, [r3], #1
 800832e:	2a00      	cmp	r2, #0
 8008330:	d1f9      	bne.n	8008326 <strcpy+0x2>
 8008332:	4770      	bx	lr

08008334 <strtok>:
 8008334:	4b16      	ldr	r3, [pc, #88]	; (8008390 <strtok+0x5c>)
 8008336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008338:	681e      	ldr	r6, [r3, #0]
 800833a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800833c:	4605      	mov	r5, r0
 800833e:	b9fc      	cbnz	r4, 8008380 <strtok+0x4c>
 8008340:	2050      	movs	r0, #80	; 0x50
 8008342:	9101      	str	r1, [sp, #4]
 8008344:	f7ff fec0 	bl	80080c8 <malloc>
 8008348:	9901      	ldr	r1, [sp, #4]
 800834a:	65b0      	str	r0, [r6, #88]	; 0x58
 800834c:	4602      	mov	r2, r0
 800834e:	b920      	cbnz	r0, 800835a <strtok+0x26>
 8008350:	4b10      	ldr	r3, [pc, #64]	; (8008394 <strtok+0x60>)
 8008352:	4811      	ldr	r0, [pc, #68]	; (8008398 <strtok+0x64>)
 8008354:	2157      	movs	r1, #87	; 0x57
 8008356:	f000 f8d7 	bl	8008508 <__assert_func>
 800835a:	e9c0 4400 	strd	r4, r4, [r0]
 800835e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008362:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008366:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800836a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800836e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008372:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008376:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800837a:	6184      	str	r4, [r0, #24]
 800837c:	7704      	strb	r4, [r0, #28]
 800837e:	6244      	str	r4, [r0, #36]	; 0x24
 8008380:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008382:	2301      	movs	r3, #1
 8008384:	4628      	mov	r0, r5
 8008386:	b002      	add	sp, #8
 8008388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800838c:	f000 b806 	b.w	800839c <__strtok_r>
 8008390:	2000001c 	.word	0x2000001c
 8008394:	0800afd8 	.word	0x0800afd8
 8008398:	0800afef 	.word	0x0800afef

0800839c <__strtok_r>:
 800839c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800839e:	b908      	cbnz	r0, 80083a4 <__strtok_r+0x8>
 80083a0:	6810      	ldr	r0, [r2, #0]
 80083a2:	b188      	cbz	r0, 80083c8 <__strtok_r+0x2c>
 80083a4:	4604      	mov	r4, r0
 80083a6:	4620      	mov	r0, r4
 80083a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80083ac:	460f      	mov	r7, r1
 80083ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 80083b2:	b91e      	cbnz	r6, 80083bc <__strtok_r+0x20>
 80083b4:	b965      	cbnz	r5, 80083d0 <__strtok_r+0x34>
 80083b6:	6015      	str	r5, [r2, #0]
 80083b8:	4628      	mov	r0, r5
 80083ba:	e005      	b.n	80083c8 <__strtok_r+0x2c>
 80083bc:	42b5      	cmp	r5, r6
 80083be:	d1f6      	bne.n	80083ae <__strtok_r+0x12>
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1f0      	bne.n	80083a6 <__strtok_r+0xa>
 80083c4:	6014      	str	r4, [r2, #0]
 80083c6:	7003      	strb	r3, [r0, #0]
 80083c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ca:	461c      	mov	r4, r3
 80083cc:	e00c      	b.n	80083e8 <__strtok_r+0x4c>
 80083ce:	b915      	cbnz	r5, 80083d6 <__strtok_r+0x3a>
 80083d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083d4:	460e      	mov	r6, r1
 80083d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80083da:	42ab      	cmp	r3, r5
 80083dc:	d1f7      	bne.n	80083ce <__strtok_r+0x32>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0f3      	beq.n	80083ca <__strtok_r+0x2e>
 80083e2:	2300      	movs	r3, #0
 80083e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80083e8:	6014      	str	r4, [r2, #0]
 80083ea:	e7ed      	b.n	80083c8 <__strtok_r+0x2c>

080083ec <_strtol_l.isra.0>:
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f2:	d001      	beq.n	80083f8 <_strtol_l.isra.0+0xc>
 80083f4:	2b24      	cmp	r3, #36	; 0x24
 80083f6:	d906      	bls.n	8008406 <_strtol_l.isra.0+0x1a>
 80083f8:	f7ff fe3c 	bl	8008074 <__errno>
 80083fc:	2316      	movs	r3, #22
 80083fe:	6003      	str	r3, [r0, #0]
 8008400:	2000      	movs	r0, #0
 8008402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008406:	4f3a      	ldr	r7, [pc, #232]	; (80084f0 <_strtol_l.isra.0+0x104>)
 8008408:	468e      	mov	lr, r1
 800840a:	4676      	mov	r6, lr
 800840c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008410:	5de5      	ldrb	r5, [r4, r7]
 8008412:	f015 0508 	ands.w	r5, r5, #8
 8008416:	d1f8      	bne.n	800840a <_strtol_l.isra.0+0x1e>
 8008418:	2c2d      	cmp	r4, #45	; 0x2d
 800841a:	d134      	bne.n	8008486 <_strtol_l.isra.0+0x9a>
 800841c:	f89e 4000 	ldrb.w	r4, [lr]
 8008420:	f04f 0801 	mov.w	r8, #1
 8008424:	f106 0e02 	add.w	lr, r6, #2
 8008428:	2b00      	cmp	r3, #0
 800842a:	d05c      	beq.n	80084e6 <_strtol_l.isra.0+0xfa>
 800842c:	2b10      	cmp	r3, #16
 800842e:	d10c      	bne.n	800844a <_strtol_l.isra.0+0x5e>
 8008430:	2c30      	cmp	r4, #48	; 0x30
 8008432:	d10a      	bne.n	800844a <_strtol_l.isra.0+0x5e>
 8008434:	f89e 4000 	ldrb.w	r4, [lr]
 8008438:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800843c:	2c58      	cmp	r4, #88	; 0x58
 800843e:	d14d      	bne.n	80084dc <_strtol_l.isra.0+0xf0>
 8008440:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008444:	2310      	movs	r3, #16
 8008446:	f10e 0e02 	add.w	lr, lr, #2
 800844a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800844e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008452:	2600      	movs	r6, #0
 8008454:	fbbc f9f3 	udiv	r9, ip, r3
 8008458:	4635      	mov	r5, r6
 800845a:	fb03 ca19 	mls	sl, r3, r9, ip
 800845e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008462:	2f09      	cmp	r7, #9
 8008464:	d818      	bhi.n	8008498 <_strtol_l.isra.0+0xac>
 8008466:	463c      	mov	r4, r7
 8008468:	42a3      	cmp	r3, r4
 800846a:	dd24      	ble.n	80084b6 <_strtol_l.isra.0+0xca>
 800846c:	2e00      	cmp	r6, #0
 800846e:	db1f      	blt.n	80084b0 <_strtol_l.isra.0+0xc4>
 8008470:	45a9      	cmp	r9, r5
 8008472:	d31d      	bcc.n	80084b0 <_strtol_l.isra.0+0xc4>
 8008474:	d101      	bne.n	800847a <_strtol_l.isra.0+0x8e>
 8008476:	45a2      	cmp	sl, r4
 8008478:	db1a      	blt.n	80084b0 <_strtol_l.isra.0+0xc4>
 800847a:	fb05 4503 	mla	r5, r5, r3, r4
 800847e:	2601      	movs	r6, #1
 8008480:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008484:	e7eb      	b.n	800845e <_strtol_l.isra.0+0x72>
 8008486:	2c2b      	cmp	r4, #43	; 0x2b
 8008488:	bf08      	it	eq
 800848a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800848e:	46a8      	mov	r8, r5
 8008490:	bf08      	it	eq
 8008492:	f106 0e02 	addeq.w	lr, r6, #2
 8008496:	e7c7      	b.n	8008428 <_strtol_l.isra.0+0x3c>
 8008498:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800849c:	2f19      	cmp	r7, #25
 800849e:	d801      	bhi.n	80084a4 <_strtol_l.isra.0+0xb8>
 80084a0:	3c37      	subs	r4, #55	; 0x37
 80084a2:	e7e1      	b.n	8008468 <_strtol_l.isra.0+0x7c>
 80084a4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80084a8:	2f19      	cmp	r7, #25
 80084aa:	d804      	bhi.n	80084b6 <_strtol_l.isra.0+0xca>
 80084ac:	3c57      	subs	r4, #87	; 0x57
 80084ae:	e7db      	b.n	8008468 <_strtol_l.isra.0+0x7c>
 80084b0:	f04f 36ff 	mov.w	r6, #4294967295
 80084b4:	e7e4      	b.n	8008480 <_strtol_l.isra.0+0x94>
 80084b6:	2e00      	cmp	r6, #0
 80084b8:	da05      	bge.n	80084c6 <_strtol_l.isra.0+0xda>
 80084ba:	2322      	movs	r3, #34	; 0x22
 80084bc:	6003      	str	r3, [r0, #0]
 80084be:	4665      	mov	r5, ip
 80084c0:	b942      	cbnz	r2, 80084d4 <_strtol_l.isra.0+0xe8>
 80084c2:	4628      	mov	r0, r5
 80084c4:	e79d      	b.n	8008402 <_strtol_l.isra.0+0x16>
 80084c6:	f1b8 0f00 	cmp.w	r8, #0
 80084ca:	d000      	beq.n	80084ce <_strtol_l.isra.0+0xe2>
 80084cc:	426d      	negs	r5, r5
 80084ce:	2a00      	cmp	r2, #0
 80084d0:	d0f7      	beq.n	80084c2 <_strtol_l.isra.0+0xd6>
 80084d2:	b10e      	cbz	r6, 80084d8 <_strtol_l.isra.0+0xec>
 80084d4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80084d8:	6011      	str	r1, [r2, #0]
 80084da:	e7f2      	b.n	80084c2 <_strtol_l.isra.0+0xd6>
 80084dc:	2430      	movs	r4, #48	; 0x30
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1b3      	bne.n	800844a <_strtol_l.isra.0+0x5e>
 80084e2:	2308      	movs	r3, #8
 80084e4:	e7b1      	b.n	800844a <_strtol_l.isra.0+0x5e>
 80084e6:	2c30      	cmp	r4, #48	; 0x30
 80084e8:	d0a4      	beq.n	8008434 <_strtol_l.isra.0+0x48>
 80084ea:	230a      	movs	r3, #10
 80084ec:	e7ad      	b.n	800844a <_strtol_l.isra.0+0x5e>
 80084ee:	bf00      	nop
 80084f0:	0800b08d 	.word	0x0800b08d

080084f4 <strtol>:
 80084f4:	4613      	mov	r3, r2
 80084f6:	460a      	mov	r2, r1
 80084f8:	4601      	mov	r1, r0
 80084fa:	4802      	ldr	r0, [pc, #8]	; (8008504 <strtol+0x10>)
 80084fc:	6800      	ldr	r0, [r0, #0]
 80084fe:	f7ff bf75 	b.w	80083ec <_strtol_l.isra.0>
 8008502:	bf00      	nop
 8008504:	2000001c 	.word	0x2000001c

08008508 <__assert_func>:
 8008508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800850a:	4614      	mov	r4, r2
 800850c:	461a      	mov	r2, r3
 800850e:	4b09      	ldr	r3, [pc, #36]	; (8008534 <__assert_func+0x2c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4605      	mov	r5, r0
 8008514:	68d8      	ldr	r0, [r3, #12]
 8008516:	b14c      	cbz	r4, 800852c <__assert_func+0x24>
 8008518:	4b07      	ldr	r3, [pc, #28]	; (8008538 <__assert_func+0x30>)
 800851a:	9100      	str	r1, [sp, #0]
 800851c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008520:	4906      	ldr	r1, [pc, #24]	; (800853c <__assert_func+0x34>)
 8008522:	462b      	mov	r3, r5
 8008524:	f000 f80e 	bl	8008544 <fiprintf>
 8008528:	f000 fd5a 	bl	8008fe0 <abort>
 800852c:	4b04      	ldr	r3, [pc, #16]	; (8008540 <__assert_func+0x38>)
 800852e:	461c      	mov	r4, r3
 8008530:	e7f3      	b.n	800851a <__assert_func+0x12>
 8008532:	bf00      	nop
 8008534:	2000001c 	.word	0x2000001c
 8008538:	0800b050 	.word	0x0800b050
 800853c:	0800b05d 	.word	0x0800b05d
 8008540:	0800b08b 	.word	0x0800b08b

08008544 <fiprintf>:
 8008544:	b40e      	push	{r1, r2, r3}
 8008546:	b503      	push	{r0, r1, lr}
 8008548:	4601      	mov	r1, r0
 800854a:	ab03      	add	r3, sp, #12
 800854c:	4805      	ldr	r0, [pc, #20]	; (8008564 <fiprintf+0x20>)
 800854e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008552:	6800      	ldr	r0, [r0, #0]
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	f000 f9bf 	bl	80088d8 <_vfiprintf_r>
 800855a:	b002      	add	sp, #8
 800855c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008560:	b003      	add	sp, #12
 8008562:	4770      	bx	lr
 8008564:	2000001c 	.word	0x2000001c

08008568 <__malloc_lock>:
 8008568:	4801      	ldr	r0, [pc, #4]	; (8008570 <__malloc_lock+0x8>)
 800856a:	f000 bef9 	b.w	8009360 <__retarget_lock_acquire_recursive>
 800856e:	bf00      	nop
 8008570:	20000604 	.word	0x20000604

08008574 <__malloc_unlock>:
 8008574:	4801      	ldr	r0, [pc, #4]	; (800857c <__malloc_unlock+0x8>)
 8008576:	f000 bef4 	b.w	8009362 <__retarget_lock_release_recursive>
 800857a:	bf00      	nop
 800857c:	20000604 	.word	0x20000604

08008580 <_realloc_r>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	4607      	mov	r7, r0
 8008584:	4614      	mov	r4, r2
 8008586:	460e      	mov	r6, r1
 8008588:	b921      	cbnz	r1, 8008594 <_realloc_r+0x14>
 800858a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800858e:	4611      	mov	r1, r2
 8008590:	f7ff be02 	b.w	8008198 <_malloc_r>
 8008594:	b922      	cbnz	r2, 80085a0 <_realloc_r+0x20>
 8008596:	f7ff fdaf 	bl	80080f8 <_free_r>
 800859a:	4625      	mov	r5, r4
 800859c:	4628      	mov	r0, r5
 800859e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a0:	f000 ff6c 	bl	800947c <_malloc_usable_size_r>
 80085a4:	42a0      	cmp	r0, r4
 80085a6:	d20f      	bcs.n	80085c8 <_realloc_r+0x48>
 80085a8:	4621      	mov	r1, r4
 80085aa:	4638      	mov	r0, r7
 80085ac:	f7ff fdf4 	bl	8008198 <_malloc_r>
 80085b0:	4605      	mov	r5, r0
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d0f2      	beq.n	800859c <_realloc_r+0x1c>
 80085b6:	4631      	mov	r1, r6
 80085b8:	4622      	mov	r2, r4
 80085ba:	f000 ff37 	bl	800942c <memcpy>
 80085be:	4631      	mov	r1, r6
 80085c0:	4638      	mov	r0, r7
 80085c2:	f7ff fd99 	bl	80080f8 <_free_r>
 80085c6:	e7e9      	b.n	800859c <_realloc_r+0x1c>
 80085c8:	4635      	mov	r5, r6
 80085ca:	e7e7      	b.n	800859c <_realloc_r+0x1c>

080085cc <__ssputs_r>:
 80085cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	688e      	ldr	r6, [r1, #8]
 80085d2:	429e      	cmp	r6, r3
 80085d4:	4682      	mov	sl, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	4690      	mov	r8, r2
 80085da:	461f      	mov	r7, r3
 80085dc:	d838      	bhi.n	8008650 <__ssputs_r+0x84>
 80085de:	898a      	ldrh	r2, [r1, #12]
 80085e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085e4:	d032      	beq.n	800864c <__ssputs_r+0x80>
 80085e6:	6825      	ldr	r5, [r4, #0]
 80085e8:	6909      	ldr	r1, [r1, #16]
 80085ea:	eba5 0901 	sub.w	r9, r5, r1
 80085ee:	6965      	ldr	r5, [r4, #20]
 80085f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085f8:	3301      	adds	r3, #1
 80085fa:	444b      	add	r3, r9
 80085fc:	106d      	asrs	r5, r5, #1
 80085fe:	429d      	cmp	r5, r3
 8008600:	bf38      	it	cc
 8008602:	461d      	movcc	r5, r3
 8008604:	0553      	lsls	r3, r2, #21
 8008606:	d531      	bpl.n	800866c <__ssputs_r+0xa0>
 8008608:	4629      	mov	r1, r5
 800860a:	f7ff fdc5 	bl	8008198 <_malloc_r>
 800860e:	4606      	mov	r6, r0
 8008610:	b950      	cbnz	r0, 8008628 <__ssputs_r+0x5c>
 8008612:	230c      	movs	r3, #12
 8008614:	f8ca 3000 	str.w	r3, [sl]
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800861e:	81a3      	strh	r3, [r4, #12]
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008628:	6921      	ldr	r1, [r4, #16]
 800862a:	464a      	mov	r2, r9
 800862c:	f000 fefe 	bl	800942c <memcpy>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	6126      	str	r6, [r4, #16]
 800863e:	6165      	str	r5, [r4, #20]
 8008640:	444e      	add	r6, r9
 8008642:	eba5 0509 	sub.w	r5, r5, r9
 8008646:	6026      	str	r6, [r4, #0]
 8008648:	60a5      	str	r5, [r4, #8]
 800864a:	463e      	mov	r6, r7
 800864c:	42be      	cmp	r6, r7
 800864e:	d900      	bls.n	8008652 <__ssputs_r+0x86>
 8008650:	463e      	mov	r6, r7
 8008652:	4632      	mov	r2, r6
 8008654:	6820      	ldr	r0, [r4, #0]
 8008656:	4641      	mov	r1, r8
 8008658:	f000 fef6 	bl	8009448 <memmove>
 800865c:	68a3      	ldr	r3, [r4, #8]
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	1b9b      	subs	r3, r3, r6
 8008662:	4432      	add	r2, r6
 8008664:	60a3      	str	r3, [r4, #8]
 8008666:	6022      	str	r2, [r4, #0]
 8008668:	2000      	movs	r0, #0
 800866a:	e7db      	b.n	8008624 <__ssputs_r+0x58>
 800866c:	462a      	mov	r2, r5
 800866e:	f7ff ff87 	bl	8008580 <_realloc_r>
 8008672:	4606      	mov	r6, r0
 8008674:	2800      	cmp	r0, #0
 8008676:	d1e1      	bne.n	800863c <__ssputs_r+0x70>
 8008678:	6921      	ldr	r1, [r4, #16]
 800867a:	4650      	mov	r0, sl
 800867c:	f7ff fd3c 	bl	80080f8 <_free_r>
 8008680:	e7c7      	b.n	8008612 <__ssputs_r+0x46>
	...

08008684 <_svfiprintf_r>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	4698      	mov	r8, r3
 800868a:	898b      	ldrh	r3, [r1, #12]
 800868c:	061b      	lsls	r3, r3, #24
 800868e:	b09d      	sub	sp, #116	; 0x74
 8008690:	4607      	mov	r7, r0
 8008692:	460d      	mov	r5, r1
 8008694:	4614      	mov	r4, r2
 8008696:	d50e      	bpl.n	80086b6 <_svfiprintf_r+0x32>
 8008698:	690b      	ldr	r3, [r1, #16]
 800869a:	b963      	cbnz	r3, 80086b6 <_svfiprintf_r+0x32>
 800869c:	2140      	movs	r1, #64	; 0x40
 800869e:	f7ff fd7b 	bl	8008198 <_malloc_r>
 80086a2:	6028      	str	r0, [r5, #0]
 80086a4:	6128      	str	r0, [r5, #16]
 80086a6:	b920      	cbnz	r0, 80086b2 <_svfiprintf_r+0x2e>
 80086a8:	230c      	movs	r3, #12
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295
 80086b0:	e0d1      	b.n	8008856 <_svfiprintf_r+0x1d2>
 80086b2:	2340      	movs	r3, #64	; 0x40
 80086b4:	616b      	str	r3, [r5, #20]
 80086b6:	2300      	movs	r3, #0
 80086b8:	9309      	str	r3, [sp, #36]	; 0x24
 80086ba:	2320      	movs	r3, #32
 80086bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086c4:	2330      	movs	r3, #48	; 0x30
 80086c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008870 <_svfiprintf_r+0x1ec>
 80086ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086ce:	f04f 0901 	mov.w	r9, #1
 80086d2:	4623      	mov	r3, r4
 80086d4:	469a      	mov	sl, r3
 80086d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086da:	b10a      	cbz	r2, 80086e0 <_svfiprintf_r+0x5c>
 80086dc:	2a25      	cmp	r2, #37	; 0x25
 80086de:	d1f9      	bne.n	80086d4 <_svfiprintf_r+0x50>
 80086e0:	ebba 0b04 	subs.w	fp, sl, r4
 80086e4:	d00b      	beq.n	80086fe <_svfiprintf_r+0x7a>
 80086e6:	465b      	mov	r3, fp
 80086e8:	4622      	mov	r2, r4
 80086ea:	4629      	mov	r1, r5
 80086ec:	4638      	mov	r0, r7
 80086ee:	f7ff ff6d 	bl	80085cc <__ssputs_r>
 80086f2:	3001      	adds	r0, #1
 80086f4:	f000 80aa 	beq.w	800884c <_svfiprintf_r+0x1c8>
 80086f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086fa:	445a      	add	r2, fp
 80086fc:	9209      	str	r2, [sp, #36]	; 0x24
 80086fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 80a2 	beq.w	800884c <_svfiprintf_r+0x1c8>
 8008708:	2300      	movs	r3, #0
 800870a:	f04f 32ff 	mov.w	r2, #4294967295
 800870e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008712:	f10a 0a01 	add.w	sl, sl, #1
 8008716:	9304      	str	r3, [sp, #16]
 8008718:	9307      	str	r3, [sp, #28]
 800871a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800871e:	931a      	str	r3, [sp, #104]	; 0x68
 8008720:	4654      	mov	r4, sl
 8008722:	2205      	movs	r2, #5
 8008724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008728:	4851      	ldr	r0, [pc, #324]	; (8008870 <_svfiprintf_r+0x1ec>)
 800872a:	f7f7 fda1 	bl	8000270 <memchr>
 800872e:	9a04      	ldr	r2, [sp, #16]
 8008730:	b9d8      	cbnz	r0, 800876a <_svfiprintf_r+0xe6>
 8008732:	06d0      	lsls	r0, r2, #27
 8008734:	bf44      	itt	mi
 8008736:	2320      	movmi	r3, #32
 8008738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800873c:	0711      	lsls	r1, r2, #28
 800873e:	bf44      	itt	mi
 8008740:	232b      	movmi	r3, #43	; 0x2b
 8008742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008746:	f89a 3000 	ldrb.w	r3, [sl]
 800874a:	2b2a      	cmp	r3, #42	; 0x2a
 800874c:	d015      	beq.n	800877a <_svfiprintf_r+0xf6>
 800874e:	9a07      	ldr	r2, [sp, #28]
 8008750:	4654      	mov	r4, sl
 8008752:	2000      	movs	r0, #0
 8008754:	f04f 0c0a 	mov.w	ip, #10
 8008758:	4621      	mov	r1, r4
 800875a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800875e:	3b30      	subs	r3, #48	; 0x30
 8008760:	2b09      	cmp	r3, #9
 8008762:	d94e      	bls.n	8008802 <_svfiprintf_r+0x17e>
 8008764:	b1b0      	cbz	r0, 8008794 <_svfiprintf_r+0x110>
 8008766:	9207      	str	r2, [sp, #28]
 8008768:	e014      	b.n	8008794 <_svfiprintf_r+0x110>
 800876a:	eba0 0308 	sub.w	r3, r0, r8
 800876e:	fa09 f303 	lsl.w	r3, r9, r3
 8008772:	4313      	orrs	r3, r2
 8008774:	9304      	str	r3, [sp, #16]
 8008776:	46a2      	mov	sl, r4
 8008778:	e7d2      	b.n	8008720 <_svfiprintf_r+0x9c>
 800877a:	9b03      	ldr	r3, [sp, #12]
 800877c:	1d19      	adds	r1, r3, #4
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	9103      	str	r1, [sp, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	bfbb      	ittet	lt
 8008786:	425b      	neglt	r3, r3
 8008788:	f042 0202 	orrlt.w	r2, r2, #2
 800878c:	9307      	strge	r3, [sp, #28]
 800878e:	9307      	strlt	r3, [sp, #28]
 8008790:	bfb8      	it	lt
 8008792:	9204      	strlt	r2, [sp, #16]
 8008794:	7823      	ldrb	r3, [r4, #0]
 8008796:	2b2e      	cmp	r3, #46	; 0x2e
 8008798:	d10c      	bne.n	80087b4 <_svfiprintf_r+0x130>
 800879a:	7863      	ldrb	r3, [r4, #1]
 800879c:	2b2a      	cmp	r3, #42	; 0x2a
 800879e:	d135      	bne.n	800880c <_svfiprintf_r+0x188>
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	1d1a      	adds	r2, r3, #4
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	9203      	str	r2, [sp, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	bfb8      	it	lt
 80087ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80087b0:	3402      	adds	r4, #2
 80087b2:	9305      	str	r3, [sp, #20]
 80087b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008880 <_svfiprintf_r+0x1fc>
 80087b8:	7821      	ldrb	r1, [r4, #0]
 80087ba:	2203      	movs	r2, #3
 80087bc:	4650      	mov	r0, sl
 80087be:	f7f7 fd57 	bl	8000270 <memchr>
 80087c2:	b140      	cbz	r0, 80087d6 <_svfiprintf_r+0x152>
 80087c4:	2340      	movs	r3, #64	; 0x40
 80087c6:	eba0 000a 	sub.w	r0, r0, sl
 80087ca:	fa03 f000 	lsl.w	r0, r3, r0
 80087ce:	9b04      	ldr	r3, [sp, #16]
 80087d0:	4303      	orrs	r3, r0
 80087d2:	3401      	adds	r4, #1
 80087d4:	9304      	str	r3, [sp, #16]
 80087d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087da:	4826      	ldr	r0, [pc, #152]	; (8008874 <_svfiprintf_r+0x1f0>)
 80087dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087e0:	2206      	movs	r2, #6
 80087e2:	f7f7 fd45 	bl	8000270 <memchr>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d038      	beq.n	800885c <_svfiprintf_r+0x1d8>
 80087ea:	4b23      	ldr	r3, [pc, #140]	; (8008878 <_svfiprintf_r+0x1f4>)
 80087ec:	bb1b      	cbnz	r3, 8008836 <_svfiprintf_r+0x1b2>
 80087ee:	9b03      	ldr	r3, [sp, #12]
 80087f0:	3307      	adds	r3, #7
 80087f2:	f023 0307 	bic.w	r3, r3, #7
 80087f6:	3308      	adds	r3, #8
 80087f8:	9303      	str	r3, [sp, #12]
 80087fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fc:	4433      	add	r3, r6
 80087fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008800:	e767      	b.n	80086d2 <_svfiprintf_r+0x4e>
 8008802:	fb0c 3202 	mla	r2, ip, r2, r3
 8008806:	460c      	mov	r4, r1
 8008808:	2001      	movs	r0, #1
 800880a:	e7a5      	b.n	8008758 <_svfiprintf_r+0xd4>
 800880c:	2300      	movs	r3, #0
 800880e:	3401      	adds	r4, #1
 8008810:	9305      	str	r3, [sp, #20]
 8008812:	4619      	mov	r1, r3
 8008814:	f04f 0c0a 	mov.w	ip, #10
 8008818:	4620      	mov	r0, r4
 800881a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800881e:	3a30      	subs	r2, #48	; 0x30
 8008820:	2a09      	cmp	r2, #9
 8008822:	d903      	bls.n	800882c <_svfiprintf_r+0x1a8>
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0c5      	beq.n	80087b4 <_svfiprintf_r+0x130>
 8008828:	9105      	str	r1, [sp, #20]
 800882a:	e7c3      	b.n	80087b4 <_svfiprintf_r+0x130>
 800882c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008830:	4604      	mov	r4, r0
 8008832:	2301      	movs	r3, #1
 8008834:	e7f0      	b.n	8008818 <_svfiprintf_r+0x194>
 8008836:	ab03      	add	r3, sp, #12
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	462a      	mov	r2, r5
 800883c:	4b0f      	ldr	r3, [pc, #60]	; (800887c <_svfiprintf_r+0x1f8>)
 800883e:	a904      	add	r1, sp, #16
 8008840:	4638      	mov	r0, r7
 8008842:	f3af 8000 	nop.w
 8008846:	1c42      	adds	r2, r0, #1
 8008848:	4606      	mov	r6, r0
 800884a:	d1d6      	bne.n	80087fa <_svfiprintf_r+0x176>
 800884c:	89ab      	ldrh	r3, [r5, #12]
 800884e:	065b      	lsls	r3, r3, #25
 8008850:	f53f af2c 	bmi.w	80086ac <_svfiprintf_r+0x28>
 8008854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008856:	b01d      	add	sp, #116	; 0x74
 8008858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885c:	ab03      	add	r3, sp, #12
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	462a      	mov	r2, r5
 8008862:	4b06      	ldr	r3, [pc, #24]	; (800887c <_svfiprintf_r+0x1f8>)
 8008864:	a904      	add	r1, sp, #16
 8008866:	4638      	mov	r0, r7
 8008868:	f000 f9d4 	bl	8008c14 <_printf_i>
 800886c:	e7eb      	b.n	8008846 <_svfiprintf_r+0x1c2>
 800886e:	bf00      	nop
 8008870:	0800b18d 	.word	0x0800b18d
 8008874:	0800b197 	.word	0x0800b197
 8008878:	00000000 	.word	0x00000000
 800887c:	080085cd 	.word	0x080085cd
 8008880:	0800b193 	.word	0x0800b193

08008884 <__sfputc_r>:
 8008884:	6893      	ldr	r3, [r2, #8]
 8008886:	3b01      	subs	r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	b410      	push	{r4}
 800888c:	6093      	str	r3, [r2, #8]
 800888e:	da08      	bge.n	80088a2 <__sfputc_r+0x1e>
 8008890:	6994      	ldr	r4, [r2, #24]
 8008892:	42a3      	cmp	r3, r4
 8008894:	db01      	blt.n	800889a <__sfputc_r+0x16>
 8008896:	290a      	cmp	r1, #10
 8008898:	d103      	bne.n	80088a2 <__sfputc_r+0x1e>
 800889a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800889e:	f000 badf 	b.w	8008e60 <__swbuf_r>
 80088a2:	6813      	ldr	r3, [r2, #0]
 80088a4:	1c58      	adds	r0, r3, #1
 80088a6:	6010      	str	r0, [r2, #0]
 80088a8:	7019      	strb	r1, [r3, #0]
 80088aa:	4608      	mov	r0, r1
 80088ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <__sfputs_r>:
 80088b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b4:	4606      	mov	r6, r0
 80088b6:	460f      	mov	r7, r1
 80088b8:	4614      	mov	r4, r2
 80088ba:	18d5      	adds	r5, r2, r3
 80088bc:	42ac      	cmp	r4, r5
 80088be:	d101      	bne.n	80088c4 <__sfputs_r+0x12>
 80088c0:	2000      	movs	r0, #0
 80088c2:	e007      	b.n	80088d4 <__sfputs_r+0x22>
 80088c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c8:	463a      	mov	r2, r7
 80088ca:	4630      	mov	r0, r6
 80088cc:	f7ff ffda 	bl	8008884 <__sfputc_r>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d1f3      	bne.n	80088bc <__sfputs_r+0xa>
 80088d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088d8 <_vfiprintf_r>:
 80088d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	460d      	mov	r5, r1
 80088de:	b09d      	sub	sp, #116	; 0x74
 80088e0:	4614      	mov	r4, r2
 80088e2:	4698      	mov	r8, r3
 80088e4:	4606      	mov	r6, r0
 80088e6:	b118      	cbz	r0, 80088f0 <_vfiprintf_r+0x18>
 80088e8:	6983      	ldr	r3, [r0, #24]
 80088ea:	b90b      	cbnz	r3, 80088f0 <_vfiprintf_r+0x18>
 80088ec:	f000 fc9a 	bl	8009224 <__sinit>
 80088f0:	4b89      	ldr	r3, [pc, #548]	; (8008b18 <_vfiprintf_r+0x240>)
 80088f2:	429d      	cmp	r5, r3
 80088f4:	d11b      	bne.n	800892e <_vfiprintf_r+0x56>
 80088f6:	6875      	ldr	r5, [r6, #4]
 80088f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088fa:	07d9      	lsls	r1, r3, #31
 80088fc:	d405      	bmi.n	800890a <_vfiprintf_r+0x32>
 80088fe:	89ab      	ldrh	r3, [r5, #12]
 8008900:	059a      	lsls	r2, r3, #22
 8008902:	d402      	bmi.n	800890a <_vfiprintf_r+0x32>
 8008904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008906:	f000 fd2b 	bl	8009360 <__retarget_lock_acquire_recursive>
 800890a:	89ab      	ldrh	r3, [r5, #12]
 800890c:	071b      	lsls	r3, r3, #28
 800890e:	d501      	bpl.n	8008914 <_vfiprintf_r+0x3c>
 8008910:	692b      	ldr	r3, [r5, #16]
 8008912:	b9eb      	cbnz	r3, 8008950 <_vfiprintf_r+0x78>
 8008914:	4629      	mov	r1, r5
 8008916:	4630      	mov	r0, r6
 8008918:	f000 faf4 	bl	8008f04 <__swsetup_r>
 800891c:	b1c0      	cbz	r0, 8008950 <_vfiprintf_r+0x78>
 800891e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008920:	07dc      	lsls	r4, r3, #31
 8008922:	d50e      	bpl.n	8008942 <_vfiprintf_r+0x6a>
 8008924:	f04f 30ff 	mov.w	r0, #4294967295
 8008928:	b01d      	add	sp, #116	; 0x74
 800892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892e:	4b7b      	ldr	r3, [pc, #492]	; (8008b1c <_vfiprintf_r+0x244>)
 8008930:	429d      	cmp	r5, r3
 8008932:	d101      	bne.n	8008938 <_vfiprintf_r+0x60>
 8008934:	68b5      	ldr	r5, [r6, #8]
 8008936:	e7df      	b.n	80088f8 <_vfiprintf_r+0x20>
 8008938:	4b79      	ldr	r3, [pc, #484]	; (8008b20 <_vfiprintf_r+0x248>)
 800893a:	429d      	cmp	r5, r3
 800893c:	bf08      	it	eq
 800893e:	68f5      	ldreq	r5, [r6, #12]
 8008940:	e7da      	b.n	80088f8 <_vfiprintf_r+0x20>
 8008942:	89ab      	ldrh	r3, [r5, #12]
 8008944:	0598      	lsls	r0, r3, #22
 8008946:	d4ed      	bmi.n	8008924 <_vfiprintf_r+0x4c>
 8008948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800894a:	f000 fd0a 	bl	8009362 <__retarget_lock_release_recursive>
 800894e:	e7e9      	b.n	8008924 <_vfiprintf_r+0x4c>
 8008950:	2300      	movs	r3, #0
 8008952:	9309      	str	r3, [sp, #36]	; 0x24
 8008954:	2320      	movs	r3, #32
 8008956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800895a:	f8cd 800c 	str.w	r8, [sp, #12]
 800895e:	2330      	movs	r3, #48	; 0x30
 8008960:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b24 <_vfiprintf_r+0x24c>
 8008964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008968:	f04f 0901 	mov.w	r9, #1
 800896c:	4623      	mov	r3, r4
 800896e:	469a      	mov	sl, r3
 8008970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008974:	b10a      	cbz	r2, 800897a <_vfiprintf_r+0xa2>
 8008976:	2a25      	cmp	r2, #37	; 0x25
 8008978:	d1f9      	bne.n	800896e <_vfiprintf_r+0x96>
 800897a:	ebba 0b04 	subs.w	fp, sl, r4
 800897e:	d00b      	beq.n	8008998 <_vfiprintf_r+0xc0>
 8008980:	465b      	mov	r3, fp
 8008982:	4622      	mov	r2, r4
 8008984:	4629      	mov	r1, r5
 8008986:	4630      	mov	r0, r6
 8008988:	f7ff ff93 	bl	80088b2 <__sfputs_r>
 800898c:	3001      	adds	r0, #1
 800898e:	f000 80aa 	beq.w	8008ae6 <_vfiprintf_r+0x20e>
 8008992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008994:	445a      	add	r2, fp
 8008996:	9209      	str	r2, [sp, #36]	; 0x24
 8008998:	f89a 3000 	ldrb.w	r3, [sl]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 80a2 	beq.w	8008ae6 <_vfiprintf_r+0x20e>
 80089a2:	2300      	movs	r3, #0
 80089a4:	f04f 32ff 	mov.w	r2, #4294967295
 80089a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089ac:	f10a 0a01 	add.w	sl, sl, #1
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	9307      	str	r3, [sp, #28]
 80089b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089b8:	931a      	str	r3, [sp, #104]	; 0x68
 80089ba:	4654      	mov	r4, sl
 80089bc:	2205      	movs	r2, #5
 80089be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c2:	4858      	ldr	r0, [pc, #352]	; (8008b24 <_vfiprintf_r+0x24c>)
 80089c4:	f7f7 fc54 	bl	8000270 <memchr>
 80089c8:	9a04      	ldr	r2, [sp, #16]
 80089ca:	b9d8      	cbnz	r0, 8008a04 <_vfiprintf_r+0x12c>
 80089cc:	06d1      	lsls	r1, r2, #27
 80089ce:	bf44      	itt	mi
 80089d0:	2320      	movmi	r3, #32
 80089d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089d6:	0713      	lsls	r3, r2, #28
 80089d8:	bf44      	itt	mi
 80089da:	232b      	movmi	r3, #43	; 0x2b
 80089dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089e0:	f89a 3000 	ldrb.w	r3, [sl]
 80089e4:	2b2a      	cmp	r3, #42	; 0x2a
 80089e6:	d015      	beq.n	8008a14 <_vfiprintf_r+0x13c>
 80089e8:	9a07      	ldr	r2, [sp, #28]
 80089ea:	4654      	mov	r4, sl
 80089ec:	2000      	movs	r0, #0
 80089ee:	f04f 0c0a 	mov.w	ip, #10
 80089f2:	4621      	mov	r1, r4
 80089f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f8:	3b30      	subs	r3, #48	; 0x30
 80089fa:	2b09      	cmp	r3, #9
 80089fc:	d94e      	bls.n	8008a9c <_vfiprintf_r+0x1c4>
 80089fe:	b1b0      	cbz	r0, 8008a2e <_vfiprintf_r+0x156>
 8008a00:	9207      	str	r2, [sp, #28]
 8008a02:	e014      	b.n	8008a2e <_vfiprintf_r+0x156>
 8008a04:	eba0 0308 	sub.w	r3, r0, r8
 8008a08:	fa09 f303 	lsl.w	r3, r9, r3
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	9304      	str	r3, [sp, #16]
 8008a10:	46a2      	mov	sl, r4
 8008a12:	e7d2      	b.n	80089ba <_vfiprintf_r+0xe2>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	1d19      	adds	r1, r3, #4
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	9103      	str	r1, [sp, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bfbb      	ittet	lt
 8008a20:	425b      	neglt	r3, r3
 8008a22:	f042 0202 	orrlt.w	r2, r2, #2
 8008a26:	9307      	strge	r3, [sp, #28]
 8008a28:	9307      	strlt	r3, [sp, #28]
 8008a2a:	bfb8      	it	lt
 8008a2c:	9204      	strlt	r2, [sp, #16]
 8008a2e:	7823      	ldrb	r3, [r4, #0]
 8008a30:	2b2e      	cmp	r3, #46	; 0x2e
 8008a32:	d10c      	bne.n	8008a4e <_vfiprintf_r+0x176>
 8008a34:	7863      	ldrb	r3, [r4, #1]
 8008a36:	2b2a      	cmp	r3, #42	; 0x2a
 8008a38:	d135      	bne.n	8008aa6 <_vfiprintf_r+0x1ce>
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	1d1a      	adds	r2, r3, #4
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	9203      	str	r2, [sp, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	bfb8      	it	lt
 8008a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a4a:	3402      	adds	r4, #2
 8008a4c:	9305      	str	r3, [sp, #20]
 8008a4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b34 <_vfiprintf_r+0x25c>
 8008a52:	7821      	ldrb	r1, [r4, #0]
 8008a54:	2203      	movs	r2, #3
 8008a56:	4650      	mov	r0, sl
 8008a58:	f7f7 fc0a 	bl	8000270 <memchr>
 8008a5c:	b140      	cbz	r0, 8008a70 <_vfiprintf_r+0x198>
 8008a5e:	2340      	movs	r3, #64	; 0x40
 8008a60:	eba0 000a 	sub.w	r0, r0, sl
 8008a64:	fa03 f000 	lsl.w	r0, r3, r0
 8008a68:	9b04      	ldr	r3, [sp, #16]
 8008a6a:	4303      	orrs	r3, r0
 8008a6c:	3401      	adds	r4, #1
 8008a6e:	9304      	str	r3, [sp, #16]
 8008a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a74:	482c      	ldr	r0, [pc, #176]	; (8008b28 <_vfiprintf_r+0x250>)
 8008a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a7a:	2206      	movs	r2, #6
 8008a7c:	f7f7 fbf8 	bl	8000270 <memchr>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d03f      	beq.n	8008b04 <_vfiprintf_r+0x22c>
 8008a84:	4b29      	ldr	r3, [pc, #164]	; (8008b2c <_vfiprintf_r+0x254>)
 8008a86:	bb1b      	cbnz	r3, 8008ad0 <_vfiprintf_r+0x1f8>
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	3307      	adds	r3, #7
 8008a8c:	f023 0307 	bic.w	r3, r3, #7
 8008a90:	3308      	adds	r3, #8
 8008a92:	9303      	str	r3, [sp, #12]
 8008a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a96:	443b      	add	r3, r7
 8008a98:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9a:	e767      	b.n	800896c <_vfiprintf_r+0x94>
 8008a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	e7a5      	b.n	80089f2 <_vfiprintf_r+0x11a>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	3401      	adds	r4, #1
 8008aaa:	9305      	str	r3, [sp, #20]
 8008aac:	4619      	mov	r1, r3
 8008aae:	f04f 0c0a 	mov.w	ip, #10
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab8:	3a30      	subs	r2, #48	; 0x30
 8008aba:	2a09      	cmp	r2, #9
 8008abc:	d903      	bls.n	8008ac6 <_vfiprintf_r+0x1ee>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0c5      	beq.n	8008a4e <_vfiprintf_r+0x176>
 8008ac2:	9105      	str	r1, [sp, #20]
 8008ac4:	e7c3      	b.n	8008a4e <_vfiprintf_r+0x176>
 8008ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aca:	4604      	mov	r4, r0
 8008acc:	2301      	movs	r3, #1
 8008ace:	e7f0      	b.n	8008ab2 <_vfiprintf_r+0x1da>
 8008ad0:	ab03      	add	r3, sp, #12
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	462a      	mov	r2, r5
 8008ad6:	4b16      	ldr	r3, [pc, #88]	; (8008b30 <_vfiprintf_r+0x258>)
 8008ad8:	a904      	add	r1, sp, #16
 8008ada:	4630      	mov	r0, r6
 8008adc:	f3af 8000 	nop.w
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	1c78      	adds	r0, r7, #1
 8008ae4:	d1d6      	bne.n	8008a94 <_vfiprintf_r+0x1bc>
 8008ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ae8:	07d9      	lsls	r1, r3, #31
 8008aea:	d405      	bmi.n	8008af8 <_vfiprintf_r+0x220>
 8008aec:	89ab      	ldrh	r3, [r5, #12]
 8008aee:	059a      	lsls	r2, r3, #22
 8008af0:	d402      	bmi.n	8008af8 <_vfiprintf_r+0x220>
 8008af2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008af4:	f000 fc35 	bl	8009362 <__retarget_lock_release_recursive>
 8008af8:	89ab      	ldrh	r3, [r5, #12]
 8008afa:	065b      	lsls	r3, r3, #25
 8008afc:	f53f af12 	bmi.w	8008924 <_vfiprintf_r+0x4c>
 8008b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b02:	e711      	b.n	8008928 <_vfiprintf_r+0x50>
 8008b04:	ab03      	add	r3, sp, #12
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	462a      	mov	r2, r5
 8008b0a:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <_vfiprintf_r+0x258>)
 8008b0c:	a904      	add	r1, sp, #16
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f000 f880 	bl	8008c14 <_printf_i>
 8008b14:	e7e4      	b.n	8008ae0 <_vfiprintf_r+0x208>
 8008b16:	bf00      	nop
 8008b18:	0800b1e0 	.word	0x0800b1e0
 8008b1c:	0800b200 	.word	0x0800b200
 8008b20:	0800b1c0 	.word	0x0800b1c0
 8008b24:	0800b18d 	.word	0x0800b18d
 8008b28:	0800b197 	.word	0x0800b197
 8008b2c:	00000000 	.word	0x00000000
 8008b30:	080088b3 	.word	0x080088b3
 8008b34:	0800b193 	.word	0x0800b193

08008b38 <_printf_common>:
 8008b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3c:	4616      	mov	r6, r2
 8008b3e:	4699      	mov	r9, r3
 8008b40:	688a      	ldr	r2, [r1, #8]
 8008b42:	690b      	ldr	r3, [r1, #16]
 8008b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	bfb8      	it	lt
 8008b4c:	4613      	movlt	r3, r2
 8008b4e:	6033      	str	r3, [r6, #0]
 8008b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b54:	4607      	mov	r7, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	b10a      	cbz	r2, 8008b5e <_printf_common+0x26>
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	6033      	str	r3, [r6, #0]
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	0699      	lsls	r1, r3, #26
 8008b62:	bf42      	ittt	mi
 8008b64:	6833      	ldrmi	r3, [r6, #0]
 8008b66:	3302      	addmi	r3, #2
 8008b68:	6033      	strmi	r3, [r6, #0]
 8008b6a:	6825      	ldr	r5, [r4, #0]
 8008b6c:	f015 0506 	ands.w	r5, r5, #6
 8008b70:	d106      	bne.n	8008b80 <_printf_common+0x48>
 8008b72:	f104 0a19 	add.w	sl, r4, #25
 8008b76:	68e3      	ldr	r3, [r4, #12]
 8008b78:	6832      	ldr	r2, [r6, #0]
 8008b7a:	1a9b      	subs	r3, r3, r2
 8008b7c:	42ab      	cmp	r3, r5
 8008b7e:	dc26      	bgt.n	8008bce <_printf_common+0x96>
 8008b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b84:	1e13      	subs	r3, r2, #0
 8008b86:	6822      	ldr	r2, [r4, #0]
 8008b88:	bf18      	it	ne
 8008b8a:	2301      	movne	r3, #1
 8008b8c:	0692      	lsls	r2, r2, #26
 8008b8e:	d42b      	bmi.n	8008be8 <_printf_common+0xb0>
 8008b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b94:	4649      	mov	r1, r9
 8008b96:	4638      	mov	r0, r7
 8008b98:	47c0      	blx	r8
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d01e      	beq.n	8008bdc <_printf_common+0xa4>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	68e5      	ldr	r5, [r4, #12]
 8008ba2:	6832      	ldr	r2, [r6, #0]
 8008ba4:	f003 0306 	and.w	r3, r3, #6
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	bf08      	it	eq
 8008bac:	1aad      	subeq	r5, r5, r2
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	6922      	ldr	r2, [r4, #16]
 8008bb2:	bf0c      	ite	eq
 8008bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bb8:	2500      	movne	r5, #0
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	bfc4      	itt	gt
 8008bbe:	1a9b      	subgt	r3, r3, r2
 8008bc0:	18ed      	addgt	r5, r5, r3
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	341a      	adds	r4, #26
 8008bc6:	42b5      	cmp	r5, r6
 8008bc8:	d11a      	bne.n	8008c00 <_printf_common+0xc8>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	e008      	b.n	8008be0 <_printf_common+0xa8>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4652      	mov	r2, sl
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	47c0      	blx	r8
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d103      	bne.n	8008be4 <_printf_common+0xac>
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be4:	3501      	adds	r5, #1
 8008be6:	e7c6      	b.n	8008b76 <_printf_common+0x3e>
 8008be8:	18e1      	adds	r1, r4, r3
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	2030      	movs	r0, #48	; 0x30
 8008bee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bf2:	4422      	add	r2, r4
 8008bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bfc:	3302      	adds	r3, #2
 8008bfe:	e7c7      	b.n	8008b90 <_printf_common+0x58>
 8008c00:	2301      	movs	r3, #1
 8008c02:	4622      	mov	r2, r4
 8008c04:	4649      	mov	r1, r9
 8008c06:	4638      	mov	r0, r7
 8008c08:	47c0      	blx	r8
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	d0e6      	beq.n	8008bdc <_printf_common+0xa4>
 8008c0e:	3601      	adds	r6, #1
 8008c10:	e7d9      	b.n	8008bc6 <_printf_common+0x8e>
	...

08008c14 <_printf_i>:
 8008c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c18:	460c      	mov	r4, r1
 8008c1a:	4691      	mov	r9, r2
 8008c1c:	7e27      	ldrb	r7, [r4, #24]
 8008c1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c20:	2f78      	cmp	r7, #120	; 0x78
 8008c22:	4680      	mov	r8, r0
 8008c24:	469a      	mov	sl, r3
 8008c26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c2a:	d807      	bhi.n	8008c3c <_printf_i+0x28>
 8008c2c:	2f62      	cmp	r7, #98	; 0x62
 8008c2e:	d80a      	bhi.n	8008c46 <_printf_i+0x32>
 8008c30:	2f00      	cmp	r7, #0
 8008c32:	f000 80d8 	beq.w	8008de6 <_printf_i+0x1d2>
 8008c36:	2f58      	cmp	r7, #88	; 0x58
 8008c38:	f000 80a3 	beq.w	8008d82 <_printf_i+0x16e>
 8008c3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c44:	e03a      	b.n	8008cbc <_printf_i+0xa8>
 8008c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c4a:	2b15      	cmp	r3, #21
 8008c4c:	d8f6      	bhi.n	8008c3c <_printf_i+0x28>
 8008c4e:	a001      	add	r0, pc, #4	; (adr r0, 8008c54 <_printf_i+0x40>)
 8008c50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c54:	08008cad 	.word	0x08008cad
 8008c58:	08008cc1 	.word	0x08008cc1
 8008c5c:	08008c3d 	.word	0x08008c3d
 8008c60:	08008c3d 	.word	0x08008c3d
 8008c64:	08008c3d 	.word	0x08008c3d
 8008c68:	08008c3d 	.word	0x08008c3d
 8008c6c:	08008cc1 	.word	0x08008cc1
 8008c70:	08008c3d 	.word	0x08008c3d
 8008c74:	08008c3d 	.word	0x08008c3d
 8008c78:	08008c3d 	.word	0x08008c3d
 8008c7c:	08008c3d 	.word	0x08008c3d
 8008c80:	08008dcd 	.word	0x08008dcd
 8008c84:	08008cf1 	.word	0x08008cf1
 8008c88:	08008daf 	.word	0x08008daf
 8008c8c:	08008c3d 	.word	0x08008c3d
 8008c90:	08008c3d 	.word	0x08008c3d
 8008c94:	08008def 	.word	0x08008def
 8008c98:	08008c3d 	.word	0x08008c3d
 8008c9c:	08008cf1 	.word	0x08008cf1
 8008ca0:	08008c3d 	.word	0x08008c3d
 8008ca4:	08008c3d 	.word	0x08008c3d
 8008ca8:	08008db7 	.word	0x08008db7
 8008cac:	680b      	ldr	r3, [r1, #0]
 8008cae:	1d1a      	adds	r2, r3, #4
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	600a      	str	r2, [r1, #0]
 8008cb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e0a3      	b.n	8008e08 <_printf_i+0x1f4>
 8008cc0:	6825      	ldr	r5, [r4, #0]
 8008cc2:	6808      	ldr	r0, [r1, #0]
 8008cc4:	062e      	lsls	r6, r5, #24
 8008cc6:	f100 0304 	add.w	r3, r0, #4
 8008cca:	d50a      	bpl.n	8008ce2 <_printf_i+0xce>
 8008ccc:	6805      	ldr	r5, [r0, #0]
 8008cce:	600b      	str	r3, [r1, #0]
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	da03      	bge.n	8008cdc <_printf_i+0xc8>
 8008cd4:	232d      	movs	r3, #45	; 0x2d
 8008cd6:	426d      	negs	r5, r5
 8008cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cdc:	485e      	ldr	r0, [pc, #376]	; (8008e58 <_printf_i+0x244>)
 8008cde:	230a      	movs	r3, #10
 8008ce0:	e019      	b.n	8008d16 <_printf_i+0x102>
 8008ce2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008ce6:	6805      	ldr	r5, [r0, #0]
 8008ce8:	600b      	str	r3, [r1, #0]
 8008cea:	bf18      	it	ne
 8008cec:	b22d      	sxthne	r5, r5
 8008cee:	e7ef      	b.n	8008cd0 <_printf_i+0xbc>
 8008cf0:	680b      	ldr	r3, [r1, #0]
 8008cf2:	6825      	ldr	r5, [r4, #0]
 8008cf4:	1d18      	adds	r0, r3, #4
 8008cf6:	6008      	str	r0, [r1, #0]
 8008cf8:	0628      	lsls	r0, r5, #24
 8008cfa:	d501      	bpl.n	8008d00 <_printf_i+0xec>
 8008cfc:	681d      	ldr	r5, [r3, #0]
 8008cfe:	e002      	b.n	8008d06 <_printf_i+0xf2>
 8008d00:	0669      	lsls	r1, r5, #25
 8008d02:	d5fb      	bpl.n	8008cfc <_printf_i+0xe8>
 8008d04:	881d      	ldrh	r5, [r3, #0]
 8008d06:	4854      	ldr	r0, [pc, #336]	; (8008e58 <_printf_i+0x244>)
 8008d08:	2f6f      	cmp	r7, #111	; 0x6f
 8008d0a:	bf0c      	ite	eq
 8008d0c:	2308      	moveq	r3, #8
 8008d0e:	230a      	movne	r3, #10
 8008d10:	2100      	movs	r1, #0
 8008d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d16:	6866      	ldr	r6, [r4, #4]
 8008d18:	60a6      	str	r6, [r4, #8]
 8008d1a:	2e00      	cmp	r6, #0
 8008d1c:	bfa2      	ittt	ge
 8008d1e:	6821      	ldrge	r1, [r4, #0]
 8008d20:	f021 0104 	bicge.w	r1, r1, #4
 8008d24:	6021      	strge	r1, [r4, #0]
 8008d26:	b90d      	cbnz	r5, 8008d2c <_printf_i+0x118>
 8008d28:	2e00      	cmp	r6, #0
 8008d2a:	d04d      	beq.n	8008dc8 <_printf_i+0x1b4>
 8008d2c:	4616      	mov	r6, r2
 8008d2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d32:	fb03 5711 	mls	r7, r3, r1, r5
 8008d36:	5dc7      	ldrb	r7, [r0, r7]
 8008d38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d3c:	462f      	mov	r7, r5
 8008d3e:	42bb      	cmp	r3, r7
 8008d40:	460d      	mov	r5, r1
 8008d42:	d9f4      	bls.n	8008d2e <_printf_i+0x11a>
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d10b      	bne.n	8008d60 <_printf_i+0x14c>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	07df      	lsls	r7, r3, #31
 8008d4c:	d508      	bpl.n	8008d60 <_printf_i+0x14c>
 8008d4e:	6923      	ldr	r3, [r4, #16]
 8008d50:	6861      	ldr	r1, [r4, #4]
 8008d52:	4299      	cmp	r1, r3
 8008d54:	bfde      	ittt	le
 8008d56:	2330      	movle	r3, #48	; 0x30
 8008d58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d60:	1b92      	subs	r2, r2, r6
 8008d62:	6122      	str	r2, [r4, #16]
 8008d64:	f8cd a000 	str.w	sl, [sp]
 8008d68:	464b      	mov	r3, r9
 8008d6a:	aa03      	add	r2, sp, #12
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4640      	mov	r0, r8
 8008d70:	f7ff fee2 	bl	8008b38 <_printf_common>
 8008d74:	3001      	adds	r0, #1
 8008d76:	d14c      	bne.n	8008e12 <_printf_i+0x1fe>
 8008d78:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7c:	b004      	add	sp, #16
 8008d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d82:	4835      	ldr	r0, [pc, #212]	; (8008e58 <_printf_i+0x244>)
 8008d84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	680e      	ldr	r6, [r1, #0]
 8008d8c:	061f      	lsls	r7, r3, #24
 8008d8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d92:	600e      	str	r6, [r1, #0]
 8008d94:	d514      	bpl.n	8008dc0 <_printf_i+0x1ac>
 8008d96:	07d9      	lsls	r1, r3, #31
 8008d98:	bf44      	itt	mi
 8008d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d9e:	6023      	strmi	r3, [r4, #0]
 8008da0:	b91d      	cbnz	r5, 8008daa <_printf_i+0x196>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	f023 0320 	bic.w	r3, r3, #32
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	2310      	movs	r3, #16
 8008dac:	e7b0      	b.n	8008d10 <_printf_i+0xfc>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	f043 0320 	orr.w	r3, r3, #32
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	2378      	movs	r3, #120	; 0x78
 8008db8:	4828      	ldr	r0, [pc, #160]	; (8008e5c <_printf_i+0x248>)
 8008dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dbe:	e7e3      	b.n	8008d88 <_printf_i+0x174>
 8008dc0:	065e      	lsls	r6, r3, #25
 8008dc2:	bf48      	it	mi
 8008dc4:	b2ad      	uxthmi	r5, r5
 8008dc6:	e7e6      	b.n	8008d96 <_printf_i+0x182>
 8008dc8:	4616      	mov	r6, r2
 8008dca:	e7bb      	b.n	8008d44 <_printf_i+0x130>
 8008dcc:	680b      	ldr	r3, [r1, #0]
 8008dce:	6826      	ldr	r6, [r4, #0]
 8008dd0:	6960      	ldr	r0, [r4, #20]
 8008dd2:	1d1d      	adds	r5, r3, #4
 8008dd4:	600d      	str	r5, [r1, #0]
 8008dd6:	0635      	lsls	r5, r6, #24
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	d501      	bpl.n	8008de0 <_printf_i+0x1cc>
 8008ddc:	6018      	str	r0, [r3, #0]
 8008dde:	e002      	b.n	8008de6 <_printf_i+0x1d2>
 8008de0:	0671      	lsls	r1, r6, #25
 8008de2:	d5fb      	bpl.n	8008ddc <_printf_i+0x1c8>
 8008de4:	8018      	strh	r0, [r3, #0]
 8008de6:	2300      	movs	r3, #0
 8008de8:	6123      	str	r3, [r4, #16]
 8008dea:	4616      	mov	r6, r2
 8008dec:	e7ba      	b.n	8008d64 <_printf_i+0x150>
 8008dee:	680b      	ldr	r3, [r1, #0]
 8008df0:	1d1a      	adds	r2, r3, #4
 8008df2:	600a      	str	r2, [r1, #0]
 8008df4:	681e      	ldr	r6, [r3, #0]
 8008df6:	6862      	ldr	r2, [r4, #4]
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f7f7 fa38 	bl	8000270 <memchr>
 8008e00:	b108      	cbz	r0, 8008e06 <_printf_i+0x1f2>
 8008e02:	1b80      	subs	r0, r0, r6
 8008e04:	6060      	str	r0, [r4, #4]
 8008e06:	6863      	ldr	r3, [r4, #4]
 8008e08:	6123      	str	r3, [r4, #16]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e10:	e7a8      	b.n	8008d64 <_printf_i+0x150>
 8008e12:	6923      	ldr	r3, [r4, #16]
 8008e14:	4632      	mov	r2, r6
 8008e16:	4649      	mov	r1, r9
 8008e18:	4640      	mov	r0, r8
 8008e1a:	47d0      	blx	sl
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d0ab      	beq.n	8008d78 <_printf_i+0x164>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	079b      	lsls	r3, r3, #30
 8008e24:	d413      	bmi.n	8008e4e <_printf_i+0x23a>
 8008e26:	68e0      	ldr	r0, [r4, #12]
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	4298      	cmp	r0, r3
 8008e2c:	bfb8      	it	lt
 8008e2e:	4618      	movlt	r0, r3
 8008e30:	e7a4      	b.n	8008d7c <_printf_i+0x168>
 8008e32:	2301      	movs	r3, #1
 8008e34:	4632      	mov	r2, r6
 8008e36:	4649      	mov	r1, r9
 8008e38:	4640      	mov	r0, r8
 8008e3a:	47d0      	blx	sl
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	d09b      	beq.n	8008d78 <_printf_i+0x164>
 8008e40:	3501      	adds	r5, #1
 8008e42:	68e3      	ldr	r3, [r4, #12]
 8008e44:	9903      	ldr	r1, [sp, #12]
 8008e46:	1a5b      	subs	r3, r3, r1
 8008e48:	42ab      	cmp	r3, r5
 8008e4a:	dcf2      	bgt.n	8008e32 <_printf_i+0x21e>
 8008e4c:	e7eb      	b.n	8008e26 <_printf_i+0x212>
 8008e4e:	2500      	movs	r5, #0
 8008e50:	f104 0619 	add.w	r6, r4, #25
 8008e54:	e7f5      	b.n	8008e42 <_printf_i+0x22e>
 8008e56:	bf00      	nop
 8008e58:	0800b19e 	.word	0x0800b19e
 8008e5c:	0800b1af 	.word	0x0800b1af

08008e60 <__swbuf_r>:
 8008e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e62:	460e      	mov	r6, r1
 8008e64:	4614      	mov	r4, r2
 8008e66:	4605      	mov	r5, r0
 8008e68:	b118      	cbz	r0, 8008e72 <__swbuf_r+0x12>
 8008e6a:	6983      	ldr	r3, [r0, #24]
 8008e6c:	b90b      	cbnz	r3, 8008e72 <__swbuf_r+0x12>
 8008e6e:	f000 f9d9 	bl	8009224 <__sinit>
 8008e72:	4b21      	ldr	r3, [pc, #132]	; (8008ef8 <__swbuf_r+0x98>)
 8008e74:	429c      	cmp	r4, r3
 8008e76:	d12b      	bne.n	8008ed0 <__swbuf_r+0x70>
 8008e78:	686c      	ldr	r4, [r5, #4]
 8008e7a:	69a3      	ldr	r3, [r4, #24]
 8008e7c:	60a3      	str	r3, [r4, #8]
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	071a      	lsls	r2, r3, #28
 8008e82:	d52f      	bpl.n	8008ee4 <__swbuf_r+0x84>
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	b36b      	cbz	r3, 8008ee4 <__swbuf_r+0x84>
 8008e88:	6923      	ldr	r3, [r4, #16]
 8008e8a:	6820      	ldr	r0, [r4, #0]
 8008e8c:	1ac0      	subs	r0, r0, r3
 8008e8e:	6963      	ldr	r3, [r4, #20]
 8008e90:	b2f6      	uxtb	r6, r6
 8008e92:	4283      	cmp	r3, r0
 8008e94:	4637      	mov	r7, r6
 8008e96:	dc04      	bgt.n	8008ea2 <__swbuf_r+0x42>
 8008e98:	4621      	mov	r1, r4
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f000 f92e 	bl	80090fc <_fflush_r>
 8008ea0:	bb30      	cbnz	r0, 8008ef0 <__swbuf_r+0x90>
 8008ea2:	68a3      	ldr	r3, [r4, #8]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	60a3      	str	r3, [r4, #8]
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	6022      	str	r2, [r4, #0]
 8008eae:	701e      	strb	r6, [r3, #0]
 8008eb0:	6963      	ldr	r3, [r4, #20]
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	4283      	cmp	r3, r0
 8008eb6:	d004      	beq.n	8008ec2 <__swbuf_r+0x62>
 8008eb8:	89a3      	ldrh	r3, [r4, #12]
 8008eba:	07db      	lsls	r3, r3, #31
 8008ebc:	d506      	bpl.n	8008ecc <__swbuf_r+0x6c>
 8008ebe:	2e0a      	cmp	r6, #10
 8008ec0:	d104      	bne.n	8008ecc <__swbuf_r+0x6c>
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f000 f919 	bl	80090fc <_fflush_r>
 8008eca:	b988      	cbnz	r0, 8008ef0 <__swbuf_r+0x90>
 8008ecc:	4638      	mov	r0, r7
 8008ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed0:	4b0a      	ldr	r3, [pc, #40]	; (8008efc <__swbuf_r+0x9c>)
 8008ed2:	429c      	cmp	r4, r3
 8008ed4:	d101      	bne.n	8008eda <__swbuf_r+0x7a>
 8008ed6:	68ac      	ldr	r4, [r5, #8]
 8008ed8:	e7cf      	b.n	8008e7a <__swbuf_r+0x1a>
 8008eda:	4b09      	ldr	r3, [pc, #36]	; (8008f00 <__swbuf_r+0xa0>)
 8008edc:	429c      	cmp	r4, r3
 8008ede:	bf08      	it	eq
 8008ee0:	68ec      	ldreq	r4, [r5, #12]
 8008ee2:	e7ca      	b.n	8008e7a <__swbuf_r+0x1a>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 f80c 	bl	8008f04 <__swsetup_r>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d0cb      	beq.n	8008e88 <__swbuf_r+0x28>
 8008ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ef4:	e7ea      	b.n	8008ecc <__swbuf_r+0x6c>
 8008ef6:	bf00      	nop
 8008ef8:	0800b1e0 	.word	0x0800b1e0
 8008efc:	0800b200 	.word	0x0800b200
 8008f00:	0800b1c0 	.word	0x0800b1c0

08008f04 <__swsetup_r>:
 8008f04:	4b32      	ldr	r3, [pc, #200]	; (8008fd0 <__swsetup_r+0xcc>)
 8008f06:	b570      	push	{r4, r5, r6, lr}
 8008f08:	681d      	ldr	r5, [r3, #0]
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	460c      	mov	r4, r1
 8008f0e:	b125      	cbz	r5, 8008f1a <__swsetup_r+0x16>
 8008f10:	69ab      	ldr	r3, [r5, #24]
 8008f12:	b913      	cbnz	r3, 8008f1a <__swsetup_r+0x16>
 8008f14:	4628      	mov	r0, r5
 8008f16:	f000 f985 	bl	8009224 <__sinit>
 8008f1a:	4b2e      	ldr	r3, [pc, #184]	; (8008fd4 <__swsetup_r+0xd0>)
 8008f1c:	429c      	cmp	r4, r3
 8008f1e:	d10f      	bne.n	8008f40 <__swsetup_r+0x3c>
 8008f20:	686c      	ldr	r4, [r5, #4]
 8008f22:	89a3      	ldrh	r3, [r4, #12]
 8008f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f28:	0719      	lsls	r1, r3, #28
 8008f2a:	d42c      	bmi.n	8008f86 <__swsetup_r+0x82>
 8008f2c:	06dd      	lsls	r5, r3, #27
 8008f2e:	d411      	bmi.n	8008f54 <__swsetup_r+0x50>
 8008f30:	2309      	movs	r3, #9
 8008f32:	6033      	str	r3, [r6, #0]
 8008f34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f38:	81a3      	strh	r3, [r4, #12]
 8008f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3e:	e03e      	b.n	8008fbe <__swsetup_r+0xba>
 8008f40:	4b25      	ldr	r3, [pc, #148]	; (8008fd8 <__swsetup_r+0xd4>)
 8008f42:	429c      	cmp	r4, r3
 8008f44:	d101      	bne.n	8008f4a <__swsetup_r+0x46>
 8008f46:	68ac      	ldr	r4, [r5, #8]
 8008f48:	e7eb      	b.n	8008f22 <__swsetup_r+0x1e>
 8008f4a:	4b24      	ldr	r3, [pc, #144]	; (8008fdc <__swsetup_r+0xd8>)
 8008f4c:	429c      	cmp	r4, r3
 8008f4e:	bf08      	it	eq
 8008f50:	68ec      	ldreq	r4, [r5, #12]
 8008f52:	e7e6      	b.n	8008f22 <__swsetup_r+0x1e>
 8008f54:	0758      	lsls	r0, r3, #29
 8008f56:	d512      	bpl.n	8008f7e <__swsetup_r+0x7a>
 8008f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f5a:	b141      	cbz	r1, 8008f6e <__swsetup_r+0x6a>
 8008f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f60:	4299      	cmp	r1, r3
 8008f62:	d002      	beq.n	8008f6a <__swsetup_r+0x66>
 8008f64:	4630      	mov	r0, r6
 8008f66:	f7ff f8c7 	bl	80080f8 <_free_r>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	2300      	movs	r3, #0
 8008f78:	6063      	str	r3, [r4, #4]
 8008f7a:	6923      	ldr	r3, [r4, #16]
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	f043 0308 	orr.w	r3, r3, #8
 8008f84:	81a3      	strh	r3, [r4, #12]
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	b94b      	cbnz	r3, 8008f9e <__swsetup_r+0x9a>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f94:	d003      	beq.n	8008f9e <__swsetup_r+0x9a>
 8008f96:	4621      	mov	r1, r4
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f000 fa07 	bl	80093ac <__smakebuf_r>
 8008f9e:	89a0      	ldrh	r0, [r4, #12]
 8008fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fa4:	f010 0301 	ands.w	r3, r0, #1
 8008fa8:	d00a      	beq.n	8008fc0 <__swsetup_r+0xbc>
 8008faa:	2300      	movs	r3, #0
 8008fac:	60a3      	str	r3, [r4, #8]
 8008fae:	6963      	ldr	r3, [r4, #20]
 8008fb0:	425b      	negs	r3, r3
 8008fb2:	61a3      	str	r3, [r4, #24]
 8008fb4:	6923      	ldr	r3, [r4, #16]
 8008fb6:	b943      	cbnz	r3, 8008fca <__swsetup_r+0xc6>
 8008fb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fbc:	d1ba      	bne.n	8008f34 <__swsetup_r+0x30>
 8008fbe:	bd70      	pop	{r4, r5, r6, pc}
 8008fc0:	0781      	lsls	r1, r0, #30
 8008fc2:	bf58      	it	pl
 8008fc4:	6963      	ldrpl	r3, [r4, #20]
 8008fc6:	60a3      	str	r3, [r4, #8]
 8008fc8:	e7f4      	b.n	8008fb4 <__swsetup_r+0xb0>
 8008fca:	2000      	movs	r0, #0
 8008fcc:	e7f7      	b.n	8008fbe <__swsetup_r+0xba>
 8008fce:	bf00      	nop
 8008fd0:	2000001c 	.word	0x2000001c
 8008fd4:	0800b1e0 	.word	0x0800b1e0
 8008fd8:	0800b200 	.word	0x0800b200
 8008fdc:	0800b1c0 	.word	0x0800b1c0

08008fe0 <abort>:
 8008fe0:	b508      	push	{r3, lr}
 8008fe2:	2006      	movs	r0, #6
 8008fe4:	f000 fa7a 	bl	80094dc <raise>
 8008fe8:	2001      	movs	r0, #1
 8008fea:	f7f9 faa9 	bl	8002540 <_exit>
	...

08008ff0 <__sflush_r>:
 8008ff0:	898a      	ldrh	r2, [r1, #12]
 8008ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	0710      	lsls	r0, r2, #28
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	d458      	bmi.n	80090b0 <__sflush_r+0xc0>
 8008ffe:	684b      	ldr	r3, [r1, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	dc05      	bgt.n	8009010 <__sflush_r+0x20>
 8009004:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009006:	2b00      	cmp	r3, #0
 8009008:	dc02      	bgt.n	8009010 <__sflush_r+0x20>
 800900a:	2000      	movs	r0, #0
 800900c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009012:	2e00      	cmp	r6, #0
 8009014:	d0f9      	beq.n	800900a <__sflush_r+0x1a>
 8009016:	2300      	movs	r3, #0
 8009018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800901c:	682f      	ldr	r7, [r5, #0]
 800901e:	602b      	str	r3, [r5, #0]
 8009020:	d032      	beq.n	8009088 <__sflush_r+0x98>
 8009022:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009024:	89a3      	ldrh	r3, [r4, #12]
 8009026:	075a      	lsls	r2, r3, #29
 8009028:	d505      	bpl.n	8009036 <__sflush_r+0x46>
 800902a:	6863      	ldr	r3, [r4, #4]
 800902c:	1ac0      	subs	r0, r0, r3
 800902e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009030:	b10b      	cbz	r3, 8009036 <__sflush_r+0x46>
 8009032:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009034:	1ac0      	subs	r0, r0, r3
 8009036:	2300      	movs	r3, #0
 8009038:	4602      	mov	r2, r0
 800903a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800903c:	6a21      	ldr	r1, [r4, #32]
 800903e:	4628      	mov	r0, r5
 8009040:	47b0      	blx	r6
 8009042:	1c43      	adds	r3, r0, #1
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	d106      	bne.n	8009056 <__sflush_r+0x66>
 8009048:	6829      	ldr	r1, [r5, #0]
 800904a:	291d      	cmp	r1, #29
 800904c:	d82c      	bhi.n	80090a8 <__sflush_r+0xb8>
 800904e:	4a2a      	ldr	r2, [pc, #168]	; (80090f8 <__sflush_r+0x108>)
 8009050:	40ca      	lsrs	r2, r1
 8009052:	07d6      	lsls	r6, r2, #31
 8009054:	d528      	bpl.n	80090a8 <__sflush_r+0xb8>
 8009056:	2200      	movs	r2, #0
 8009058:	6062      	str	r2, [r4, #4]
 800905a:	04d9      	lsls	r1, r3, #19
 800905c:	6922      	ldr	r2, [r4, #16]
 800905e:	6022      	str	r2, [r4, #0]
 8009060:	d504      	bpl.n	800906c <__sflush_r+0x7c>
 8009062:	1c42      	adds	r2, r0, #1
 8009064:	d101      	bne.n	800906a <__sflush_r+0x7a>
 8009066:	682b      	ldr	r3, [r5, #0]
 8009068:	b903      	cbnz	r3, 800906c <__sflush_r+0x7c>
 800906a:	6560      	str	r0, [r4, #84]	; 0x54
 800906c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800906e:	602f      	str	r7, [r5, #0]
 8009070:	2900      	cmp	r1, #0
 8009072:	d0ca      	beq.n	800900a <__sflush_r+0x1a>
 8009074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009078:	4299      	cmp	r1, r3
 800907a:	d002      	beq.n	8009082 <__sflush_r+0x92>
 800907c:	4628      	mov	r0, r5
 800907e:	f7ff f83b 	bl	80080f8 <_free_r>
 8009082:	2000      	movs	r0, #0
 8009084:	6360      	str	r0, [r4, #52]	; 0x34
 8009086:	e7c1      	b.n	800900c <__sflush_r+0x1c>
 8009088:	6a21      	ldr	r1, [r4, #32]
 800908a:	2301      	movs	r3, #1
 800908c:	4628      	mov	r0, r5
 800908e:	47b0      	blx	r6
 8009090:	1c41      	adds	r1, r0, #1
 8009092:	d1c7      	bne.n	8009024 <__sflush_r+0x34>
 8009094:	682b      	ldr	r3, [r5, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d0c4      	beq.n	8009024 <__sflush_r+0x34>
 800909a:	2b1d      	cmp	r3, #29
 800909c:	d001      	beq.n	80090a2 <__sflush_r+0xb2>
 800909e:	2b16      	cmp	r3, #22
 80090a0:	d101      	bne.n	80090a6 <__sflush_r+0xb6>
 80090a2:	602f      	str	r7, [r5, #0]
 80090a4:	e7b1      	b.n	800900a <__sflush_r+0x1a>
 80090a6:	89a3      	ldrh	r3, [r4, #12]
 80090a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ac:	81a3      	strh	r3, [r4, #12]
 80090ae:	e7ad      	b.n	800900c <__sflush_r+0x1c>
 80090b0:	690f      	ldr	r7, [r1, #16]
 80090b2:	2f00      	cmp	r7, #0
 80090b4:	d0a9      	beq.n	800900a <__sflush_r+0x1a>
 80090b6:	0793      	lsls	r3, r2, #30
 80090b8:	680e      	ldr	r6, [r1, #0]
 80090ba:	bf08      	it	eq
 80090bc:	694b      	ldreq	r3, [r1, #20]
 80090be:	600f      	str	r7, [r1, #0]
 80090c0:	bf18      	it	ne
 80090c2:	2300      	movne	r3, #0
 80090c4:	eba6 0807 	sub.w	r8, r6, r7
 80090c8:	608b      	str	r3, [r1, #8]
 80090ca:	f1b8 0f00 	cmp.w	r8, #0
 80090ce:	dd9c      	ble.n	800900a <__sflush_r+0x1a>
 80090d0:	6a21      	ldr	r1, [r4, #32]
 80090d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090d4:	4643      	mov	r3, r8
 80090d6:	463a      	mov	r2, r7
 80090d8:	4628      	mov	r0, r5
 80090da:	47b0      	blx	r6
 80090dc:	2800      	cmp	r0, #0
 80090de:	dc06      	bgt.n	80090ee <__sflush_r+0xfe>
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ec:	e78e      	b.n	800900c <__sflush_r+0x1c>
 80090ee:	4407      	add	r7, r0
 80090f0:	eba8 0800 	sub.w	r8, r8, r0
 80090f4:	e7e9      	b.n	80090ca <__sflush_r+0xda>
 80090f6:	bf00      	nop
 80090f8:	20400001 	.word	0x20400001

080090fc <_fflush_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	690b      	ldr	r3, [r1, #16]
 8009100:	4605      	mov	r5, r0
 8009102:	460c      	mov	r4, r1
 8009104:	b913      	cbnz	r3, 800910c <_fflush_r+0x10>
 8009106:	2500      	movs	r5, #0
 8009108:	4628      	mov	r0, r5
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	b118      	cbz	r0, 8009116 <_fflush_r+0x1a>
 800910e:	6983      	ldr	r3, [r0, #24]
 8009110:	b90b      	cbnz	r3, 8009116 <_fflush_r+0x1a>
 8009112:	f000 f887 	bl	8009224 <__sinit>
 8009116:	4b14      	ldr	r3, [pc, #80]	; (8009168 <_fflush_r+0x6c>)
 8009118:	429c      	cmp	r4, r3
 800911a:	d11b      	bne.n	8009154 <_fflush_r+0x58>
 800911c:	686c      	ldr	r4, [r5, #4]
 800911e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0ef      	beq.n	8009106 <_fflush_r+0xa>
 8009126:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009128:	07d0      	lsls	r0, r2, #31
 800912a:	d404      	bmi.n	8009136 <_fflush_r+0x3a>
 800912c:	0599      	lsls	r1, r3, #22
 800912e:	d402      	bmi.n	8009136 <_fflush_r+0x3a>
 8009130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009132:	f000 f915 	bl	8009360 <__retarget_lock_acquire_recursive>
 8009136:	4628      	mov	r0, r5
 8009138:	4621      	mov	r1, r4
 800913a:	f7ff ff59 	bl	8008ff0 <__sflush_r>
 800913e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009140:	07da      	lsls	r2, r3, #31
 8009142:	4605      	mov	r5, r0
 8009144:	d4e0      	bmi.n	8009108 <_fflush_r+0xc>
 8009146:	89a3      	ldrh	r3, [r4, #12]
 8009148:	059b      	lsls	r3, r3, #22
 800914a:	d4dd      	bmi.n	8009108 <_fflush_r+0xc>
 800914c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800914e:	f000 f908 	bl	8009362 <__retarget_lock_release_recursive>
 8009152:	e7d9      	b.n	8009108 <_fflush_r+0xc>
 8009154:	4b05      	ldr	r3, [pc, #20]	; (800916c <_fflush_r+0x70>)
 8009156:	429c      	cmp	r4, r3
 8009158:	d101      	bne.n	800915e <_fflush_r+0x62>
 800915a:	68ac      	ldr	r4, [r5, #8]
 800915c:	e7df      	b.n	800911e <_fflush_r+0x22>
 800915e:	4b04      	ldr	r3, [pc, #16]	; (8009170 <_fflush_r+0x74>)
 8009160:	429c      	cmp	r4, r3
 8009162:	bf08      	it	eq
 8009164:	68ec      	ldreq	r4, [r5, #12]
 8009166:	e7da      	b.n	800911e <_fflush_r+0x22>
 8009168:	0800b1e0 	.word	0x0800b1e0
 800916c:	0800b200 	.word	0x0800b200
 8009170:	0800b1c0 	.word	0x0800b1c0

08009174 <std>:
 8009174:	2300      	movs	r3, #0
 8009176:	b510      	push	{r4, lr}
 8009178:	4604      	mov	r4, r0
 800917a:	e9c0 3300 	strd	r3, r3, [r0]
 800917e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009182:	6083      	str	r3, [r0, #8]
 8009184:	8181      	strh	r1, [r0, #12]
 8009186:	6643      	str	r3, [r0, #100]	; 0x64
 8009188:	81c2      	strh	r2, [r0, #14]
 800918a:	6183      	str	r3, [r0, #24]
 800918c:	4619      	mov	r1, r3
 800918e:	2208      	movs	r2, #8
 8009190:	305c      	adds	r0, #92	; 0x5c
 8009192:	f7fe ffa9 	bl	80080e8 <memset>
 8009196:	4b05      	ldr	r3, [pc, #20]	; (80091ac <std+0x38>)
 8009198:	6263      	str	r3, [r4, #36]	; 0x24
 800919a:	4b05      	ldr	r3, [pc, #20]	; (80091b0 <std+0x3c>)
 800919c:	62a3      	str	r3, [r4, #40]	; 0x28
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <std+0x40>)
 80091a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091a2:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <std+0x44>)
 80091a4:	6224      	str	r4, [r4, #32]
 80091a6:	6323      	str	r3, [r4, #48]	; 0x30
 80091a8:	bd10      	pop	{r4, pc}
 80091aa:	bf00      	nop
 80091ac:	08009515 	.word	0x08009515
 80091b0:	08009537 	.word	0x08009537
 80091b4:	0800956f 	.word	0x0800956f
 80091b8:	08009593 	.word	0x08009593

080091bc <_cleanup_r>:
 80091bc:	4901      	ldr	r1, [pc, #4]	; (80091c4 <_cleanup_r+0x8>)
 80091be:	f000 b8af 	b.w	8009320 <_fwalk_reent>
 80091c2:	bf00      	nop
 80091c4:	080090fd 	.word	0x080090fd

080091c8 <__sfmoreglue>:
 80091c8:	b570      	push	{r4, r5, r6, lr}
 80091ca:	1e4a      	subs	r2, r1, #1
 80091cc:	2568      	movs	r5, #104	; 0x68
 80091ce:	4355      	muls	r5, r2
 80091d0:	460e      	mov	r6, r1
 80091d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091d6:	f7fe ffdf 	bl	8008198 <_malloc_r>
 80091da:	4604      	mov	r4, r0
 80091dc:	b140      	cbz	r0, 80091f0 <__sfmoreglue+0x28>
 80091de:	2100      	movs	r1, #0
 80091e0:	e9c0 1600 	strd	r1, r6, [r0]
 80091e4:	300c      	adds	r0, #12
 80091e6:	60a0      	str	r0, [r4, #8]
 80091e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091ec:	f7fe ff7c 	bl	80080e8 <memset>
 80091f0:	4620      	mov	r0, r4
 80091f2:	bd70      	pop	{r4, r5, r6, pc}

080091f4 <__sfp_lock_acquire>:
 80091f4:	4801      	ldr	r0, [pc, #4]	; (80091fc <__sfp_lock_acquire+0x8>)
 80091f6:	f000 b8b3 	b.w	8009360 <__retarget_lock_acquire_recursive>
 80091fa:	bf00      	nop
 80091fc:	20000608 	.word	0x20000608

08009200 <__sfp_lock_release>:
 8009200:	4801      	ldr	r0, [pc, #4]	; (8009208 <__sfp_lock_release+0x8>)
 8009202:	f000 b8ae 	b.w	8009362 <__retarget_lock_release_recursive>
 8009206:	bf00      	nop
 8009208:	20000608 	.word	0x20000608

0800920c <__sinit_lock_acquire>:
 800920c:	4801      	ldr	r0, [pc, #4]	; (8009214 <__sinit_lock_acquire+0x8>)
 800920e:	f000 b8a7 	b.w	8009360 <__retarget_lock_acquire_recursive>
 8009212:	bf00      	nop
 8009214:	20000603 	.word	0x20000603

08009218 <__sinit_lock_release>:
 8009218:	4801      	ldr	r0, [pc, #4]	; (8009220 <__sinit_lock_release+0x8>)
 800921a:	f000 b8a2 	b.w	8009362 <__retarget_lock_release_recursive>
 800921e:	bf00      	nop
 8009220:	20000603 	.word	0x20000603

08009224 <__sinit>:
 8009224:	b510      	push	{r4, lr}
 8009226:	4604      	mov	r4, r0
 8009228:	f7ff fff0 	bl	800920c <__sinit_lock_acquire>
 800922c:	69a3      	ldr	r3, [r4, #24]
 800922e:	b11b      	cbz	r3, 8009238 <__sinit+0x14>
 8009230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009234:	f7ff bff0 	b.w	8009218 <__sinit_lock_release>
 8009238:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800923c:	6523      	str	r3, [r4, #80]	; 0x50
 800923e:	4b13      	ldr	r3, [pc, #76]	; (800928c <__sinit+0x68>)
 8009240:	4a13      	ldr	r2, [pc, #76]	; (8009290 <__sinit+0x6c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	62a2      	str	r2, [r4, #40]	; 0x28
 8009246:	42a3      	cmp	r3, r4
 8009248:	bf04      	itt	eq
 800924a:	2301      	moveq	r3, #1
 800924c:	61a3      	streq	r3, [r4, #24]
 800924e:	4620      	mov	r0, r4
 8009250:	f000 f820 	bl	8009294 <__sfp>
 8009254:	6060      	str	r0, [r4, #4]
 8009256:	4620      	mov	r0, r4
 8009258:	f000 f81c 	bl	8009294 <__sfp>
 800925c:	60a0      	str	r0, [r4, #8]
 800925e:	4620      	mov	r0, r4
 8009260:	f000 f818 	bl	8009294 <__sfp>
 8009264:	2200      	movs	r2, #0
 8009266:	60e0      	str	r0, [r4, #12]
 8009268:	2104      	movs	r1, #4
 800926a:	6860      	ldr	r0, [r4, #4]
 800926c:	f7ff ff82 	bl	8009174 <std>
 8009270:	68a0      	ldr	r0, [r4, #8]
 8009272:	2201      	movs	r2, #1
 8009274:	2109      	movs	r1, #9
 8009276:	f7ff ff7d 	bl	8009174 <std>
 800927a:	68e0      	ldr	r0, [r4, #12]
 800927c:	2202      	movs	r2, #2
 800927e:	2112      	movs	r1, #18
 8009280:	f7ff ff78 	bl	8009174 <std>
 8009284:	2301      	movs	r3, #1
 8009286:	61a3      	str	r3, [r4, #24]
 8009288:	e7d2      	b.n	8009230 <__sinit+0xc>
 800928a:	bf00      	nop
 800928c:	0800afd4 	.word	0x0800afd4
 8009290:	080091bd 	.word	0x080091bd

08009294 <__sfp>:
 8009294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009296:	4607      	mov	r7, r0
 8009298:	f7ff ffac 	bl	80091f4 <__sfp_lock_acquire>
 800929c:	4b1e      	ldr	r3, [pc, #120]	; (8009318 <__sfp+0x84>)
 800929e:	681e      	ldr	r6, [r3, #0]
 80092a0:	69b3      	ldr	r3, [r6, #24]
 80092a2:	b913      	cbnz	r3, 80092aa <__sfp+0x16>
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7ff ffbd 	bl	8009224 <__sinit>
 80092aa:	3648      	adds	r6, #72	; 0x48
 80092ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	d503      	bpl.n	80092bc <__sfp+0x28>
 80092b4:	6833      	ldr	r3, [r6, #0]
 80092b6:	b30b      	cbz	r3, 80092fc <__sfp+0x68>
 80092b8:	6836      	ldr	r6, [r6, #0]
 80092ba:	e7f7      	b.n	80092ac <__sfp+0x18>
 80092bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092c0:	b9d5      	cbnz	r5, 80092f8 <__sfp+0x64>
 80092c2:	4b16      	ldr	r3, [pc, #88]	; (800931c <__sfp+0x88>)
 80092c4:	60e3      	str	r3, [r4, #12]
 80092c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092ca:	6665      	str	r5, [r4, #100]	; 0x64
 80092cc:	f000 f847 	bl	800935e <__retarget_lock_init_recursive>
 80092d0:	f7ff ff96 	bl	8009200 <__sfp_lock_release>
 80092d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092dc:	6025      	str	r5, [r4, #0]
 80092de:	61a5      	str	r5, [r4, #24]
 80092e0:	2208      	movs	r2, #8
 80092e2:	4629      	mov	r1, r5
 80092e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092e8:	f7fe fefe 	bl	80080e8 <memset>
 80092ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092f4:	4620      	mov	r0, r4
 80092f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092f8:	3468      	adds	r4, #104	; 0x68
 80092fa:	e7d9      	b.n	80092b0 <__sfp+0x1c>
 80092fc:	2104      	movs	r1, #4
 80092fe:	4638      	mov	r0, r7
 8009300:	f7ff ff62 	bl	80091c8 <__sfmoreglue>
 8009304:	4604      	mov	r4, r0
 8009306:	6030      	str	r0, [r6, #0]
 8009308:	2800      	cmp	r0, #0
 800930a:	d1d5      	bne.n	80092b8 <__sfp+0x24>
 800930c:	f7ff ff78 	bl	8009200 <__sfp_lock_release>
 8009310:	230c      	movs	r3, #12
 8009312:	603b      	str	r3, [r7, #0]
 8009314:	e7ee      	b.n	80092f4 <__sfp+0x60>
 8009316:	bf00      	nop
 8009318:	0800afd4 	.word	0x0800afd4
 800931c:	ffff0001 	.word	0xffff0001

08009320 <_fwalk_reent>:
 8009320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009324:	4606      	mov	r6, r0
 8009326:	4688      	mov	r8, r1
 8009328:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800932c:	2700      	movs	r7, #0
 800932e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009332:	f1b9 0901 	subs.w	r9, r9, #1
 8009336:	d505      	bpl.n	8009344 <_fwalk_reent+0x24>
 8009338:	6824      	ldr	r4, [r4, #0]
 800933a:	2c00      	cmp	r4, #0
 800933c:	d1f7      	bne.n	800932e <_fwalk_reent+0xe>
 800933e:	4638      	mov	r0, r7
 8009340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009344:	89ab      	ldrh	r3, [r5, #12]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d907      	bls.n	800935a <_fwalk_reent+0x3a>
 800934a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800934e:	3301      	adds	r3, #1
 8009350:	d003      	beq.n	800935a <_fwalk_reent+0x3a>
 8009352:	4629      	mov	r1, r5
 8009354:	4630      	mov	r0, r6
 8009356:	47c0      	blx	r8
 8009358:	4307      	orrs	r7, r0
 800935a:	3568      	adds	r5, #104	; 0x68
 800935c:	e7e9      	b.n	8009332 <_fwalk_reent+0x12>

0800935e <__retarget_lock_init_recursive>:
 800935e:	4770      	bx	lr

08009360 <__retarget_lock_acquire_recursive>:
 8009360:	4770      	bx	lr

08009362 <__retarget_lock_release_recursive>:
 8009362:	4770      	bx	lr

08009364 <__swhatbuf_r>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	460e      	mov	r6, r1
 8009368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936c:	2900      	cmp	r1, #0
 800936e:	b096      	sub	sp, #88	; 0x58
 8009370:	4614      	mov	r4, r2
 8009372:	461d      	mov	r5, r3
 8009374:	da07      	bge.n	8009386 <__swhatbuf_r+0x22>
 8009376:	2300      	movs	r3, #0
 8009378:	602b      	str	r3, [r5, #0]
 800937a:	89b3      	ldrh	r3, [r6, #12]
 800937c:	061a      	lsls	r2, r3, #24
 800937e:	d410      	bmi.n	80093a2 <__swhatbuf_r+0x3e>
 8009380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009384:	e00e      	b.n	80093a4 <__swhatbuf_r+0x40>
 8009386:	466a      	mov	r2, sp
 8009388:	f000 f92a 	bl	80095e0 <_fstat_r>
 800938c:	2800      	cmp	r0, #0
 800938e:	dbf2      	blt.n	8009376 <__swhatbuf_r+0x12>
 8009390:	9a01      	ldr	r2, [sp, #4]
 8009392:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009396:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800939a:	425a      	negs	r2, r3
 800939c:	415a      	adcs	r2, r3
 800939e:	602a      	str	r2, [r5, #0]
 80093a0:	e7ee      	b.n	8009380 <__swhatbuf_r+0x1c>
 80093a2:	2340      	movs	r3, #64	; 0x40
 80093a4:	2000      	movs	r0, #0
 80093a6:	6023      	str	r3, [r4, #0]
 80093a8:	b016      	add	sp, #88	; 0x58
 80093aa:	bd70      	pop	{r4, r5, r6, pc}

080093ac <__smakebuf_r>:
 80093ac:	898b      	ldrh	r3, [r1, #12]
 80093ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093b0:	079d      	lsls	r5, r3, #30
 80093b2:	4606      	mov	r6, r0
 80093b4:	460c      	mov	r4, r1
 80093b6:	d507      	bpl.n	80093c8 <__smakebuf_r+0x1c>
 80093b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	6123      	str	r3, [r4, #16]
 80093c0:	2301      	movs	r3, #1
 80093c2:	6163      	str	r3, [r4, #20]
 80093c4:	b002      	add	sp, #8
 80093c6:	bd70      	pop	{r4, r5, r6, pc}
 80093c8:	ab01      	add	r3, sp, #4
 80093ca:	466a      	mov	r2, sp
 80093cc:	f7ff ffca 	bl	8009364 <__swhatbuf_r>
 80093d0:	9900      	ldr	r1, [sp, #0]
 80093d2:	4605      	mov	r5, r0
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7fe fedf 	bl	8008198 <_malloc_r>
 80093da:	b948      	cbnz	r0, 80093f0 <__smakebuf_r+0x44>
 80093dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093e0:	059a      	lsls	r2, r3, #22
 80093e2:	d4ef      	bmi.n	80093c4 <__smakebuf_r+0x18>
 80093e4:	f023 0303 	bic.w	r3, r3, #3
 80093e8:	f043 0302 	orr.w	r3, r3, #2
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	e7e3      	b.n	80093b8 <__smakebuf_r+0xc>
 80093f0:	4b0d      	ldr	r3, [pc, #52]	; (8009428 <__smakebuf_r+0x7c>)
 80093f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	6020      	str	r0, [r4, #0]
 80093f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	9b00      	ldr	r3, [sp, #0]
 8009400:	6163      	str	r3, [r4, #20]
 8009402:	9b01      	ldr	r3, [sp, #4]
 8009404:	6120      	str	r0, [r4, #16]
 8009406:	b15b      	cbz	r3, 8009420 <__smakebuf_r+0x74>
 8009408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800940c:	4630      	mov	r0, r6
 800940e:	f000 f8f9 	bl	8009604 <_isatty_r>
 8009412:	b128      	cbz	r0, 8009420 <__smakebuf_r+0x74>
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	f023 0303 	bic.w	r3, r3, #3
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	89a0      	ldrh	r0, [r4, #12]
 8009422:	4305      	orrs	r5, r0
 8009424:	81a5      	strh	r5, [r4, #12]
 8009426:	e7cd      	b.n	80093c4 <__smakebuf_r+0x18>
 8009428:	080091bd 	.word	0x080091bd

0800942c <memcpy>:
 800942c:	440a      	add	r2, r1
 800942e:	4291      	cmp	r1, r2
 8009430:	f100 33ff 	add.w	r3, r0, #4294967295
 8009434:	d100      	bne.n	8009438 <memcpy+0xc>
 8009436:	4770      	bx	lr
 8009438:	b510      	push	{r4, lr}
 800943a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800943e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009442:	4291      	cmp	r1, r2
 8009444:	d1f9      	bne.n	800943a <memcpy+0xe>
 8009446:	bd10      	pop	{r4, pc}

08009448 <memmove>:
 8009448:	4288      	cmp	r0, r1
 800944a:	b510      	push	{r4, lr}
 800944c:	eb01 0402 	add.w	r4, r1, r2
 8009450:	d902      	bls.n	8009458 <memmove+0x10>
 8009452:	4284      	cmp	r4, r0
 8009454:	4623      	mov	r3, r4
 8009456:	d807      	bhi.n	8009468 <memmove+0x20>
 8009458:	1e43      	subs	r3, r0, #1
 800945a:	42a1      	cmp	r1, r4
 800945c:	d008      	beq.n	8009470 <memmove+0x28>
 800945e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009462:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009466:	e7f8      	b.n	800945a <memmove+0x12>
 8009468:	4402      	add	r2, r0
 800946a:	4601      	mov	r1, r0
 800946c:	428a      	cmp	r2, r1
 800946e:	d100      	bne.n	8009472 <memmove+0x2a>
 8009470:	bd10      	pop	{r4, pc}
 8009472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800947a:	e7f7      	b.n	800946c <memmove+0x24>

0800947c <_malloc_usable_size_r>:
 800947c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009480:	1f18      	subs	r0, r3, #4
 8009482:	2b00      	cmp	r3, #0
 8009484:	bfbc      	itt	lt
 8009486:	580b      	ldrlt	r3, [r1, r0]
 8009488:	18c0      	addlt	r0, r0, r3
 800948a:	4770      	bx	lr

0800948c <_raise_r>:
 800948c:	291f      	cmp	r1, #31
 800948e:	b538      	push	{r3, r4, r5, lr}
 8009490:	4604      	mov	r4, r0
 8009492:	460d      	mov	r5, r1
 8009494:	d904      	bls.n	80094a0 <_raise_r+0x14>
 8009496:	2316      	movs	r3, #22
 8009498:	6003      	str	r3, [r0, #0]
 800949a:	f04f 30ff 	mov.w	r0, #4294967295
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80094a2:	b112      	cbz	r2, 80094aa <_raise_r+0x1e>
 80094a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094a8:	b94b      	cbnz	r3, 80094be <_raise_r+0x32>
 80094aa:	4620      	mov	r0, r4
 80094ac:	f000 f830 	bl	8009510 <_getpid_r>
 80094b0:	462a      	mov	r2, r5
 80094b2:	4601      	mov	r1, r0
 80094b4:	4620      	mov	r0, r4
 80094b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ba:	f000 b817 	b.w	80094ec <_kill_r>
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d00a      	beq.n	80094d8 <_raise_r+0x4c>
 80094c2:	1c59      	adds	r1, r3, #1
 80094c4:	d103      	bne.n	80094ce <_raise_r+0x42>
 80094c6:	2316      	movs	r3, #22
 80094c8:	6003      	str	r3, [r0, #0]
 80094ca:	2001      	movs	r0, #1
 80094cc:	e7e7      	b.n	800949e <_raise_r+0x12>
 80094ce:	2400      	movs	r4, #0
 80094d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094d4:	4628      	mov	r0, r5
 80094d6:	4798      	blx	r3
 80094d8:	2000      	movs	r0, #0
 80094da:	e7e0      	b.n	800949e <_raise_r+0x12>

080094dc <raise>:
 80094dc:	4b02      	ldr	r3, [pc, #8]	; (80094e8 <raise+0xc>)
 80094de:	4601      	mov	r1, r0
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	f7ff bfd3 	b.w	800948c <_raise_r>
 80094e6:	bf00      	nop
 80094e8:	2000001c 	.word	0x2000001c

080094ec <_kill_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d07      	ldr	r5, [pc, #28]	; (800950c <_kill_r+0x20>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4604      	mov	r4, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	4611      	mov	r1, r2
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	f7f9 f811 	bl	8002520 <_kill>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d102      	bne.n	8009508 <_kill_r+0x1c>
 8009502:	682b      	ldr	r3, [r5, #0]
 8009504:	b103      	cbz	r3, 8009508 <_kill_r+0x1c>
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	bd38      	pop	{r3, r4, r5, pc}
 800950a:	bf00      	nop
 800950c:	200005fc 	.word	0x200005fc

08009510 <_getpid_r>:
 8009510:	f7f8 bffe 	b.w	8002510 <_getpid>

08009514 <__sread>:
 8009514:	b510      	push	{r4, lr}
 8009516:	460c      	mov	r4, r1
 8009518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800951c:	f000 f894 	bl	8009648 <_read_r>
 8009520:	2800      	cmp	r0, #0
 8009522:	bfab      	itete	ge
 8009524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009526:	89a3      	ldrhlt	r3, [r4, #12]
 8009528:	181b      	addge	r3, r3, r0
 800952a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800952e:	bfac      	ite	ge
 8009530:	6563      	strge	r3, [r4, #84]	; 0x54
 8009532:	81a3      	strhlt	r3, [r4, #12]
 8009534:	bd10      	pop	{r4, pc}

08009536 <__swrite>:
 8009536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800953a:	461f      	mov	r7, r3
 800953c:	898b      	ldrh	r3, [r1, #12]
 800953e:	05db      	lsls	r3, r3, #23
 8009540:	4605      	mov	r5, r0
 8009542:	460c      	mov	r4, r1
 8009544:	4616      	mov	r6, r2
 8009546:	d505      	bpl.n	8009554 <__swrite+0x1e>
 8009548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954c:	2302      	movs	r3, #2
 800954e:	2200      	movs	r2, #0
 8009550:	f000 f868 	bl	8009624 <_lseek_r>
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800955a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800955e:	81a3      	strh	r3, [r4, #12]
 8009560:	4632      	mov	r2, r6
 8009562:	463b      	mov	r3, r7
 8009564:	4628      	mov	r0, r5
 8009566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800956a:	f000 b817 	b.w	800959c <_write_r>

0800956e <__sseek>:
 800956e:	b510      	push	{r4, lr}
 8009570:	460c      	mov	r4, r1
 8009572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009576:	f000 f855 	bl	8009624 <_lseek_r>
 800957a:	1c43      	adds	r3, r0, #1
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	bf15      	itete	ne
 8009580:	6560      	strne	r0, [r4, #84]	; 0x54
 8009582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800958a:	81a3      	strheq	r3, [r4, #12]
 800958c:	bf18      	it	ne
 800958e:	81a3      	strhne	r3, [r4, #12]
 8009590:	bd10      	pop	{r4, pc}

08009592 <__sclose>:
 8009592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009596:	f000 b813 	b.w	80095c0 <_close_r>
	...

0800959c <_write_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4d07      	ldr	r5, [pc, #28]	; (80095bc <_write_r+0x20>)
 80095a0:	4604      	mov	r4, r0
 80095a2:	4608      	mov	r0, r1
 80095a4:	4611      	mov	r1, r2
 80095a6:	2200      	movs	r2, #0
 80095a8:	602a      	str	r2, [r5, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	f7f8 ffef 	bl	800258e <_write>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_write_r+0x1e>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_write_r+0x1e>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	200005fc 	.word	0x200005fc

080095c0 <_close_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d06      	ldr	r5, [pc, #24]	; (80095dc <_close_r+0x1c>)
 80095c4:	2300      	movs	r3, #0
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	f7f8 fffb 	bl	80025c6 <_close>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d102      	bne.n	80095da <_close_r+0x1a>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b103      	cbz	r3, 80095da <_close_r+0x1a>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	200005fc 	.word	0x200005fc

080095e0 <_fstat_r>:
 80095e0:	b538      	push	{r3, r4, r5, lr}
 80095e2:	4d07      	ldr	r5, [pc, #28]	; (8009600 <_fstat_r+0x20>)
 80095e4:	2300      	movs	r3, #0
 80095e6:	4604      	mov	r4, r0
 80095e8:	4608      	mov	r0, r1
 80095ea:	4611      	mov	r1, r2
 80095ec:	602b      	str	r3, [r5, #0]
 80095ee:	f7f8 fff6 	bl	80025de <_fstat>
 80095f2:	1c43      	adds	r3, r0, #1
 80095f4:	d102      	bne.n	80095fc <_fstat_r+0x1c>
 80095f6:	682b      	ldr	r3, [r5, #0]
 80095f8:	b103      	cbz	r3, 80095fc <_fstat_r+0x1c>
 80095fa:	6023      	str	r3, [r4, #0]
 80095fc:	bd38      	pop	{r3, r4, r5, pc}
 80095fe:	bf00      	nop
 8009600:	200005fc 	.word	0x200005fc

08009604 <_isatty_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d06      	ldr	r5, [pc, #24]	; (8009620 <_isatty_r+0x1c>)
 8009608:	2300      	movs	r3, #0
 800960a:	4604      	mov	r4, r0
 800960c:	4608      	mov	r0, r1
 800960e:	602b      	str	r3, [r5, #0]
 8009610:	f7f8 fff5 	bl	80025fe <_isatty>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d102      	bne.n	800961e <_isatty_r+0x1a>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	b103      	cbz	r3, 800961e <_isatty_r+0x1a>
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	bd38      	pop	{r3, r4, r5, pc}
 8009620:	200005fc 	.word	0x200005fc

08009624 <_lseek_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4d07      	ldr	r5, [pc, #28]	; (8009644 <_lseek_r+0x20>)
 8009628:	4604      	mov	r4, r0
 800962a:	4608      	mov	r0, r1
 800962c:	4611      	mov	r1, r2
 800962e:	2200      	movs	r2, #0
 8009630:	602a      	str	r2, [r5, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	f7f8 ffee 	bl	8002614 <_lseek>
 8009638:	1c43      	adds	r3, r0, #1
 800963a:	d102      	bne.n	8009642 <_lseek_r+0x1e>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	b103      	cbz	r3, 8009642 <_lseek_r+0x1e>
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	bd38      	pop	{r3, r4, r5, pc}
 8009644:	200005fc 	.word	0x200005fc

08009648 <_read_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4d07      	ldr	r5, [pc, #28]	; (8009668 <_read_r+0x20>)
 800964c:	4604      	mov	r4, r0
 800964e:	4608      	mov	r0, r1
 8009650:	4611      	mov	r1, r2
 8009652:	2200      	movs	r2, #0
 8009654:	602a      	str	r2, [r5, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	f7f8 ff7c 	bl	8002554 <_read>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d102      	bne.n	8009666 <_read_r+0x1e>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	b103      	cbz	r3, 8009666 <_read_r+0x1e>
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	200005fc 	.word	0x200005fc
 800966c:	00000000 	.word	0x00000000

08009670 <sin>:
 8009670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009672:	eeb0 7b40 	vmov.f64	d7, d0
 8009676:	ee17 3a90 	vmov	r3, s15
 800967a:	4a1f      	ldr	r2, [pc, #124]	; (80096f8 <sin+0x88>)
 800967c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009680:	4293      	cmp	r3, r2
 8009682:	dc05      	bgt.n	8009690 <sin+0x20>
 8009684:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80096f0 <sin+0x80>
 8009688:	2000      	movs	r0, #0
 800968a:	f000 fc65 	bl	8009f58 <__kernel_sin>
 800968e:	e004      	b.n	800969a <sin+0x2a>
 8009690:	4a1a      	ldr	r2, [pc, #104]	; (80096fc <sin+0x8c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	dd04      	ble.n	80096a0 <sin+0x30>
 8009696:	ee30 0b40 	vsub.f64	d0, d0, d0
 800969a:	b005      	add	sp, #20
 800969c:	f85d fb04 	ldr.w	pc, [sp], #4
 80096a0:	4668      	mov	r0, sp
 80096a2:	f000 f82d 	bl	8009700 <__ieee754_rem_pio2>
 80096a6:	f000 0003 	and.w	r0, r0, #3
 80096aa:	2801      	cmp	r0, #1
 80096ac:	d008      	beq.n	80096c0 <sin+0x50>
 80096ae:	2802      	cmp	r0, #2
 80096b0:	d00d      	beq.n	80096ce <sin+0x5e>
 80096b2:	b9b0      	cbnz	r0, 80096e2 <sin+0x72>
 80096b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096b8:	ed9d 0b00 	vldr	d0, [sp]
 80096bc:	2001      	movs	r0, #1
 80096be:	e7e4      	b.n	800968a <sin+0x1a>
 80096c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096c4:	ed9d 0b00 	vldr	d0, [sp]
 80096c8:	f000 f95a 	bl	8009980 <__kernel_cos>
 80096cc:	e7e5      	b.n	800969a <sin+0x2a>
 80096ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096d2:	ed9d 0b00 	vldr	d0, [sp]
 80096d6:	2001      	movs	r0, #1
 80096d8:	f000 fc3e 	bl	8009f58 <__kernel_sin>
 80096dc:	eeb1 0b40 	vneg.f64	d0, d0
 80096e0:	e7db      	b.n	800969a <sin+0x2a>
 80096e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096e6:	ed9d 0b00 	vldr	d0, [sp]
 80096ea:	f000 f949 	bl	8009980 <__kernel_cos>
 80096ee:	e7f5      	b.n	80096dc <sin+0x6c>
	...
 80096f8:	3fe921fb 	.word	0x3fe921fb
 80096fc:	7fefffff 	.word	0x7fefffff

08009700 <__ieee754_rem_pio2>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	eeb0 7b40 	vmov.f64	d7, d0
 8009706:	ee17 5a90 	vmov	r5, s15
 800970a:	4b97      	ldr	r3, [pc, #604]	; (8009968 <__ieee754_rem_pio2+0x268>)
 800970c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009710:	429e      	cmp	r6, r3
 8009712:	b088      	sub	sp, #32
 8009714:	4604      	mov	r4, r0
 8009716:	dc07      	bgt.n	8009728 <__ieee754_rem_pio2+0x28>
 8009718:	2200      	movs	r2, #0
 800971a:	2300      	movs	r3, #0
 800971c:	ed84 0b00 	vstr	d0, [r4]
 8009720:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009724:	2000      	movs	r0, #0
 8009726:	e01b      	b.n	8009760 <__ieee754_rem_pio2+0x60>
 8009728:	4b90      	ldr	r3, [pc, #576]	; (800996c <__ieee754_rem_pio2+0x26c>)
 800972a:	429e      	cmp	r6, r3
 800972c:	dc3b      	bgt.n	80097a6 <__ieee754_rem_pio2+0xa6>
 800972e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8009732:	2d00      	cmp	r5, #0
 8009734:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8009928 <__ieee754_rem_pio2+0x228>
 8009738:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800973c:	dd19      	ble.n	8009772 <__ieee754_rem_pio2+0x72>
 800973e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8009742:	429e      	cmp	r6, r3
 8009744:	d00e      	beq.n	8009764 <__ieee754_rem_pio2+0x64>
 8009746:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8009930 <__ieee754_rem_pio2+0x230>
 800974a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800974e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009752:	ed84 5b00 	vstr	d5, [r4]
 8009756:	ee37 7b46 	vsub.f64	d7, d7, d6
 800975a:	ed84 7b02 	vstr	d7, [r4, #8]
 800975e:	2001      	movs	r0, #1
 8009760:	b008      	add	sp, #32
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8009938 <__ieee754_rem_pio2+0x238>
 8009768:	ee37 7b46 	vsub.f64	d7, d7, d6
 800976c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8009940 <__ieee754_rem_pio2+0x240>
 8009770:	e7eb      	b.n	800974a <__ieee754_rem_pio2+0x4a>
 8009772:	429e      	cmp	r6, r3
 8009774:	ee30 7b06 	vadd.f64	d7, d0, d6
 8009778:	d00e      	beq.n	8009798 <__ieee754_rem_pio2+0x98>
 800977a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8009930 <__ieee754_rem_pio2+0x230>
 800977e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8009782:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009786:	ed84 5b00 	vstr	d5, [r4]
 800978a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800978e:	f04f 30ff 	mov.w	r0, #4294967295
 8009792:	ed84 7b02 	vstr	d7, [r4, #8]
 8009796:	e7e3      	b.n	8009760 <__ieee754_rem_pio2+0x60>
 8009798:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8009938 <__ieee754_rem_pio2+0x238>
 800979c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80097a0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8009940 <__ieee754_rem_pio2+0x240>
 80097a4:	e7eb      	b.n	800977e <__ieee754_rem_pio2+0x7e>
 80097a6:	4b72      	ldr	r3, [pc, #456]	; (8009970 <__ieee754_rem_pio2+0x270>)
 80097a8:	429e      	cmp	r6, r3
 80097aa:	dc6e      	bgt.n	800988a <__ieee754_rem_pio2+0x18a>
 80097ac:	f000 fc2c 	bl	800a008 <fabs>
 80097b0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80097b4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8009948 <__ieee754_rem_pio2+0x248>
 80097b8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80097bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80097c0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80097c4:	ee17 0a90 	vmov	r0, s15
 80097c8:	eeb1 4b45 	vneg.f64	d4, d5
 80097cc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8009928 <__ieee754_rem_pio2+0x228>
 80097d0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80097d4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8009930 <__ieee754_rem_pio2+0x230>
 80097d8:	281f      	cmp	r0, #31
 80097da:	ee25 7b07 	vmul.f64	d7, d5, d7
 80097de:	ee30 6b47 	vsub.f64	d6, d0, d7
 80097e2:	dc08      	bgt.n	80097f6 <__ieee754_rem_pio2+0xf6>
 80097e4:	4b63      	ldr	r3, [pc, #396]	; (8009974 <__ieee754_rem_pio2+0x274>)
 80097e6:	1e42      	subs	r2, r0, #1
 80097e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ec:	42b3      	cmp	r3, r6
 80097ee:	d002      	beq.n	80097f6 <__ieee754_rem_pio2+0xf6>
 80097f0:	ed84 6b00 	vstr	d6, [r4]
 80097f4:	e024      	b.n	8009840 <__ieee754_rem_pio2+0x140>
 80097f6:	ee16 3a90 	vmov	r3, s13
 80097fa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80097fe:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8009802:	2b10      	cmp	r3, #16
 8009804:	ea4f 5226 	mov.w	r2, r6, asr #20
 8009808:	ddf2      	ble.n	80097f0 <__ieee754_rem_pio2+0xf0>
 800980a:	eeb0 6b40 	vmov.f64	d6, d0
 800980e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8009938 <__ieee754_rem_pio2+0x238>
 8009812:	eea4 6b03 	vfma.f64	d6, d4, d3
 8009816:	ee30 7b46 	vsub.f64	d7, d0, d6
 800981a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800981e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8009940 <__ieee754_rem_pio2+0x240>
 8009822:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8009826:	ee36 3b47 	vsub.f64	d3, d6, d7
 800982a:	ee13 3a90 	vmov	r3, s7
 800982e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	2b31      	cmp	r3, #49	; 0x31
 8009836:	dc17      	bgt.n	8009868 <__ieee754_rem_pio2+0x168>
 8009838:	eeb0 0b46 	vmov.f64	d0, d6
 800983c:	ed84 3b00 	vstr	d3, [r4]
 8009840:	ed94 6b00 	vldr	d6, [r4]
 8009844:	2d00      	cmp	r5, #0
 8009846:	ee30 0b46 	vsub.f64	d0, d0, d6
 800984a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800984e:	ed84 7b02 	vstr	d7, [r4, #8]
 8009852:	da85      	bge.n	8009760 <__ieee754_rem_pio2+0x60>
 8009854:	eeb1 6b46 	vneg.f64	d6, d6
 8009858:	ed84 6b00 	vstr	d6, [r4]
 800985c:	eeb1 7b47 	vneg.f64	d7, d7
 8009860:	4240      	negs	r0, r0
 8009862:	ed84 7b02 	vstr	d7, [r4, #8]
 8009866:	e77b      	b.n	8009760 <__ieee754_rem_pio2+0x60>
 8009868:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8009950 <__ieee754_rem_pio2+0x250>
 800986c:	eeb0 0b46 	vmov.f64	d0, d6
 8009870:	eea4 0b03 	vfma.f64	d0, d4, d3
 8009874:	ee36 7b40 	vsub.f64	d7, d6, d0
 8009878:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8009958 <__ieee754_rem_pio2+0x258>
 800987c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8009880:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8009884:	ee30 6b47 	vsub.f64	d6, d0, d7
 8009888:	e7b2      	b.n	80097f0 <__ieee754_rem_pio2+0xf0>
 800988a:	4b3b      	ldr	r3, [pc, #236]	; (8009978 <__ieee754_rem_pio2+0x278>)
 800988c:	429e      	cmp	r6, r3
 800988e:	dd06      	ble.n	800989e <__ieee754_rem_pio2+0x19e>
 8009890:	ee30 7b40 	vsub.f64	d7, d0, d0
 8009894:	ed80 7b02 	vstr	d7, [r0, #8]
 8009898:	ed80 7b00 	vstr	d7, [r0]
 800989c:	e742      	b.n	8009724 <__ieee754_rem_pio2+0x24>
 800989e:	1532      	asrs	r2, r6, #20
 80098a0:	ee10 0a10 	vmov	r0, s0
 80098a4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80098a8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80098ac:	ec41 0b17 	vmov	d7, r0, r1
 80098b0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80098b4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8009960 <__ieee754_rem_pio2+0x260>
 80098b8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80098bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80098c0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80098c4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80098c8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80098cc:	a902      	add	r1, sp, #8
 80098ce:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80098d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80098d6:	ed8d 6b04 	vstr	d6, [sp, #16]
 80098da:	ee27 7b05 	vmul.f64	d7, d7, d5
 80098de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80098e2:	2603      	movs	r6, #3
 80098e4:	4608      	mov	r0, r1
 80098e6:	ed91 7b04 	vldr	d7, [r1, #16]
 80098ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80098ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098f2:	4633      	mov	r3, r6
 80098f4:	f1a1 0108 	sub.w	r1, r1, #8
 80098f8:	f106 36ff 	add.w	r6, r6, #4294967295
 80098fc:	d0f3      	beq.n	80098e6 <__ieee754_rem_pio2+0x1e6>
 80098fe:	491f      	ldr	r1, [pc, #124]	; (800997c <__ieee754_rem_pio2+0x27c>)
 8009900:	9101      	str	r1, [sp, #4]
 8009902:	2102      	movs	r1, #2
 8009904:	9100      	str	r1, [sp, #0]
 8009906:	4621      	mov	r1, r4
 8009908:	f000 f8a6 	bl	8009a58 <__kernel_rem_pio2>
 800990c:	2d00      	cmp	r5, #0
 800990e:	f6bf af27 	bge.w	8009760 <__ieee754_rem_pio2+0x60>
 8009912:	ed94 7b00 	vldr	d7, [r4]
 8009916:	eeb1 7b47 	vneg.f64	d7, d7
 800991a:	ed84 7b00 	vstr	d7, [r4]
 800991e:	ed94 7b02 	vldr	d7, [r4, #8]
 8009922:	e79b      	b.n	800985c <__ieee754_rem_pio2+0x15c>
 8009924:	f3af 8000 	nop.w
 8009928:	54400000 	.word	0x54400000
 800992c:	3ff921fb 	.word	0x3ff921fb
 8009930:	1a626331 	.word	0x1a626331
 8009934:	3dd0b461 	.word	0x3dd0b461
 8009938:	1a600000 	.word	0x1a600000
 800993c:	3dd0b461 	.word	0x3dd0b461
 8009940:	2e037073 	.word	0x2e037073
 8009944:	3ba3198a 	.word	0x3ba3198a
 8009948:	6dc9c883 	.word	0x6dc9c883
 800994c:	3fe45f30 	.word	0x3fe45f30
 8009950:	2e000000 	.word	0x2e000000
 8009954:	3ba3198a 	.word	0x3ba3198a
 8009958:	252049c1 	.word	0x252049c1
 800995c:	397b839a 	.word	0x397b839a
 8009960:	00000000 	.word	0x00000000
 8009964:	41700000 	.word	0x41700000
 8009968:	3fe921fb 	.word	0x3fe921fb
 800996c:	4002d97b 	.word	0x4002d97b
 8009970:	413921fb 	.word	0x413921fb
 8009974:	0800b220 	.word	0x0800b220
 8009978:	7fefffff 	.word	0x7fefffff
 800997c:	0800b2a0 	.word	0x0800b2a0

08009980 <__kernel_cos>:
 8009980:	ee10 1a90 	vmov	r1, s1
 8009984:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8009988:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800998c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8009990:	da05      	bge.n	800999e <__kernel_cos+0x1e>
 8009992:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8009996:	ee17 3a90 	vmov	r3, s15
 800999a:	2b00      	cmp	r3, #0
 800999c:	d03d      	beq.n	8009a1a <__kernel_cos+0x9a>
 800999e:	ee20 3b00 	vmul.f64	d3, d0, d0
 80099a2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8009a20 <__kernel_cos+0xa0>
 80099a6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8009a28 <__kernel_cos+0xa8>
 80099aa:	eea3 6b07 	vfma.f64	d6, d3, d7
 80099ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009a30 <__kernel_cos+0xb0>
 80099b2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80099b6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8009a38 <__kernel_cos+0xb8>
 80099ba:	eea7 6b03 	vfma.f64	d6, d7, d3
 80099be:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009a40 <__kernel_cos+0xc0>
 80099c2:	4b23      	ldr	r3, [pc, #140]	; (8009a50 <__kernel_cos+0xd0>)
 80099c4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80099c8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8009a48 <__kernel_cos+0xc8>
 80099cc:	4299      	cmp	r1, r3
 80099ce:	eea7 6b03 	vfma.f64	d6, d7, d3
 80099d2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80099d6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80099da:	ee23 7b07 	vmul.f64	d7, d3, d7
 80099de:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80099e2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80099e6:	dc04      	bgt.n	80099f2 <__kernel_cos+0x72>
 80099e8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80099ec:	ee34 0b46 	vsub.f64	d0, d4, d6
 80099f0:	4770      	bx	lr
 80099f2:	4b18      	ldr	r3, [pc, #96]	; (8009a54 <__kernel_cos+0xd4>)
 80099f4:	4299      	cmp	r1, r3
 80099f6:	dc0d      	bgt.n	8009a14 <__kernel_cos+0x94>
 80099f8:	2200      	movs	r2, #0
 80099fa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80099fe:	ec43 2b15 	vmov	d5, r2, r3
 8009a02:	ee34 0b45 	vsub.f64	d0, d4, d5
 8009a06:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009a0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009a0e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8009a12:	4770      	bx	lr
 8009a14:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8009a18:	e7f3      	b.n	8009a02 <__kernel_cos+0x82>
 8009a1a:	eeb0 0b44 	vmov.f64	d0, d4
 8009a1e:	4770      	bx	lr
 8009a20:	be8838d4 	.word	0xbe8838d4
 8009a24:	bda8fae9 	.word	0xbda8fae9
 8009a28:	bdb4b1c4 	.word	0xbdb4b1c4
 8009a2c:	3e21ee9e 	.word	0x3e21ee9e
 8009a30:	809c52ad 	.word	0x809c52ad
 8009a34:	be927e4f 	.word	0xbe927e4f
 8009a38:	19cb1590 	.word	0x19cb1590
 8009a3c:	3efa01a0 	.word	0x3efa01a0
 8009a40:	16c15177 	.word	0x16c15177
 8009a44:	bf56c16c 	.word	0xbf56c16c
 8009a48:	5555554c 	.word	0x5555554c
 8009a4c:	3fa55555 	.word	0x3fa55555
 8009a50:	3fd33332 	.word	0x3fd33332
 8009a54:	3fe90000 	.word	0x3fe90000

08009a58 <__kernel_rem_pio2>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	ed2d 8b06 	vpush	{d8-d10}
 8009a60:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8009a64:	469b      	mov	fp, r3
 8009a66:	460f      	mov	r7, r1
 8009a68:	4bcf      	ldr	r3, [pc, #828]	; (8009da8 <__kernel_rem_pio2+0x350>)
 8009a6a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8009a6c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8009a70:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8009a74:	9000      	str	r0, [sp, #0]
 8009a76:	f112 0f14 	cmn.w	r2, #20
 8009a7a:	bfa8      	it	ge
 8009a7c:	2318      	movge	r3, #24
 8009a7e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8009a82:	bfb8      	it	lt
 8009a84:	2300      	movlt	r3, #0
 8009a86:	f06f 0417 	mvn.w	r4, #23
 8009a8a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8009d90 <__kernel_rem_pio2+0x338>
 8009a8e:	bfa4      	itt	ge
 8009a90:	f1a2 0a03 	subge.w	sl, r2, #3
 8009a94:	fb9a f3f3 	sdivge	r3, sl, r3
 8009a98:	fb03 4404 	mla	r4, r3, r4, r4
 8009a9c:	1a5d      	subs	r5, r3, r1
 8009a9e:	4414      	add	r4, r2
 8009aa0:	eb09 0601 	add.w	r6, r9, r1
 8009aa4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8009aa8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8009aac:	2200      	movs	r2, #0
 8009aae:	42b2      	cmp	r2, r6
 8009ab0:	dd12      	ble.n	8009ad8 <__kernel_rem_pio2+0x80>
 8009ab2:	aa18      	add	r2, sp, #96	; 0x60
 8009ab4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8009ab8:	460e      	mov	r6, r1
 8009aba:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8009abe:	f1cb 0a01 	rsb	sl, fp, #1
 8009ac2:	eb0a 0006 	add.w	r0, sl, r6
 8009ac6:	4581      	cmp	r9, r0
 8009ac8:	db25      	blt.n	8009b16 <__kernel_rem_pio2+0xbe>
 8009aca:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8009d90 <__kernel_rem_pio2+0x338>
 8009ace:	f8dd e000 	ldr.w	lr, [sp]
 8009ad2:	4615      	mov	r5, r2
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	e015      	b.n	8009b04 <__kernel_rem_pio2+0xac>
 8009ad8:	42d5      	cmn	r5, r2
 8009ada:	d409      	bmi.n	8009af0 <__kernel_rem_pio2+0x98>
 8009adc:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8009ae0:	ee07 0a90 	vmov	s15, r0
 8009ae4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ae8:	eca8 7b02 	vstmia	r8!, {d7}
 8009aec:	3201      	adds	r2, #1
 8009aee:	e7de      	b.n	8009aae <__kernel_rem_pio2+0x56>
 8009af0:	eeb0 7b46 	vmov.f64	d7, d6
 8009af4:	e7f8      	b.n	8009ae8 <__kernel_rem_pio2+0x90>
 8009af6:	ecbe 5b02 	vldmia	lr!, {d5}
 8009afa:	ed95 6b00 	vldr	d6, [r5]
 8009afe:	3001      	adds	r0, #1
 8009b00:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009b04:	4288      	cmp	r0, r1
 8009b06:	f1a5 0508 	sub.w	r5, r5, #8
 8009b0a:	ddf4      	ble.n	8009af6 <__kernel_rem_pio2+0x9e>
 8009b0c:	eca8 7b02 	vstmia	r8!, {d7}
 8009b10:	3208      	adds	r2, #8
 8009b12:	3601      	adds	r6, #1
 8009b14:	e7d5      	b.n	8009ac2 <__kernel_rem_pio2+0x6a>
 8009b16:	aa04      	add	r2, sp, #16
 8009b18:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8009d98 <__kernel_rem_pio2+0x340>
 8009b1c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8009da0 <__kernel_rem_pio2+0x348>
 8009b20:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8009b24:	9201      	str	r2, [sp, #4]
 8009b26:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8009b2a:	464e      	mov	r6, r9
 8009b2c:	ab90      	add	r3, sp, #576	; 0x240
 8009b2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b32:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8009b36:	ab04      	add	r3, sp, #16
 8009b38:	4618      	mov	r0, r3
 8009b3a:	4632      	mov	r2, r6
 8009b3c:	2a00      	cmp	r2, #0
 8009b3e:	dc4e      	bgt.n	8009bde <__kernel_rem_pio2+0x186>
 8009b40:	4620      	mov	r0, r4
 8009b42:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8009b46:	f000 fadf 	bl	800a108 <scalbn>
 8009b4a:	eeb0 8b40 	vmov.f64	d8, d0
 8009b4e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8009b52:	ee28 0b00 	vmul.f64	d0, d8, d0
 8009b56:	f000 fa63 	bl	800a020 <floor>
 8009b5a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8009b5e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8009b62:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8009b66:	2c00      	cmp	r4, #0
 8009b68:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8009b6c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8009b70:	ee38 8b40 	vsub.f64	d8, d8, d0
 8009b74:	ee17 8a90 	vmov	r8, s15
 8009b78:	dd46      	ble.n	8009c08 <__kernel_rem_pio2+0x1b0>
 8009b7a:	1e70      	subs	r0, r6, #1
 8009b7c:	aa04      	add	r2, sp, #16
 8009b7e:	f1c4 0c18 	rsb	ip, r4, #24
 8009b82:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8009b86:	fa45 f20c 	asr.w	r2, r5, ip
 8009b8a:	4490      	add	r8, r2
 8009b8c:	fa02 f20c 	lsl.w	r2, r2, ip
 8009b90:	1aad      	subs	r5, r5, r2
 8009b92:	aa04      	add	r2, sp, #16
 8009b94:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8009b98:	f1c4 0217 	rsb	r2, r4, #23
 8009b9c:	4115      	asrs	r5, r2
 8009b9e:	2d00      	cmp	r5, #0
 8009ba0:	dd41      	ble.n	8009c26 <__kernel_rem_pio2+0x1ce>
 8009ba2:	f04f 0c00 	mov.w	ip, #0
 8009ba6:	f108 0801 	add.w	r8, r8, #1
 8009baa:	4660      	mov	r0, ip
 8009bac:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8009bb0:	4566      	cmp	r6, ip
 8009bb2:	dc69      	bgt.n	8009c88 <__kernel_rem_pio2+0x230>
 8009bb4:	2c00      	cmp	r4, #0
 8009bb6:	dd03      	ble.n	8009bc0 <__kernel_rem_pio2+0x168>
 8009bb8:	2c01      	cmp	r4, #1
 8009bba:	d076      	beq.n	8009caa <__kernel_rem_pio2+0x252>
 8009bbc:	2c02      	cmp	r4, #2
 8009bbe:	d07f      	beq.n	8009cc0 <__kernel_rem_pio2+0x268>
 8009bc0:	2d02      	cmp	r5, #2
 8009bc2:	d130      	bne.n	8009c26 <__kernel_rem_pio2+0x1ce>
 8009bc4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009bc8:	ee30 8b48 	vsub.f64	d8, d0, d8
 8009bcc:	b358      	cbz	r0, 8009c26 <__kernel_rem_pio2+0x1ce>
 8009bce:	4620      	mov	r0, r4
 8009bd0:	9102      	str	r1, [sp, #8]
 8009bd2:	f000 fa99 	bl	800a108 <scalbn>
 8009bd6:	9902      	ldr	r1, [sp, #8]
 8009bd8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8009bdc:	e023      	b.n	8009c26 <__kernel_rem_pio2+0x1ce>
 8009bde:	ee20 7b09 	vmul.f64	d7, d0, d9
 8009be2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009be6:	3a01      	subs	r2, #1
 8009be8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8009bec:	ad68      	add	r5, sp, #416	; 0x1a0
 8009bee:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8009bf2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009bf6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8009bfa:	eca0 0a01 	vstmia	r0!, {s0}
 8009bfe:	ed95 0b00 	vldr	d0, [r5]
 8009c02:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009c06:	e799      	b.n	8009b3c <__kernel_rem_pio2+0xe4>
 8009c08:	d105      	bne.n	8009c16 <__kernel_rem_pio2+0x1be>
 8009c0a:	1e72      	subs	r2, r6, #1
 8009c0c:	a804      	add	r0, sp, #16
 8009c0e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8009c12:	15ed      	asrs	r5, r5, #23
 8009c14:	e7c3      	b.n	8009b9e <__kernel_rem_pio2+0x146>
 8009c16:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009c1a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c22:	da2f      	bge.n	8009c84 <__kernel_rem_pio2+0x22c>
 8009c24:	2500      	movs	r5, #0
 8009c26:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c2e:	f040 8087 	bne.w	8009d40 <__kernel_rem_pio2+0x2e8>
 8009c32:	1e73      	subs	r3, r6, #1
 8009c34:	4618      	mov	r0, r3
 8009c36:	f04f 0c00 	mov.w	ip, #0
 8009c3a:	4548      	cmp	r0, r9
 8009c3c:	da47      	bge.n	8009cce <__kernel_rem_pio2+0x276>
 8009c3e:	f1bc 0f00 	cmp.w	ip, #0
 8009c42:	d070      	beq.n	8009d26 <__kernel_rem_pio2+0x2ce>
 8009c44:	aa04      	add	r2, sp, #16
 8009c46:	3c18      	subs	r4, #24
 8009c48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c4c:	2a00      	cmp	r2, #0
 8009c4e:	d075      	beq.n	8009d3c <__kernel_rem_pio2+0x2e4>
 8009c50:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009c54:	4620      	mov	r0, r4
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	f000 fa56 	bl	800a108 <scalbn>
 8009c5c:	9b00      	ldr	r3, [sp, #0]
 8009c5e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8009d98 <__kernel_rem_pio2+0x340>
 8009c62:	461a      	mov	r2, r3
 8009c64:	2a00      	cmp	r2, #0
 8009c66:	f280 80ac 	bge.w	8009dc2 <__kernel_rem_pio2+0x36a>
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	2900      	cmp	r1, #0
 8009c70:	f2c0 80cd 	blt.w	8009e0e <__kernel_rem_pio2+0x3b6>
 8009c74:	aa68      	add	r2, sp, #416	; 0x1a0
 8009c76:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8009c7a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8009d90 <__kernel_rem_pio2+0x338>
 8009c7e:	4e4b      	ldr	r6, [pc, #300]	; (8009dac <__kernel_rem_pio2+0x354>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	e0b8      	b.n	8009df6 <__kernel_rem_pio2+0x39e>
 8009c84:	2502      	movs	r5, #2
 8009c86:	e78c      	b.n	8009ba2 <__kernel_rem_pio2+0x14a>
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	b948      	cbnz	r0, 8009ca0 <__kernel_rem_pio2+0x248>
 8009c8c:	b11a      	cbz	r2, 8009c96 <__kernel_rem_pio2+0x23e>
 8009c8e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f10c 0c01 	add.w	ip, ip, #1
 8009c9a:	3304      	adds	r3, #4
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	e787      	b.n	8009bb0 <__kernel_rem_pio2+0x158>
 8009ca0:	ebae 0202 	sub.w	r2, lr, r2
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	e7f5      	b.n	8009c96 <__kernel_rem_pio2+0x23e>
 8009caa:	1e72      	subs	r2, r6, #1
 8009cac:	ab04      	add	r3, sp, #16
 8009cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009cb6:	f10d 0c10 	add.w	ip, sp, #16
 8009cba:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8009cbe:	e77f      	b.n	8009bc0 <__kernel_rem_pio2+0x168>
 8009cc0:	1e72      	subs	r2, r6, #1
 8009cc2:	ab04      	add	r3, sp, #16
 8009cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009ccc:	e7f3      	b.n	8009cb6 <__kernel_rem_pio2+0x25e>
 8009cce:	aa04      	add	r2, sp, #16
 8009cd0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8009cd4:	3801      	subs	r0, #1
 8009cd6:	ea4c 0c02 	orr.w	ip, ip, r2
 8009cda:	e7ae      	b.n	8009c3a <__kernel_rem_pio2+0x1e2>
 8009cdc:	3001      	adds	r0, #1
 8009cde:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009ce2:	2a00      	cmp	r2, #0
 8009ce4:	d0fa      	beq.n	8009cdc <__kernel_rem_pio2+0x284>
 8009ce6:	eb06 020b 	add.w	r2, r6, fp
 8009cea:	ad18      	add	r5, sp, #96	; 0x60
 8009cec:	1c73      	adds	r3, r6, #1
 8009cee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009cf2:	4406      	add	r6, r0
 8009cf4:	429e      	cmp	r6, r3
 8009cf6:	f6ff af19 	blt.w	8009b2c <__kernel_rem_pio2+0xd4>
 8009cfa:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8009cfe:	9d00      	ldr	r5, [sp, #0]
 8009d00:	ee07 0a90 	vmov	s15, r0
 8009d04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009d08:	2000      	movs	r0, #0
 8009d0a:	eca2 7b02 	vstmia	r2!, {d7}
 8009d0e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009d90 <__kernel_rem_pio2+0x338>
 8009d12:	4694      	mov	ip, r2
 8009d14:	4288      	cmp	r0, r1
 8009d16:	dd09      	ble.n	8009d2c <__kernel_rem_pio2+0x2d4>
 8009d18:	a868      	add	r0, sp, #416	; 0x1a0
 8009d1a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8009d1e:	ed80 7b00 	vstr	d7, [r0]
 8009d22:	3301      	adds	r3, #1
 8009d24:	e7e6      	b.n	8009cf4 <__kernel_rem_pio2+0x29c>
 8009d26:	9b01      	ldr	r3, [sp, #4]
 8009d28:	2001      	movs	r0, #1
 8009d2a:	e7d8      	b.n	8009cde <__kernel_rem_pio2+0x286>
 8009d2c:	ecb5 5b02 	vldmia	r5!, {d5}
 8009d30:	ed3c 6b02 	vldmdb	ip!, {d6}
 8009d34:	3001      	adds	r0, #1
 8009d36:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009d3a:	e7eb      	b.n	8009d14 <__kernel_rem_pio2+0x2bc>
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	e781      	b.n	8009c44 <__kernel_rem_pio2+0x1ec>
 8009d40:	4260      	negs	r0, r4
 8009d42:	eeb0 0b48 	vmov.f64	d0, d8
 8009d46:	f000 f9df 	bl	800a108 <scalbn>
 8009d4a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8009da0 <__kernel_rem_pio2+0x348>
 8009d4e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8009d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d56:	db2b      	blt.n	8009db0 <__kernel_rem_pio2+0x358>
 8009d58:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8009d98 <__kernel_rem_pio2+0x340>
 8009d5c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009d60:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009d64:	aa04      	add	r2, sp, #16
 8009d66:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8009d6a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8009d6e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009d72:	a904      	add	r1, sp, #16
 8009d74:	ee10 3a10 	vmov	r3, s0
 8009d78:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009d7c:	ee17 2a10 	vmov	r2, s14
 8009d80:	1c73      	adds	r3, r6, #1
 8009d82:	3418      	adds	r4, #24
 8009d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009d88:	e762      	b.n	8009c50 <__kernel_rem_pio2+0x1f8>
 8009d8a:	bf00      	nop
 8009d8c:	f3af 8000 	nop.w
	...
 8009d9c:	3e700000 	.word	0x3e700000
 8009da0:	00000000 	.word	0x00000000
 8009da4:	41700000 	.word	0x41700000
 8009da8:	0800b3e8 	.word	0x0800b3e8
 8009dac:	0800b3a8 	.word	0x0800b3a8
 8009db0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009db4:	aa04      	add	r2, sp, #16
 8009db6:	ee10 3a10 	vmov	r3, s0
 8009dba:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009dbe:	4633      	mov	r3, r6
 8009dc0:	e746      	b.n	8009c50 <__kernel_rem_pio2+0x1f8>
 8009dc2:	a804      	add	r0, sp, #16
 8009dc4:	a968      	add	r1, sp, #416	; 0x1a0
 8009dc6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8009dca:	9000      	str	r0, [sp, #0]
 8009dcc:	ee07 0a90 	vmov	s15, r0
 8009dd0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009dd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009dd8:	3a01      	subs	r2, #1
 8009dda:	ee27 7b00 	vmul.f64	d7, d7, d0
 8009dde:	ee20 0b06 	vmul.f64	d0, d0, d6
 8009de2:	ed81 7b00 	vstr	d7, [r1]
 8009de6:	e73d      	b.n	8009c64 <__kernel_rem_pio2+0x20c>
 8009de8:	ecb6 5b02 	vldmia	r6!, {d5}
 8009dec:	ecb4 6b02 	vldmia	r4!, {d6}
 8009df0:	3201      	adds	r2, #1
 8009df2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009df6:	454a      	cmp	r2, r9
 8009df8:	dc01      	bgt.n	8009dfe <__kernel_rem_pio2+0x3a6>
 8009dfa:	4290      	cmp	r0, r2
 8009dfc:	daf4      	bge.n	8009de8 <__kernel_rem_pio2+0x390>
 8009dfe:	aa40      	add	r2, sp, #256	; 0x100
 8009e00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009e04:	ed82 7b00 	vstr	d7, [r2]
 8009e08:	3901      	subs	r1, #1
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	e72f      	b.n	8009c6e <__kernel_rem_pio2+0x216>
 8009e0e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8009e10:	2a02      	cmp	r2, #2
 8009e12:	dc0a      	bgt.n	8009e2a <__kernel_rem_pio2+0x3d2>
 8009e14:	2a00      	cmp	r2, #0
 8009e16:	dc5a      	bgt.n	8009ece <__kernel_rem_pio2+0x476>
 8009e18:	d039      	beq.n	8009e8e <__kernel_rem_pio2+0x436>
 8009e1a:	f008 0007 	and.w	r0, r8, #7
 8009e1e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8009e22:	ecbd 8b06 	vpop	{d8-d10}
 8009e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8009e2c:	2a03      	cmp	r2, #3
 8009e2e:	d1f4      	bne.n	8009e1a <__kernel_rem_pio2+0x3c2>
 8009e30:	aa40      	add	r2, sp, #256	; 0x100
 8009e32:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009e36:	4611      	mov	r1, r2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	f1a1 0108 	sub.w	r1, r1, #8
 8009e40:	dc52      	bgt.n	8009ee8 <__kernel_rem_pio2+0x490>
 8009e42:	4619      	mov	r1, r3
 8009e44:	2901      	cmp	r1, #1
 8009e46:	f1a2 0208 	sub.w	r2, r2, #8
 8009e4a:	dc5d      	bgt.n	8009f08 <__kernel_rem_pio2+0x4b0>
 8009e4c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8009f50 <__kernel_rem_pio2+0x4f8>
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	dc69      	bgt.n	8009f28 <__kernel_rem_pio2+0x4d0>
 8009e54:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8009e58:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8009e5c:	2d00      	cmp	r5, #0
 8009e5e:	d16c      	bne.n	8009f3a <__kernel_rem_pio2+0x4e2>
 8009e60:	ed87 5b00 	vstr	d5, [r7]
 8009e64:	ed87 6b02 	vstr	d6, [r7, #8]
 8009e68:	ed87 7b04 	vstr	d7, [r7, #16]
 8009e6c:	e7d5      	b.n	8009e1a <__kernel_rem_pio2+0x3c2>
 8009e6e:	aa40      	add	r2, sp, #256	; 0x100
 8009e70:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009e74:	ed92 6b00 	vldr	d6, [r2]
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	daf5      	bge.n	8009e6e <__kernel_rem_pio2+0x416>
 8009e82:	b10d      	cbz	r5, 8009e88 <__kernel_rem_pio2+0x430>
 8009e84:	eeb1 7b47 	vneg.f64	d7, d7
 8009e88:	ed87 7b00 	vstr	d7, [r7]
 8009e8c:	e7c5      	b.n	8009e1a <__kernel_rem_pio2+0x3c2>
 8009e8e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8009f50 <__kernel_rem_pio2+0x4f8>
 8009e92:	e7f4      	b.n	8009e7e <__kernel_rem_pio2+0x426>
 8009e94:	a940      	add	r1, sp, #256	; 0x100
 8009e96:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009e9a:	ed91 7b00 	vldr	d7, [r1]
 8009e9e:	3a01      	subs	r2, #1
 8009ea0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	daf5      	bge.n	8009e94 <__kernel_rem_pio2+0x43c>
 8009ea8:	b1ad      	cbz	r5, 8009ed6 <__kernel_rem_pio2+0x47e>
 8009eaa:	eeb1 7b46 	vneg.f64	d7, d6
 8009eae:	ed87 7b00 	vstr	d7, [r7]
 8009eb2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8009eb6:	a942      	add	r1, sp, #264	; 0x108
 8009eb8:	2201      	movs	r2, #1
 8009eba:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	da0c      	bge.n	8009edc <__kernel_rem_pio2+0x484>
 8009ec2:	b10d      	cbz	r5, 8009ec8 <__kernel_rem_pio2+0x470>
 8009ec4:	eeb1 7b47 	vneg.f64	d7, d7
 8009ec8:	ed87 7b02 	vstr	d7, [r7, #8]
 8009ecc:	e7a5      	b.n	8009e1a <__kernel_rem_pio2+0x3c2>
 8009ece:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8009f50 <__kernel_rem_pio2+0x4f8>
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	e7e6      	b.n	8009ea4 <__kernel_rem_pio2+0x44c>
 8009ed6:	eeb0 7b46 	vmov.f64	d7, d6
 8009eda:	e7e8      	b.n	8009eae <__kernel_rem_pio2+0x456>
 8009edc:	ecb1 6b02 	vldmia	r1!, {d6}
 8009ee0:	3201      	adds	r2, #1
 8009ee2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009ee6:	e7ea      	b.n	8009ebe <__kernel_rem_pio2+0x466>
 8009ee8:	ed91 7b00 	vldr	d7, [r1]
 8009eec:	ed91 5b02 	vldr	d5, [r1, #8]
 8009ef0:	3801      	subs	r0, #1
 8009ef2:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009ef6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009efa:	ed81 6b00 	vstr	d6, [r1]
 8009efe:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009f02:	ed81 7b02 	vstr	d7, [r1, #8]
 8009f06:	e798      	b.n	8009e3a <__kernel_rem_pio2+0x3e2>
 8009f08:	ed92 7b00 	vldr	d7, [r2]
 8009f0c:	ed92 5b02 	vldr	d5, [r2, #8]
 8009f10:	3901      	subs	r1, #1
 8009f12:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009f16:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009f1a:	ed82 6b00 	vstr	d6, [r2]
 8009f1e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009f22:	ed82 7b02 	vstr	d7, [r2, #8]
 8009f26:	e78d      	b.n	8009e44 <__kernel_rem_pio2+0x3ec>
 8009f28:	aa40      	add	r2, sp, #256	; 0x100
 8009f2a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009f2e:	ed92 6b00 	vldr	d6, [r2]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009f38:	e78a      	b.n	8009e50 <__kernel_rem_pio2+0x3f8>
 8009f3a:	eeb1 5b45 	vneg.f64	d5, d5
 8009f3e:	eeb1 6b46 	vneg.f64	d6, d6
 8009f42:	ed87 5b00 	vstr	d5, [r7]
 8009f46:	eeb1 7b47 	vneg.f64	d7, d7
 8009f4a:	ed87 6b02 	vstr	d6, [r7, #8]
 8009f4e:	e78b      	b.n	8009e68 <__kernel_rem_pio2+0x410>
	...

08009f58 <__kernel_sin>:
 8009f58:	ee10 3a90 	vmov	r3, s1
 8009f5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f60:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009f64:	da04      	bge.n	8009f70 <__kernel_sin+0x18>
 8009f66:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8009f6a:	ee17 3a90 	vmov	r3, s15
 8009f6e:	b35b      	cbz	r3, 8009fc8 <__kernel_sin+0x70>
 8009f70:	ee20 6b00 	vmul.f64	d6, d0, d0
 8009f74:	ee20 5b06 	vmul.f64	d5, d0, d6
 8009f78:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009fd0 <__kernel_sin+0x78>
 8009f7c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009fd8 <__kernel_sin+0x80>
 8009f80:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009f84:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009fe0 <__kernel_sin+0x88>
 8009f88:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009f8c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009fe8 <__kernel_sin+0x90>
 8009f90:	eea7 4b06 	vfma.f64	d4, d7, d6
 8009f94:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009ff0 <__kernel_sin+0x98>
 8009f98:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009f9c:	b930      	cbnz	r0, 8009fac <__kernel_sin+0x54>
 8009f9e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009ff8 <__kernel_sin+0xa0>
 8009fa2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009fa6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8009faa:	4770      	bx	lr
 8009fac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8009fb0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009fb4:	eea1 7b04 	vfma.f64	d7, d1, d4
 8009fb8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8009fbc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800a000 <__kernel_sin+0xa8>
 8009fc0:	eea5 1b07 	vfma.f64	d1, d5, d7
 8009fc4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	f3af 8000 	nop.w
 8009fd0:	5acfd57c 	.word	0x5acfd57c
 8009fd4:	3de5d93a 	.word	0x3de5d93a
 8009fd8:	8a2b9ceb 	.word	0x8a2b9ceb
 8009fdc:	be5ae5e6 	.word	0xbe5ae5e6
 8009fe0:	57b1fe7d 	.word	0x57b1fe7d
 8009fe4:	3ec71de3 	.word	0x3ec71de3
 8009fe8:	19c161d5 	.word	0x19c161d5
 8009fec:	bf2a01a0 	.word	0xbf2a01a0
 8009ff0:	1110f8a6 	.word	0x1110f8a6
 8009ff4:	3f811111 	.word	0x3f811111
 8009ff8:	55555549 	.word	0x55555549
 8009ffc:	bfc55555 	.word	0xbfc55555
 800a000:	55555549 	.word	0x55555549
 800a004:	3fc55555 	.word	0x3fc55555

0800a008 <fabs>:
 800a008:	ec51 0b10 	vmov	r0, r1, d0
 800a00c:	ee10 2a10 	vmov	r2, s0
 800a010:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a014:	ec43 2b10 	vmov	d0, r2, r3
 800a018:	4770      	bx	lr
 800a01a:	0000      	movs	r0, r0
 800a01c:	0000      	movs	r0, r0
	...

0800a020 <floor>:
 800a020:	ee10 1a90 	vmov	r1, s1
 800a024:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a028:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800a02c:	2b13      	cmp	r3, #19
 800a02e:	b530      	push	{r4, r5, lr}
 800a030:	ee10 0a10 	vmov	r0, s0
 800a034:	ee10 5a10 	vmov	r5, s0
 800a038:	dc31      	bgt.n	800a09e <floor+0x7e>
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	da15      	bge.n	800a06a <floor+0x4a>
 800a03e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a0f8 <floor+0xd8>
 800a042:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a046:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a04e:	dd07      	ble.n	800a060 <floor+0x40>
 800a050:	2900      	cmp	r1, #0
 800a052:	da4e      	bge.n	800a0f2 <floor+0xd2>
 800a054:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a058:	4318      	orrs	r0, r3
 800a05a:	d001      	beq.n	800a060 <floor+0x40>
 800a05c:	4928      	ldr	r1, [pc, #160]	; (800a100 <floor+0xe0>)
 800a05e:	2000      	movs	r0, #0
 800a060:	460b      	mov	r3, r1
 800a062:	4602      	mov	r2, r0
 800a064:	ec43 2b10 	vmov	d0, r2, r3
 800a068:	e020      	b.n	800a0ac <floor+0x8c>
 800a06a:	4a26      	ldr	r2, [pc, #152]	; (800a104 <floor+0xe4>)
 800a06c:	411a      	asrs	r2, r3
 800a06e:	ea01 0402 	and.w	r4, r1, r2
 800a072:	4304      	orrs	r4, r0
 800a074:	d01a      	beq.n	800a0ac <floor+0x8c>
 800a076:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a0f8 <floor+0xd8>
 800a07a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a07e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a086:	ddeb      	ble.n	800a060 <floor+0x40>
 800a088:	2900      	cmp	r1, #0
 800a08a:	bfbe      	ittt	lt
 800a08c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800a090:	fa40 f303 	asrlt.w	r3, r0, r3
 800a094:	18c9      	addlt	r1, r1, r3
 800a096:	ea21 0102 	bic.w	r1, r1, r2
 800a09a:	2000      	movs	r0, #0
 800a09c:	e7e0      	b.n	800a060 <floor+0x40>
 800a09e:	2b33      	cmp	r3, #51	; 0x33
 800a0a0:	dd05      	ble.n	800a0ae <floor+0x8e>
 800a0a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0a6:	d101      	bne.n	800a0ac <floor+0x8c>
 800a0a8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a0ac:	bd30      	pop	{r4, r5, pc}
 800a0ae:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800a0b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b6:	40e2      	lsrs	r2, r4
 800a0b8:	4202      	tst	r2, r0
 800a0ba:	d0f7      	beq.n	800a0ac <floor+0x8c>
 800a0bc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800a0f8 <floor+0xd8>
 800a0c0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a0c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0cc:	ddc8      	ble.n	800a060 <floor+0x40>
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	da02      	bge.n	800a0d8 <floor+0xb8>
 800a0d2:	2b14      	cmp	r3, #20
 800a0d4:	d103      	bne.n	800a0de <floor+0xbe>
 800a0d6:	3101      	adds	r1, #1
 800a0d8:	ea20 0002 	bic.w	r0, r0, r2
 800a0dc:	e7c0      	b.n	800a060 <floor+0x40>
 800a0de:	2401      	movs	r4, #1
 800a0e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a0e4:	fa04 f303 	lsl.w	r3, r4, r3
 800a0e8:	4418      	add	r0, r3
 800a0ea:	42a8      	cmp	r0, r5
 800a0ec:	bf38      	it	cc
 800a0ee:	1909      	addcc	r1, r1, r4
 800a0f0:	e7f2      	b.n	800a0d8 <floor+0xb8>
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	4601      	mov	r1, r0
 800a0f6:	e7b3      	b.n	800a060 <floor+0x40>
 800a0f8:	8800759c 	.word	0x8800759c
 800a0fc:	7e37e43c 	.word	0x7e37e43c
 800a100:	bff00000 	.word	0xbff00000
 800a104:	000fffff 	.word	0x000fffff

0800a108 <scalbn>:
 800a108:	b082      	sub	sp, #8
 800a10a:	ed8d 0b00 	vstr	d0, [sp]
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a114:	b9a2      	cbnz	r2, 800a140 <scalbn+0x38>
 800a116:	9a00      	ldr	r2, [sp, #0]
 800a118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a11c:	4313      	orrs	r3, r2
 800a11e:	d03a      	beq.n	800a196 <scalbn+0x8e>
 800a120:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800a1f8 <scalbn+0xf0>
 800a124:	4b40      	ldr	r3, [pc, #256]	; (800a228 <scalbn+0x120>)
 800a126:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a12a:	4298      	cmp	r0, r3
 800a12c:	ed8d 7b00 	vstr	d7, [sp]
 800a130:	da11      	bge.n	800a156 <scalbn+0x4e>
 800a132:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800a200 <scalbn+0xf8>
 800a136:	ed9d 6b00 	vldr	d6, [sp]
 800a13a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a13e:	e007      	b.n	800a150 <scalbn+0x48>
 800a140:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a144:	428a      	cmp	r2, r1
 800a146:	d10a      	bne.n	800a15e <scalbn+0x56>
 800a148:	ed9d 7b00 	vldr	d7, [sp]
 800a14c:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a150:	ed8d 7b00 	vstr	d7, [sp]
 800a154:	e01f      	b.n	800a196 <scalbn+0x8e>
 800a156:	9b01      	ldr	r3, [sp, #4]
 800a158:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a15c:	3a36      	subs	r2, #54	; 0x36
 800a15e:	4402      	add	r2, r0
 800a160:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a164:	428a      	cmp	r2, r1
 800a166:	dd0a      	ble.n	800a17e <scalbn+0x76>
 800a168:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800a208 <scalbn+0x100>
 800a16c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800a210 <scalbn+0x108>
 800a170:	eeb0 6b47 	vmov.f64	d6, d7
 800a174:	9b01      	ldr	r3, [sp, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	fe27 7b05 	vselge.f64	d7, d7, d5
 800a17c:	e7dd      	b.n	800a13a <scalbn+0x32>
 800a17e:	2a00      	cmp	r2, #0
 800a180:	dd0d      	ble.n	800a19e <scalbn+0x96>
 800a182:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a186:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a18a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a18e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a192:	e9cd 0100 	strd	r0, r1, [sp]
 800a196:	ed9d 0b00 	vldr	d0, [sp]
 800a19a:	b002      	add	sp, #8
 800a19c:	4770      	bx	lr
 800a19e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a1a2:	da18      	bge.n	800a1d6 <scalbn+0xce>
 800a1a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a1a8:	4298      	cmp	r0, r3
 800a1aa:	9b01      	ldr	r3, [sp, #4]
 800a1ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1b0:	dd09      	ble.n	800a1c6 <scalbn+0xbe>
 800a1b2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800a208 <scalbn+0x100>
 800a1b6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800a210 <scalbn+0x108>
 800a1ba:	eeb0 6b47 	vmov.f64	d6, d7
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800a1c4:	e7b9      	b.n	800a13a <scalbn+0x32>
 800a1c6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800a200 <scalbn+0xf8>
 800a1ca:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800a218 <scalbn+0x110>
 800a1ce:	eeb0 6b47 	vmov.f64	d6, d7
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	e7f4      	b.n	800a1c0 <scalbn+0xb8>
 800a1d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1de:	3236      	adds	r2, #54	; 0x36
 800a1e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a1e4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a1e8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800a220 <scalbn+0x118>
 800a1ec:	ec41 0b17 	vmov	d7, r0, r1
 800a1f0:	e7a3      	b.n	800a13a <scalbn+0x32>
 800a1f2:	bf00      	nop
 800a1f4:	f3af 8000 	nop.w
 800a1f8:	00000000 	.word	0x00000000
 800a1fc:	43500000 	.word	0x43500000
 800a200:	c2f8f359 	.word	0xc2f8f359
 800a204:	01a56e1f 	.word	0x01a56e1f
 800a208:	8800759c 	.word	0x8800759c
 800a20c:	7e37e43c 	.word	0x7e37e43c
 800a210:	8800759c 	.word	0x8800759c
 800a214:	fe37e43c 	.word	0xfe37e43c
 800a218:	c2f8f359 	.word	0xc2f8f359
 800a21c:	81a56e1f 	.word	0x81a56e1f
 800a220:	00000000 	.word	0x00000000
 800a224:	3c900000 	.word	0x3c900000
 800a228:	ffff3cb0 	.word	0xffff3cb0

0800a22c <_init>:
 800a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22e:	bf00      	nop
 800a230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a232:	bc08      	pop	{r3}
 800a234:	469e      	mov	lr, r3
 800a236:	4770      	bx	lr

0800a238 <_fini>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	bf00      	nop
 800a23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a23e:	bc08      	pop	{r3}
 800a240:	469e      	mov	lr, r3
 800a242:	4770      	bx	lr
